////////////////////////////////////////////////////////////////////////////////
//
// Математика LT_Math.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_MATH_H
#define __LT_MATH_H

#ifndef __LTDEFINE_H
#include "ltdefine.h"
#endif


#ifndef __LIB_FUNC__
#define __LIB_FUNC__
#define LIB_FUNC WINAPI
#endif


extern "C" {

//------------------------------------------------------------------------
//Математика
//------------------------------------------------------------------------

// Экспортный номер - 388
//------------------------------------------------------------------------------
// Аппроксимировать кривую дугами и отрезками с определенной точностью
// Функция возвращает 0 в случае неудачи или указатель на контур, дугу, отрезок
// Реально аппроксимируются bezier, nurbs, эквидистанта, эллирс, дуга эллипса и контур.
// Остальные кривые игнорируются
// ---
reference LIB_FUNC ksApproximationCurve( reference        p,           // указатель на кривую
                                         double           eps,         // точность  аппроксимации 1e-7...1
                                         unsigned char    curentLayer, // тип размещения по слоям 0 - на слой кривой 1- в текущий слой
                                         double           maxRad,  // максимально - допустимый радиус 0- ограничение не накладывается
                                         unsigned char    smooth );// 1- гладкое сопряжение 0- не гладкое сопряжение

// Экспортный номер - 206
//-----------------------------------------------------------------------------
// Определяет эквивалентность двух точек
// функция возвращает 1, если  точки равны, 0 - не равны
//-----------------------------------------------------------------------------
int LIB_FUNC  ksEqualPoints( double x1, double y1,    //первая точка
                             double x2, double y2 );  //вторая точка

// Экспортный номер - 54
//----------------------------------------------------------------------------
//  Выдает угол  в градусах.
//-----------------------------------------------------------------------------
double     LIB_FUNC Angle( double x1, double y1,   //первая точка
													double x2, double y2 ); //вторая точка

// Экспортный номер - 55
//------------------------------------------------------------------------------
//  Возвращает косинус аргумента.
//-------------------------------------------------------------------------------
double     LIB_FUNC CosD( double x );     //  x-угол в градусах

// Экспортный номер - 56
//------------------------------------------------------------------------------
//  Возвращает синус аргумента.
//-------------------------------------------------------------------------------
double     LIB_FUNC SinD( double x );     //  x-угол в градусах

// Экспортный номер - 57
//------------------------------------------------------------------------------
//  Возвращает тангенс аргумента.
//-------------------------------------------------------------------------------
double     LIB_FUNC TanD( double x );     //  x-угол в градусах

// Экспортный номер - 58
//------------------------------------------------------------------------------
//  Арктангенс.  Возвращает значение угла в градусах
//-------------------------------------------------------------------------------
double     LIB_FUNC AtanD( double x );


// Экспортный номер - 61
//--------------------------------------------------------------------------------
//  Пересечение двух отрезков.
//---------------------------------------------------------------------------------
void       LIB_FUNC IntersectLinSLinS( double x11, double y11,    //первая точка первого отрезка
																			 double x12, double y12,    //вторая точка первого отрезка
																			 double x21, double y21,    //первая точка второго отрезка
																			 double x22, double y22,    //вторая точка второго отрезка
																			 int * kp,                  //количество точек пересечения
																			 double * xp, double *yp ); //точка пересечения

// Экспортный номер - 266
//------------------------------------------------------------------------------
// Пересечение отрезка и прямой.
// ---
void LIB_FUNC IntersectLinSLine( double x1, double y1, // первая точка отрезка
   			  														  		 double x2, double y2, // вторая точка отрезка
                                             double x,  double y,  // точка на прямой
																	  				 double ang,           // угол прямой
																		  			 int * kp,             // количество пересечений
																		  			 double *xp, double *yp ); // коор-ты точки пересечения

// Экспортный номер - 267
//------------------------------------------------------------------------------
// Пересечение дуги окружности и прямой
// ---
void LIB_FUNC IntersectArcLin( double xc, double yc, double rad, // координаты центра и радиус дуги
																					 double f1, double f2, int n,      // углы начальной и конечной точек, направление дуги
                                           double x,  double y,  double ang, // точка и угол прямой
                                           int *kp,                          // количество пересечений
                                           double xp[], double yp[] );       // коор-ты точек пересечения

// Экспортный номер - 62
//--------------------------------------------------------------------------------
//  Пересечение двух прямых.
//---------------------------------------------------------------------------------
void       LIB_FUNC IntersectLinLin( double x1, double y1,      //точка на первой прямой
																		 double angle1,             //угол первой прямой
																		 double x2, double y2,      //точка на второй прямой
																		 double angle2,             //угол второй прямой
																		 int *kp,                   //количество точек пересечения
																		 double *xp, double *yp );  //точка пересечения

// Экспортный номер - 63
//--------------------------------------------------------------------------------
//  Пересечение двух окружностей.
//---------------------------------------------------------------------------------
void       LIB_FUNC  IntersectCirCir( double xc1, double yc1,//центр первой окружности
																		  double radius1,            //радиус первой окружности
																		  double xc2, double yc2,    //центр второй окружности
																		  double radius2,            //радиус втророй окружности
																		  int * kp,                  //количество точек пересечения
																		  double xp[], double yp[] );//массивы точек пересечения

// Экспортный номер - 64
//--------------------------------------------------------------------------------
//  Пересечение двух дуг.
//---------------------------------------------------------------------------------
void       LIB_FUNC  IntersectArcArc( double xac, double yac,     //центр первой дуги
																		  double rada,                //радиус первой дуги
																		  double fa1, double fa2,     //начальный и конечный угол первой дуги
																		  short directa,                //направление первой дуги
																		  double xbc, double ybc,     //центр второй дуги
																		  double radb,                //радиус второй дуги
																		  double fb1, double fb2,     //начальный и конечный угол второй дуги
																		  short directb,                //направление второй дуги
																		  int * kp,                   //количество точек пересечения
																		  double  xp[], double yp[] );//массивы точек пересечения


// Экспортный номер - 65
//--------------------------------------------------------------------------------
//  Пересечение отрезка и дуги.
//---------------------------------------------------------------------------------
void       LIB_FUNC  IntersectLinSArc( double x1, double y1,       //первая точка отрезка
																			 double x2, double y2,       //вторая точка отрезка
																			 double xc, double yc,       //центр дуги
																			 double rad,                 //радиус дуги
																			 double f1, double f2,       //начальный  и конечный угол дуги
																			 short direct,                 //направление дуги
																			 int * kp,                   //количество точек пересечения
																			 double xp[], double yp[] ); //массивы точек пересечения

// Экспортный номер - 66
//--------------------------------------------------------------------------------
//  Пересечение отрезка и окружности.
//---------------------------------------------------------------------------------
void       LIB_FUNC  IntersectLinSCir( double x1, double y1,       //первая точка отрезка
																			 double x2, double y2,       //вторая точка отрезка
																			 double xc, double yc,       //центр окружности
																			 double rad,                 //радиус окружности
																			 int * kp,                   //количество точек пересечения
																			 double  xp[], double yp[]); //массивы точек пересечения

// Экспортный номер - 67
//--------------------------------------------------------------------------------
//  Пересечение окружности и прямой.
//---------------------------------------------------------------------------------
void       LIB_FUNC  IntersectCirLin( double xc, double yc,        //центр окружности
																		  double rad,                  //радиус окружности
																		  double xl, double yl,        //точка на прямой
																		  double angle,                //угол прямой в гр.
																		  int * kp,                    //количество точек пересечения
																		  double  xp[], double yp[] ); //массивы точек пересечения

// Экспортный номер - 68
//--------------------------------------------------------------------------------
//  Пересечение окружности и дуги.
//---------------------------------------------------------------------------------
void       LIB_FUNC  IntersectCirArc( double xcc, double ycc,       //центр окружности
																		  double radc,                  //радиус окружности
																		  double xac, double yac,       //центр дуги
																		  double rada,                  //радиус дуги
																		  double fa1, double fa2,       //начальный и конечный угол дуги
																		  short directa,                  //направление дуги
																		  int * kp,                     //количество точек пересечения
																		  double  xp[], double yp[] );  //массивы точек пересечения

// Экспортный номер - 69
//--------------------------------------------------------------------------------
//  Пересечение двух кривых.
//---------------------------------------------------------------------------------
void       LIB_FUNC    IntersectCurvCurv ( reference p1,             //указатель на первую кривую
																				 	 reference p2,             //указатель на вторую кривую
																					 int * kp,                 //количество точек пересечения
																					 double xp[], double yp[], //массивы точек пересечения
																					 int maxCount );           //максимально-допустимое количество точек в массивах

// Экспортный номер - 269
//--------------------------------------------------------------------------------
//   Пересечение  двух кривых .
//   Возвращает:
//   1 успешное завершение
//   0 кривые не пересекаются или совпадают
//   -1 первый объект не существует
//   -2 второй объект не существует
//   -3 кривые расположены в разных видах
//   -4 не совпадают СК определения кривых (геом и анн) (?)
//   -5 первый объект не является кривой
//   -6 второй объект не является кривой
//   -7 ошибка
//---------------------------------------------------------------------------------
int  LIB_FUNC ksIntersectCurvCurv ( reference p1,      // указатель на первую кривую
                                    reference p2,      // указатель на вторую кривую
                                    reference array ); // динамический массив точек пересечения MathPointParam

// Экспортный номер - 70
//-----------------------------------------------------------------------------
//  Точки касания  окружности и прямой из задданной точки.
//-----------------------------------------------------------------------------
void       LIB_FUNC TanLinePointCircle( double x, double y,           //координаты точки
					 			  	    								double xc, double yc,         //центр окружности
								  											double rad,                   //радиус окружности
								  											int *kp,                      //количество точек касания
									  										double xp[], double yp[] );   //массивы точек касания

// Экспортный номер - 278
//-----------------------------------------------------------------------------
// Точки касания кривой и прямой из задданной точки
// Возвращает количество точек касания или 0 в случае неудачи
//-----------------------------------------------------------------------------
int LIB_FUNC  ksTanLinePointCurve( double x, double y,     //координаты точки
 	   									                        reference pCur,         //указатель кривую
                                              reference array );      // динамический массив точек касания MathPointParam
// Экспортный номер - 71
//-----------------------------------------------------------------------------
//  Точки касания окружности и прямой под задданым углом.
//-----------------------------------------------------------------------------
void       LIB_FUNC TanLineAngCircle( double xc, double yc,      //центр окружности
                                      double rad,                //радиус окружности
                                      double ang,                //угол наклона прямой
                                      double xp[],double yp[] ); //массивы точек касания
                                      
// Экспортный номер - 158
//-------------------------------------------------------------------------------
//  Функция определяет точки касания прямых к двум окружностям.
//  TAN содержит координаты двух точек касания, и определяет одну касательную
//  прямую. Касательных прямых может быть от 0 до 4.
//  Функция возвращает количество возможных  касательных прямых.
//-------------------------------------------------------------------------------
int        LIB_FUNC TanCircleCircle(  double xc1, double yc1, //центр  1-ой окружности
																			double radius1,         //радиус 1-ой  окружности
																			double xc2, double yc2, //центр  2-ой окружности
																			double radius2,         //радиус 2-ой  окружности
																			struct TAN tang[] );    //массив касательных отрезков
                                      
// Экспортный номер - 72
//-----------------------------------------------------------------------------
// Сопряжения  для двух прямых.
// Функция определяет  сопрягающие окружности определенного радиуса и точки
// сопряжения. Заполняются 4 структуры CON, если сопряжение есть.
//-----------------------------------------------------------------------------
void       LIB_FUNC  CouplingLineLine( double x1, double y1, //точка на первой прямой
                                       double angle1,        //угол первой прямой
                                       double x2, double y2, //точка на второй прямой
                                       double angle2,        //угол второй прямой
                                       double rad,           //радиус окружности сопряжения
                                       int *kp, CON *con );  //количество сопрягающих окружностей и структуры сопряжения
                                       
// Экспортный номер - 167
//-----------------------------------------------------------------------------
// Функция определяет  сопрягающие окружности определенного радиуса и точки
// сопряжения. Заполняются до 8 структур CON если сопряжение есть
//-----------------------------------------------------------------------------
void LIB_FUNC  ksCouplingLineCircle( double xc, double yc,    //центр окружности
                                     double radc,             //радиус окружности
                                     double x1, double y1,    //точка на  прямой
                                     double angle1,           //угол прямой
                                     double rad,              //радиус окружности сопряжения
                                     int *kp, CON *con );     //количество сопрягающих окружностей и структуры сопряжения
                                     
// Экспортный номер - 168
//-----------------------------------------------------------------------------
// Функция определяет  сопрягающие окружности определенного радиуса и точки
// сопряжения  для двух окружностей
// заполняются до 8 структур CON если сопряжение есть
//-----------------------------------------------------------------------------
void LIB_FUNC  ksCouplingCircleCircle( double xc1, double yc1,  // центр первой окружности
                                                  double radc1,            //радиус первой окружности
                                                  double xc2, double yc2,  // центр второй окружности
                                                  double radc2,            //радиус второй окружности
                                                  double rad,              //радиус окружности сопряжения
                                                  int *kp, CON *con );     //количество сопрягающих окружностей и структуры сопряжения
// Экспортный номер - 73
//-----------------------------------------------------------------------------
//  Симметрия точки относительно оси.
//-----------------------------------------------------------------------------
void       LIB_FUNC Symmetry( double x, double y,       //координаты точки
                              double x1, double y1,     //координаты первой точки оси
                              double x2, double y2,     //координаты второй оси
                              double *xc, double *yc ); //результат

// Экспортный номер - 74
//-----------------------------------------------------------------------------
//  Повернуть точку относительно центра.
//-----------------------------------------------------------------------------
void       LIB_FUNC   Rotate(  double x, double y,      //координаты точки
                               double xc, double yc,    //координаты центра
                               double ang,              //угол поворота
                               double *xr, double *yr );//результат

// Экспортный номер - 75
//-----------------------------------------------------------------------------
// расстояние между двумя точками.
//-----------------------------------------------------------------------------
double     LIB_FUNC   DistancePntPnt (  double x1, double y1,  //координаты первой точки
                                        double x2, double y2 );//координаты второй точки

// Экспортный номер - 207
//-----------------------------------------------------------------------------
// расстояние между  точкой и отрезком
//-----------------------------------------------------------------------------
double     LIB_FUNC ksDistancePntLineSeg (  double x, double y,    //координаты точки
                                            double x1, double y1,  //первая точка отрезка
                                            double x2, double y2 );//вторая точка отрезка

// Экспортный номер - 208
//-----------------------------------------------------------------------------
// расстояние между  точкой и дугой
//-----------------------------------------------------------------------------
double      LIB_FUNC ksDistancePntArc (  double x, double y,           //координаты точки
        															   double xac, double yac,       //центр дуги
															           double rada,                  //радиус дуги
															           double fa1, double fa2,       //начальный и конечный угол дуги
															           short directa );              //направление дуги

// Экспортный номер - 209
//-----------------------------------------------------------------------------
// расстояние между  точкой и окружностью
//-----------------------------------------------------------------------------
double      LIB_FUNC ksDistancePntCircle (  double x, double y,       //координаты точки
        		   									            double xc, double yc,     //центр окружности
																		        double rad );             //радиус окружности

// Экспортный номер - 210
//-----------------------------------------------------------------------------
// расстояние между  точкой и прямой, заданной точкой и углом
//-----------------------------------------------------------------------------
double      LIB_FUNC ksDistancePntLine (  double x, double y,     //координаты точки
                                          double x1, double y1,   //координаты точки на прямой
                                          double angle );         //угол прямой

// Экспортный номер - 212
//-----------------------------------------------------------------------------
// расстояние между  точкой и прямой, заданной точками
//-----------------------------------------------------------------------------
double LIB_FUNC ksDistancePntLineForPoint (  double x, double y,      //координаты точки
                                             double x1, double y1,     //координаты точки на прямой
                                             double x2, double y2 );   //координаты точки на прямой

// Экспортный номер - 126
//-----------------------------------------------------------------------------
// Определить точку пересечения отрезка и перпендикуляра к нему из
// заданной точки.
//-----------------------------------------------------------------------------
void       LIB_FUNC  Perpendicular (  double x, double y,     //координаты произвольной точки
                                      double x1, double y1,   //координаты первой точки
                                      double x2, double y2,   //координаты второй точки
                                      double *xp, double *yp);//координаты точки проекции
// Экспортный номер - 164
//---------------------------------------------------------------------------
//  Сдвинуть точку по напралению и длине
//---------------------------------------------------------------------------
void   LIB_FUNC  MovePoint (  double *x, double *y,       //координаты точки
                              double ang, double len );   //угол сдвига в гр. и длина сдвига

// Экспортный номер - 224
//------------------------------------------------------------------------------
// Функция возвращает угол нормали к кривой в заданной точке ( 0 - 360 гр ).
// Если точка не находится на кривой, то точка проецируется на кривую.
// В случае неудачи возвращается -1
// ---
double LIB_FUNC  ksGetCurvePerpendicular( reference curve,      // указатель на кривую
                                          double x, double y ); // координаты точки

// Экспортный номер - 223
//------------------------------------------------------------------------------
// Функция возвращает массив равномерно расположенных на кривой точек.
// В случае неудачи возвращается 0
// ---
reference LIB_FUNC ksPointsOnCurve( reference curve,   // указатель на кривую
                                    int       count ); // количество точек



// Экспортный номер - 258
//-----------------------------------------------------------------------------
// Функция возвращает координаты проекции точки на кривую.
// В случае неудачи возвращается 0.
//-----------------------------------------------------------------------------
int LIB_FUNC  ksGetCurvePointProjection( reference curve,          // указатель на кривую
             					  							   double x, double y,       // координаты точки
						          							     double *kx, double *ky ); // координаты проекции точки

// Экспортный номер - 225
//------------------------------------------------------------------------------
// Функция продвигает точку на расстояние len по кривой.
// Если точка не находится на кривой, то точка проецируется на кривую.
// Функция возвращает 1 в случае успеха или 0 при неудаче.
// ---
int LIB_FUNC  ksMovePointOnCurve( reference curve,      // указатель на кривую
                                  double *x, double *y, // координаты точки
                                  double len,           // расстояние на которое нужно сместить точку
                                  int    dir );         // направление продвижения точки(1 - в направлении построения кривой, -1 в обратном напрвлении )

// Экспортный номер - 228
//------------------------------------------------------------------------------
// Найти периметр кривой
// ---
double LIB_FUNC  ksGetCurvePerimeter( reference     curve,       // указатель на кривую
                                      unsigned char dimension ); // размерность длины в интервале [ST_MIX_SM..ST_MIX__M]


// Экспортный номер - 229
//------------------------------------------------------------------------------
// Найти плоские моментно-центровочные характеристики кривой или  группы кривых
// Кривые должны быть замкнутыми и представлять собой  наружные и внутренние контура
// Если контура заданы корректно, функция возвращает 1.
// ---
int LIB_FUNC  ksCalcInertiaProperties( reference     p,           // указатель на кривую или группу кривых
                                       InertiaParam *properties,  // указатель на структуру моментно-центровочных характкристик
                                       unsigned char dimension ); // размерность в интервале [ST_MIX_SM..ST_MIX__M]


// Экспортный номер - 989
//------------------------------------------------------------------------------
// Найти плоские моментно-центровочные характеристики кривой или  группы кривых
// Кривые должны быть замкнутыми и представлять собой  наружные и внутренние контура
// Если контура заданы корректно, функция возвращает 1.
// ---
int LIB_FUNC  ksCalcInertiaPropertiesEx( reference     p,                // указатель на кривую или группу кривых
                                         InertiaParam *properties,       // указатель на структуру моментно-центровочных характкристик
                                         unsigned char dimension,        // размерность в интервале [ST_MIX_SM..ST_MIX__M]
                                         int           fromObjectArea ); // 1 - передаются не перекрывающиеся контуры из процесса ksViewGetObjectArea
                                                                         // 0 - контуры нужно собирать заново


// Экспортный номер - 230
//------------------------------------------------------------------------------
// Найти объемные массо-центровочные характеристики кривой или  группы кривых
// для тел вращения или выдавливания
// Кривые должны быть замкнутыми и представлять собой  наружные и внутренние контура
// профиля.
// bitVector - определяет размерность длины, размерность массы,
// тип детали ( вращение или выдавливание ). Флаги находятся в интервале [ST_MIX_MM..ST_MIX_RV]
// Пример  ( метры|кг|вращение- ST_MIX_M|ST_MIX_KG|ST_MIX_RV )
// ---
int LIB_FUNC  ksCalcMassInertiaProperties( reference         p,          // указатель на кривую или группу кривых
                                           MassInertiaParam *properties, // указатель на структуру массо-центровочных характкристик
                                           unsigned int      bitVector,  // набор флагов
                                           double            density,    // плотность в г/см3
                                           double            param );    // если тело вращения-угол раствора в градусах, тело выдавливания - толщина

// Экспортный номер - 230
//------------------------------------------------------------------------------
// Найти объемные массо-центровочные характеристики кривой или  группы кривых
// для тел вращения или выдавливания
// Кривые должны быть замкнутыми и представлять собой  наружные и внутренние контура
// профиля.
// bitVector - определяет размерность длины, размерность массы,
// тип детали ( вращение или выдавливание ). Флаги находятся в интервале [ST_MIX_MM..ST_MIX_RV]
// Пример  ( метры|кг|вращение- ST_MIX_M|ST_MIX_KG|ST_MIX_RV )
// ---
int LIB_FUNC  ksCalcMassInertiaPropertiesEx( reference         p,                // указатель на кривую или группу кривых
                                             MassInertiaParam *properties,       // указатель на структуру массо-центровочных характкристик
                                             unsigned int      bitVector,        // набор флагов
                                             double            density,          // плотность в г/см3
                                             double            param,            // если тело вращения-угол раствора в градусах, тело выдавливания - толщина
                                             int               fromObjectArea ); // 1 - передаются не перекрывающиеся контуры из процесса ksViewGetObjectArea
                                                                                 // 0 - контуры нужно собирать заново


// Экспортный номер - 338
//--------------------------------------------------------------------------
//  перевести точку из СК вида в локальную СК
//--------------------------------------------------------------------------
int       LIB_FUNC ksPointIntoMtr( double x, double y,           //координаты точки
                                   double *xn, double *yn );     //результат

// Экспортный номер - 339
//--------------------------------------------------------------------------
//  перевести точку из локальной СК в СК вида
//--------------------------------------------------------------------------
int       LIB_FUNC ksPointFromMtr( double x, double y,          //координаты точки
                                   double *xn, double *yn );    //результат

// Экспортный номер - 391
//------------------------------------------------------------------------------
//  Проверить нахождение точки по отношению к контуру
//  Функция возвращает 0 в случае неудачи, 1 - точка вне контура, 2 - точка на контуре 3 - точка внутри контура
// ---
int LIB_FUNC ksIsPointInsideContour( reference  p,       //указатель на контур
                                     double x, double y, //координаты точки
                                     double precision ); // точность проверки  1..1E-6
                                   
// Экспортный номер - 340
//--------------------------------------------------------------------------
//  перевести длину в локальную СК
//--------------------------------------------------------------------------
int       LIB_FUNC ksLengthIntoMtr( double *len );

// Экспортный номер - 341
//--------------------------------------------------------------------------
//  перевести длину  из локальной СК
//--------------------------------------------------------------------------
int       LIB_FUNC ksLengthFromMtr( double *len );

// Экспортный номер - 378
//------------------------------------------------------------------------------
// Вычислить выражение
// s = выражение; Поддерживаются функции и переменные :
// SIN,COS,TAN,ATAN,  - тригонометрическине функии  ( аргумент в рад )
// SQRT,EXP,LN,ABS,   -корень квадратный, экспонента, натуральный логарифм, абсолютное значение
// SIND,COSD,TAND,ATAND - тригонометрическине функии  (аргумент в град )
// Если s = "A1 = 100 " - будет заведена переменная A1 c значение 100;
// переменных может быть неограниченное количество
// Функция возвращает  1 в случае успеха или 0 в случае неудачи
// ---
int  LIB_FUNC ksCalculate( char   *s,     // выражение
                           double *rez ); // результат

// Экспортный номер - 836
//------------------------------------------------------------------------------
// Вычислить выражение
// s = выражение; Поддерживаются функции и переменные :
// SIN,COS,TAN,ATAN,  - тригонометрическине функии  ( аргумент в рад )
// SQRT,EXP,LN,ABS,   -корень квадратный, экспонента, натуральный логарифм, абсолютное значение
// SIND,COSD,TAND,ATAND - тригонометрическине функии  (аргумент в град )
// Если s = "A1 = 100 " - будет заведена переменная A1 c значение 100;
// переменных может быть неограниченное количество
// Функция возвращает  1 в случае успеха или 0 в случае неудачи (Unicode)
// ---
int  LIB_FUNC ksCalculateW( LPWSTR  s,     // выражение
                            double *rez ); // результат

#ifdef _UNICODE
#define ksCalculateT  ksCalculateW
#else
#define ksCalculateT  ksCalculate
#endif // !UNICODE


// Экспортный номер - 379
//------------------------------------------------------------------------------
//  очистить массив переменных калькулятора
// Функция возвращает  1 в случае успеха или 0 в случае неудачи
// ---
int LIB_FUNC ksCalculateReset();

// Экспортный номер - 292
//-----------------------------------------------------------------------------
// Функция возвращает массив точек расположенных на кривой с заданным шагом.
// В случае неудачи возвращается 0
//-----------------------------------------------------------------------------
reference LIB_FUNC ksPointsOnCurveByStep( reference curve, // указатель на кривую
                                          double step );   // шаг расположения точек

// Экспортный номер - 293
//-----------------------------------------------------------------------------
// Функция возвращает расстояние между двумя точками на кривой.
// Если точки не находится на кривой, то точки проецируются на кривую.
// В случае неудачи возвращается 0
//-----------------------------------------------------------------------------
double LIB_FUNC ksDistancePntPntOnCurve( reference curve,      // указатель на кривую
																				 double x1, double y1, // точки на кривой
                                         double x2, double y2 );

// Экспортный номер - 738
// [24/5/04]
//-----------------------------------------------------------------------------
// Функция возвращает координаты проекции точки на кривую. 
// В случае неудачи возвращается 0.
//-----------------------------------------------------------------------------
int LIB_FUNC  ksGetCurvePointProjectionEx( reference curve,        // указатель на кривую
             					  							   double x, double y,       // координаты точки
																				 double *kx, double *ky,   // координаты проекции точки
						          							     double *t );              // параметр кривой

// Экспортный номер - 738
// [24/5/04]
//-----------------------------------------------------------------------------
// Функция преобразует параметр кривой t в координаты вида.
// В случае неудачи возвращается 0.
//-----------------------------------------------------------------------------
int LIB_FUNC  ksGetCurvePoint( reference curve,        // указатель на кривую
						          				 double t,               // параметр кривой
															 double *x, double *y ); // координаты проекции точки

// Экспортный номер - 746
//-----------------------------------------------------------------------------
// Функция возвращает минимальный и максимальный параметр кривой. 
// В случае неудачи возвращается 0.
//-----------------------------------------------------------------------------
int LIB_FUNC ksGetCurveMinMaxParametr( reference curve,        // указатель на кривую
             					  							 double *tMin,           // минимальный параметр кривой    
                                       double *tMax );         // максимальный параметр кривой


// Экспортный номер - 747
//-----------------------------------------------------------------------------
// Функция возвращает расстояние между двумя точками на кривой
// по парамертрам кривой в данных точках
// В случае неудачи возвращается 0
//-----------------------------------------------------------------------------
double LIB_FUNC ksDistanceT1T2OnCurve( reference curve,  // указатель на кривую
																			 double t1,        // Параметр кривой в точке 1
                                       double t2 );      // Параметр кривой в точке 2


// Экспортный номер - 754
//-----------------------------------------------------------------------------
// Функция расчета касательных к двум кривым .
//   Возвращает:
//   1 успешное завершение
//   0 построить касательную нельзя ( кривые совпадают или одна кривая вложена в другую )
//   -1 первый объект не существует
//   -2 второй объект не существует
//   -3 кривые расположены в разных видах
//   -4 не совпадают СК определения кривых (геом и анн) (?)
//   -5 первый объект не является кривой
//   -6 второй объект не является кривой
//   -7 ошибка
// ---
int  LIB_FUNC ksTanCurvCurv( reference p1,          // Указатель на первую кривую  
                             reference p2,          // Указатель на вторую кривую
                             reference pointArr1,   // Массив точек на первой кривой   
                             reference pointArr2 ); // Массив точек на второй кривой

} // extern "C"

#endif // __LT_MATH_H