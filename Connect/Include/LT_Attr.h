////////////////////////////////////////////////////////////////////////////////
//
// Работа с атрибутами. LT_Attr.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_ATTR_H
#define __LT_ATTR_H

#ifndef __LTDEFINE_H
#include "ltdefine.h"
#endif

#ifndef __LIB_FUNC__
#define __LIB_FUNC__
#define LIB_FUNC WINAPI
#endif

extern "C" {

// Экспортный номер - 105
//-------------------------------------------------------------------------
// устаревшая функция 26.6.97
// Создать тип атрибута в библиотеке libname
// если libname = NULL- тип атрибута создается в документе
// функция возвращает уникальный номер типа или 0 при неудаче
//-------------------------------------------------------------------------
double     LIB_FUNC CreateAttrType( AttributeType * attrType,// информация о типе атрибута
                                    char * libname );        // имя библиотеки типов атрибутов


// Экспортный номер - 174
//-------------------------------------------------------------------------
// Создать тип атрибута в библиотеке libname
// если libname = NULL- тип атрибута создается в документе
// функция возвращает уникальный номер типа или 0 при неудаче
//-------------------------------------------------------------------------
double     LIB_FUNC ksCreateAttrType( ksAttributeType * attrType,  // информация о типе атрибута
                                                        char * libname ); // имя библиотеки типов атрибутов

// Экспортный номер - 886
//-------------------------------------------------------------------------
// Создать тип атрибута в библиотеке libname
// если libname = NULL- тип атрибута создается в документе
// функция возвращает уникальный номер типа или 0 при неудаче (Unicode)
//-------------------------------------------------------------------------
double     LIB_FUNC ksCreateAttrTypeW( ksAttributeTypeW * attrType,  // информация о типе атрибута
                                                        LPWSTR libname ); // имя библиотеки типов атрибутов

#ifdef _UNICODE
#define ksCreateAttrTypeT  ksCreateAttrTypeW
#else
#define ksCreateAttrTypeT  ksCreateAttrType
#endif // !UNICODE


// Экспортный номер - 106
//-------------------------------------------------------------------------
// Удалить тип атрибута в библиотеке libname.
// Если libname = NULL, тип атрибута удаляется из документа.
//-------------------------------------------------------------------------
int        LIB_FUNC DeleteAttrType( double attrID,          // уникальный номер типа
                                    char *libname,          // имя библиотеки типов атрибутов
                                    char * password );      // пароль  типа атрибута

// Экспортный номер - 887
//-------------------------------------------------------------------------
// Удалить тип атрибута в библиотеке libname.
// Если libname = NULL, тип атрибута удаляется из документа. (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC DeleteAttrTypeW( double attrID,          // уникальный номер типа
                                     LPWSTR libname,          // имя библиотеки типов атрибутов
                                     LPWSTR password );      // пароль  типа атрибута

#ifdef _UNICODE
#define DeleteAttrTypeT  DeleteAttrTypeW
#else
#define DeleteAttrTypeT  DeleteAttrType
#endif // !UNICODE


// Экспортный номер - 107
//-------------------------------------------------------------------------
// устаревшая функция 26.6.97
// Получить  тип атрибута из библиотеки libname.
// Если libname = NULL, тип атрибута считывается из документа.
// Заполняется структура AttributeType.
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrType( double attrID,              // уникальный номер типа
                                 char *libname,              // имя библиотеки типов атрибутов
                                 AttributeType * attrType);  // информация о типе атрибута


// Экспортный номер - 175
//-------------------------------------------------------------------------
// Получить  тип атрибута из библиотеки libname.
// Если libname = NULL, тип атрибута считывается из документа.
// Заполняется структура ksAttributeType.
//-------------------------------------------------------------------------
int         LIB_FUNC ksGetAttrType( double            attrID,    // уникальный номер типа
                                    char            * libname,   // имя библиотеки типов атрибутов
                                    ksAttributeType * attrType); // информация о типе атрибута

// Экспортный номер - 888
//-------------------------------------------------------------------------
// Получить  тип атрибута из библиотеки libname.
// Если libname = NULL, тип атрибута считывается из документа.
// Заполняется структура ksAttributeType. (Unicode)
//-------------------------------------------------------------------------
int         LIB_FUNC ksGetAttrTypeW( double            attrID,    // уникальный номер типа
                                     LPWSTR             libname,   // имя библиотеки типов атрибутов
                                     ksAttributeTypeW * attrType); // информация о типе атрибута

#ifdef _UNICODE
#define ksGetAttrTypeT  ksGetAttrTypeW
#else
#define ksGetAttrTypeT  ksGetAttrType
#endif // !UNICODE


// Экспортный номер - 108
//-------------------------------------------------------------------------
// устаревшая функция 26.6.97
// Изменить тип атрибута в библиотеке libname.
// Если libname = NULL, тип атрибута изменить в документе.
// Функция возвращает уникальный номер типа или 0 при неудаче.
//-------------------------------------------------------------------------
double     LIB_FUNC SetAttrType( double attrID,             // уникальный номер типа
                                 char   *libname,           // имя библиотеки типов атрибутов
                                 AttributeType * attrType,  // информация о типе атрибута
                                 char * password );         // пароль типа атрибута

// Экспортный номер - 176
//-------------------------------------------------------------------------
// Изменить тип атрибута в библиотеке libname.
// Если libname = NULL, тип атрибута изменить в документе.
// Функция возвращает уникальный номер типа или 0 при неудаче.
//-------------------------------------------------------------------------
double  LIB_FUNC ksSetAttrType( double            attrID,    // уникальный номер типа
                                           char            * libname,   // имя библиотеки типов атрибутов
                                           ksAttributeType * attrType,  // информация о типе атрибута
                                           char            * password );// пароль типа атрибута

// Экспортный номер - 891
//-------------------------------------------------------------------------
// Изменить тип атрибута в библиотеке libname.
// Если libname = NULL, тип атрибута изменить в документе.
// Функция возвращает уникальный номер типа или 0 при неудаче. (Unicode)
//-------------------------------------------------------------------------
double  LIB_FUNC ksSetAttrTypeW( double            attrID,    // уникальный номер типа
                                           LPWSTR            libname,   // имя библиотеки типов атрибутов
                                           ksAttributeTypeW *attrType,  // информация о типе атрибута
                                           LPWSTR            password );// пароль типа атрибута

#ifdef _UNICODE
#define ksSetAttrTypeT  ksSetAttrTypeW
#else
#define ksSetAttrTypeT  ksSetAttrType
#endif // !UNICODE


// Экспортный номер - 109
//-------------------------------------------------------------------------
// устаревшая функция 05.6.2000
//  Создать  атрибут по номеру типа атрибута из  библиотеки libname.
//  Если libname = NULL, тип атрибута берется из документа.
//  функция возвращает указатель на атрибут  или 0 при неудаче.
//  Указателем на объект может быть группа, вид, объект, документ.
//  Если pObj = 0 - атрибут текущего документа
//-------------------------------------------------------------------------
reference  LIB_FUNC CreateAttr( reference pObj,  // указатель объекта к которому подключается атрибут
                                Attribute * attr,// информация об атрибуте
                                double attrID,   // уникальный номер типа
                                char *libname ); // имя библиотеки типов атрибутов


// Экспортный номер - 259
//-------------------------------------------------------------------------
//  Создать  атрибут по номеру типа атрибута из  библиотеки libname.
//  Если libname = NULL, тип атрибута берется из документа.
//  функция возвращает указатель на атрибут  или 0 при неудаче.
//  Указателем на объект может быть группа, вид, объект, документ.
//  Если pObj = 0 - атрибут текущего документа
//-------------------------------------------------------------------------
reference  LIB_FUNC ksCreateAttr( reference pObj,    // указатель объекта к которому подключается атрибут
                                  ksAttribute * attr,// информация об атрибуте
                                  double attrID,     // уникальный номер типа
                                  char *libname );   // имя библиотеки типов атрибутов

// Экспортный номер - 893
//-------------------------------------------------------------------------
//  Создать  атрибут по номеру типа атрибута из  библиотеки libname.
//  Если libname = NULL, тип атрибута берется из документа.
//  функция возвращает указатель на атрибут  или 0 при неудаче.
//  Указателем на объект может быть группа, вид, объект, документ.
//  Если pObj = 0 - атрибут текущего документа (Unicode)
//-------------------------------------------------------------------------
reference  LIB_FUNC ksCreateAttrW( reference pObj,    // указатель объекта к которому подключается атрибут
                                   ksAttributeW * attr,// информация об атрибуте
                                   double attrID,     // уникальный номер типа
                                   LPWSTR libname );   // имя библиотеки типов атрибутов

#ifdef _UNICODE
#define ksCreateAttrT  ksCreateAttrW
#else
#define ksCreateAttrT  ksCreateAttr
#endif // !UNICODE


// Экспортный номер - 110
//-------------------------------------------------------------------------
//  Удалить атрибут. Функция возвращает 1 в случае успеха или 0 при неудаче.
//  Если pObj = 0 - атрибут документа
//-------------------------------------------------------------------------
int        LIB_FUNC DeleteAttr ( reference pObj,   //  указатель объекта к которому подключен атрибут
                                 reference pAttr,  //  указатель  атрибута
                                 char * password );//  пароль атрибута


// Экспортный номер - 894
//-------------------------------------------------------------------------
//  Удалить атрибут. Функция возвращает 1 в случае успеха или 0 при неудаче.
//  Если pObj = 0 - атрибут документа (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC DeleteAttrW ( reference pObj,   //  указатель объекта к которому подключен атрибут
                                  reference pAttr,  //  указатель  атрибута
                                  LPWSTR password );//  пароль атрибута


#ifdef _UNICODE
#define DeleteAttrT  DeleteAttrW
#else
#define DeleteAttrT  DeleteAttr
#endif // !UNICODE


// Экспортный номер - 111
//-------------------------------------------------------------------------
// Функция устарела 22.5.00
// Получить значение ячейки из таблицы атрибута.
// Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrValue ( reference pAttr,              // указатель атрибута
                                   unsigned int rowNumb,         // номер строки
                                   unsigned int columnNumb,      // номер колонки
                                   unsigned char *flagVisible,   // флаг видимости ячейки  (одно значение, если не запись и массив значений, если запись)
                                   void *value,                  // указатель на память пользователя, куда копируется значение ячейки
                                   unsigned int size );          // размер выделенной памяти

// Экспортный номер - 251
//-------------------------------------------------------------------------
// Получить значение ячейки из таблицы атрибута.
// Функция возвращает 1 в случае успеха или 0 при неудаче.
// Строковое значени атрибута будет интерпритироваться как char
//-------------------------------------------------------------------------
int LIB_FUNC ksGetAttrValue ( reference pAttr,             // указатель атрибута
                              unsigned int rowNumb,        // номер строки
                              unsigned int columnNumb,     // номер колонки
                              unsigned char *flagVisible,  // флаг видимости ячейки  (одно значение, если не запись и массив значений, если запись)
                              unsigned char *columnKeys,   // ключ поля колонки  (одно значение, если не запись и массив значений, если запись)
                              void *value,                 // указатель на память пользователя, куда копируется значение ячейки
                              unsigned int size );         // размер выделенной памяти
// Экспортный номер - 947
//-------------------------------------------------------------------------
// Получить значение ячейки из таблицы атрибута.
// Функция возвращает 1 в случае успеха или 0 при неудаче.
// Строковое значени атрибута будет интерпритироваться как wchar_t (Unicode)
//-------------------------------------------------------------------------
int LIB_FUNC ksGetAttrValueW( reference pAttr,             // указатель атрибута
                              unsigned int rowNumb,        // номер строки
                              unsigned int columnNumb,     // номер колонки
                              unsigned char *flagVisible,  // флаг видимости ячейки  (одно значение, если не запись и массив значений, если запись)
                              unsigned char *columnKeys,   // ключ поля колонки  (одно значение, если не запись и массив значений, если запись)
                              void *value,                 // указатель на память пользователя, куда копируется значение ячейки
                              unsigned int size );         // размер выделенной памяти

#ifdef _UNICODE
#define ksGetAttrValueT  ksGetAttrValueW
#else
#define ksGetAttrValueT  ksGetAttrValue
#endif // !UNICODE

// Экспортный номер - 112
//-------------------------------------------------------------------------
//  Функция устарела 22.5.00
//  Изменить значение ячейки в таблице атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int        LIB_FUNC SetAttrValue ( reference pAttr,             // указатель атрибута
                                   unsigned int rowNumb,        // номер строки
                                   unsigned int columnNumb,     // номер колонки
                                   unsigned char *flagVisible,  // флаг видимости ячейки  (одно значение, если не запись и массив значений, если запись)
                                   void *value,                 // указатель на память пользователя, откуда копируется значение ячейки
                                   unsigned int size,           // размер выделенной памяти под value
                                   char * password );           // пароль атрибута

// Экспортный номер - 252
//-------------------------------------------------------------------------
//  Изменить значение ячейки в таблице атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int LIB_FUNC ksSetAttrValue( reference      pAttr,             // указатель атрибута
                             unsigned int   rowNumb,           // номер строки
                             unsigned int   columnNumb,        // номер колонки
                             unsigned char *flagVisible,       // флаг видимости ячейки  (одно значение, если не запись и массив значений, если запись)
                             unsigned char *columnKeys,        // ключ поля колонки  (одно значение, если не запись и массив значений, если запись)
                             void          *value,             // указатель на память пользователя, откуда копируется значение ячейки
                             unsigned int   size,              // размер выделенной памяти под value
                             char          *password );        // пароль атрибута

// Экспортный номер - 896
//-------------------------------------------------------------------------
//  Изменить значение ячейки в таблице атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче. (Unicode)
//-------------------------------------------------------------------------
int LIB_FUNC ksSetAttrValueW( reference      pAttr,             // указатель атрибута
                              unsigned int   rowNumb,           // номер строки
                              unsigned int   columnNumb,        // номер колонки
                              unsigned char *flagVisible,       // флаг видимости ячейки  (одно значение, если не запись и массив значений, если запись)
                              unsigned char *columnKeys,        // ключ поля колонки  (одно значение, если не запись и массив значений, если запись)
                              void          *value,             // указатель на память пользователя, откуда копируется значение ячейки
                              unsigned int   size,              // размер выделенной памяти под value
                              LPWSTR         password );        // пароль атрибута

#ifdef _UNICODE
#define ksSetAttrValueT  ksSetAttrValueW
#else
#define ksSetAttrValueT  ksSetAttrValue
#endif // !UNICODE



// Экспортный номер - 113
//-------------------------------------------------------------------------
//  Функция устарела 22.5.00
//  Получить данные строки из таблицы атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrRow ( reference pAttr,           // указатель атрибута
                                 unsigned int rowNumb,      // номер строки
                                 unsigned char *flagVisible,// указатель на массив флагов видимости ячеек строки
                                 void *value,               // указатель на память пользователя, куда копируются данные
                                 unsigned int size );       // размер выделенной памяти  под value

// Экспортный номер - 253
//-------------------------------------------------------------------------
//  Получить данные строки из таблицы атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int LIB_FUNC ksGetAttrRow ( reference      pAttr,            // указатель атрибута
                           unsigned int   rowNumb,          // номер строки
                           unsigned char *flagVisible,      // указатель на массив флагов видимости ячеек строки
                           unsigned char *columnKeys,       // указатель на массив ключей ячеек строки
                           void          *value,            // указатель на память пользователя, куда копируются данные
                           unsigned int   size );           // размер выделенной памяти  под value

// Экспортный номер - 948
//-------------------------------------------------------------------------
//  Получить данные строки из таблицы атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче. (Unicode)
//-------------------------------------------------------------------------
int LIB_FUNC ksGetAttrRowW( reference      pAttr,            // указатель атрибута
                           unsigned int   rowNumb,          // номер строки
                           unsigned char *flagVisible,      // указатель на массив флагов видимости ячеек строки
                           unsigned char *columnKeys,       // указатель на массив ключей ячеек строки
                           void          *value,            // указатель на память пользователя, куда копируются данные
                           unsigned int   size );           // размер выделенной памяти  под value


#ifdef _UNICODE
#define ksGetAttrRowT  ksGetAttrRowW
#else
#define ksGetAttrRowT  ksGetAttrRow
#endif // !UNICODE

// Экспортный номер - 114
//-------------------------------------------------------------------------
//  Изменить данные строки в таблице атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int        LIB_FUNC SetAttrRow ( reference pAttr,             // указатель атрибута
                                 unsigned int rowNumb,        // номер строки
                                 unsigned char *flagVisible,  // указатель на массив флагов видимости ячеек строки
                                 void *value,                 // указатель на память пользователя, откуда копируются данные
                                 unsigned int size,           // размер выделенной памяти под value
                                 char * password );           // пароль атрибута


// Экспортный номер - 254
//-------------------------------------------------------------------------
//  Изменить данные строки в таблице атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int LIB_FUNC ksSetAttrRow ( reference      pAttr,             // указатель атрибута
                            unsigned int   rowNumb,           // номер строки
                            unsigned char *flagVisible,       // указатель на массив флагов видимости ячеек строки
                            unsigned char *columnKeys,        // указатель на массив ключей ячеек строки
                            void          *value,             // указатель на память пользователя, откуда копируются данные
                            unsigned int   size,              // размер выделенной памяти под value
                            char          *password );        // пароль атрибута

// Экспортный номер - 898
//-------------------------------------------------------------------------
//  Изменить данные строки в таблице атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче. (Unicode)
//-------------------------------------------------------------------------
int LIB_FUNC ksSetAttrRowW ( reference      pAttr,             // указатель атрибута
                             unsigned int   rowNumb,           // номер строки
                             unsigned char *flagVisible,       // указатель на массив флагов видимости ячеек строки
                             unsigned char *columnKeys,        // указатель на массив ключей ячеек строки
                             void          *value,             // указатель на память пользователя, откуда копируются данные
                             unsigned int   size,              // размер выделенной памяти под value
                             LPWSTR         password );        // пароль атрибута

#ifdef _UNICODE
#define ksSetAttrRowT  ksSetAttrRowW
#else
#define ksSetAttrRowT  ksSetAttrRow
#endif // !UNICODE


// Экспортный номер - 218
//-------------------------------------------------------------------------
//  добавить строку к табличному атрибуту неопределенной длины
//  функция возвращает 1 в случае успеха или 0 при неудаче
//-------------------------------------------------------------------------
int        LIB_FUNC ksAddAttrRow ( reference pAttr,              // указатель атрибута
                                   int rowNumb,                  // номер строки, после которой вставлять, -1 -в конец
                                   unsigned char *flagVisible,   // указатель на массив флагов видимости ячеек строки
                                   void *value,                  // указатель на память пользователя, откуда копируются данн
                                   unsigned int size,            // размер выделенной памяти под value
                                   char * password );            // пароль атрибута

// Экспортный номер - 899
//-------------------------------------------------------------------------
//  добавить строку к табличному атрибуту неопределенной длины
//  функция возвращает 1 в случае успеха или 0 при неудаче (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC ksAddAttrRowW ( reference pAttr,              // указатель атрибута
                                    int rowNumb,                  // номер строки, после которой вставлять, -1 -в конец
                                    unsigned char *flagVisible,   // указатель на массив флагов видимости ячеек строки
                                    void *value,                  // указатель на память пользователя, откуда копируются данн
                                    unsigned int size,            // размер выделенной памяти под value
                                    LPWSTR password );            // пароль атрибута

#ifdef _UNICODE
#define ksAddAttrRowT  ksAddAttrRowW
#else
#define ksAddAttrRowT  ksAddAttrRow
#endif // !UNICODE


// Экспортный номер - 219
//-------------------------------------------------------------------------
//  удалить строку табличного атрибута неопределенной длины
//  функция возвращает 1 в случае успеха или 0 при неудаче
//-------------------------------------------------------------------------
int        LIB_FUNC ksDeleteAttrRow ( reference pAttr,         // указатель атрибута
                                      unsigned int rowNumb,    // номер строки
                                      char * password );       // пароль атрибута


// Экспортный номер - 900
//-------------------------------------------------------------------------
//  удалить строку табличного атрибута неопределенной длины
//  функция возвращает 1 в случае успеха или 0 при неудаче (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC ksDeleteAttrRowW ( reference pAttr,         // указатель атрибута
                                       unsigned int rowNumb,    // номер строки
                                       LPWSTR password );       // пароль атрибута

#ifdef _UNICODE
#define ksDeleteAttrRowT  ksDeleteAttrRowW
#else
#define ksDeleteAttrRowT  ksDeleteAttrRow
#endif // !UNICODE


// Экспортный номер - 115
//-------------------------------------------------------------------------
//  функция устарела 9.7.97 со временем будет удалена
//  Получить размер данных ячейки.
//-------------------------------------------------------------------------
int        LIB_FUNC GetSizeAttrValue ( reference pAttr,           // указатель атрибута
                                       unsigned int columnNumb ); // номер колонки

// Экспортный номер - 177
//-------------------------------------------------------------------------
//  новая функция; взамен GetSizeAttrValue
//  получить размер данных ячейки
//-------------------------------------------------------------------------
int        LIB_FUNC ksGetSizeAttrValue ( reference pAttr,             // указатель атрибута
                                           unsigned int columnNumb,   // номер колонки
                                           int  *count );             // число ячеек (с учетом запмсисей)

// Экспортный номер - 949
//-------------------------------------------------------------------------
//  новая функция; взамен GetSizeAttrValue
//  получить размер данных ячейки (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC ksGetSizeAttrValueW( reference pAttr,           // указатель атрибута
                                         unsigned int columnNumb,   // номер колонки
                                         int  *count );             // число ячеек (с учетом запмсисей)


#ifdef _UNICODE
#define ksGetSizeAttrValueT  ksGetSizeAttrValueW
#else
#define ksGetSizeAttrValueT  ksGetSizeAttrValue
#endif // !UNICODE

// Экспортный номер - 116
//-------------------------------------------------------------------------
//  функция устарела 9.7.97 со временем будет удалена
//  Получить размер данных строки атрибутов.
//-------------------------------------------------------------------------
int        LIB_FUNC GetSizeAttrRow ( reference pAttr );   // указатель атрибута

// Экспортный номер - 178
//-------------------------------------------------------------------------
//  новая функция взамен  GetSizeAttrRow
//  получить размер данных строки атрибутов
//-------------------------------------------------------------------------
int        LIB_FUNC ksGetSizeAttrRow ( reference pAttr,     // указатель атрибута
                                       int * count );       // число ячеек (с учетом запмсисей)

// Экспортный номер - 178
//-------------------------------------------------------------------------
//  новая функция взамен  GetSizeAttrRow
//  получить размер данных строки атрибутов (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC ksGetSizeAttrRowW ( reference pAttr,     // указатель атрибута
                                       int * count );       // число ячеек (с учетом запмсисей)

#ifdef _UNICODE
#define ksGetSizeAttrRowT  ksGetSizeAttrRowW
#else
#define ksGetSizeAttrRowT  ksGetSizeAttrRow
#endif // !UNICODE


// Экспортный номер - 117
//-------------------------------------------------------------------------
//  Выдать информацию о ключах атрибута.
//  Если присылается NULL, соответствующее поле не заполняется.
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrKeysInfo( reference pAttr,    // указатель атрибута
                                     unsigned int *key1, //
                                     unsigned int *key2, // ключи для поиска по ключам
                                     unsigned int *key3, //
                                     unsigned int *key4, //
                                     double *numb );     // номер типа атрибута для поиска по типу

// Экспортный номер - 118
//-------------------------------------------------------------------------
// Получить информацию о столбце атрибута.
// Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrColumnInfo ( reference pAttr,         // указатель атрибута
                                        unsigned int columnNumb, // номер колонки
                                        ColumnInfo *columnInfo );// указатель информационной структуры для одного столбца

// Экспортный номер - 901
//-------------------------------------------------------------------------
// Получить информацию о столбце атрибута.
// Функция возвращает 1 в случае успеха или 0 при неудаче. (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrColumnInfoW ( reference pAttr,         // указатель атрибута
                                         unsigned int columnNumb, // номер колонки
                                         ColumnInfoW *columnInfo );// указатель информационной структуры для одного столбца

#ifdef _UNICODE
#define GetAttrColumnInfoT  GetAttrColumnInfoW
#else
#define GetAttrColumnInfoT  GetAttrColumnInfo
#endif // !UNICODE


// Экспортный номер - 119
//-------------------------------------------------------------------------
// Получить информацию о количестве строк и столбцов атрибута.
// Функция возвращает 1 в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
int        LIB_FUNC GetAttrTabInfo ( reference pAttr,              // указатель атрибута
                                     unsigned int * rowsCount,     // количество строк
                                     unsigned int * columnsCount );// количество  столбцов

// Экспортный номер - 120
//-------------------------------------------------------------------------
//  Выводится диалог для просмотра и редактирования атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//  Диалог привязан к главному окну.
//-------------------------------------------------------------------------
int        LIB_FUNC ViewEditAttr( reference pAttr,   // указатель атрибута
                                  unsigned int type, // 1- просмотр 2- редактирование
                                  char * password ); // пароль атрибута  для просмотра 0

// Экспортный номер - 902
//-------------------------------------------------------------------------
//  Выводится диалог для просмотра и редактирования атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//  Диалог привязан к главному окну. (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC ViewEditAttrW( reference pAttr,   // указатель атрибута
                                   unsigned int type, // 1- просмотр 2- редактирование
                                   LPWSTR password ); // пароль атрибута  для просмотра 0

#ifdef _UNICODE
#define ViewEditAttrT  ViewEditAttrW
#else
#define ViewEditAttrT  ViewEditAttr
#endif // !UNICODE


// Экспортный номер - 121
//-------------------------------------------------------------------------
//  Выводится диалог для просмотра и редактирования типа атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//  Диалог привязан к главному окну.
//-------------------------------------------------------------------------
int        LIB_FUNC ViewEditAttrType( char * libname,     // имя библиотеки типов атрибутов
                                      unsigned int type,  // 1- просмотр 2- редактирование
                                      double attrId,      // уникальный номер типа
                                      char * password );  // пароль типа для просмотра 0

// Экспортный номер - 903
//-------------------------------------------------------------------------
//  Выводится диалог для просмотра и редактирования типа атрибута.
//  Функция возвращает 1 в случае успеха или 0 при неудаче.
//  Диалог привязан к главному окну. (Unicode)
//-------------------------------------------------------------------------
int        LIB_FUNC ViewEditAttrTypeW( LPWSTR libname,     // имя библиотеки типов атрибутов
                                       unsigned int type,  // 1- просмотр 2- редактирование
                                       double attrId,      // уникальный номер типа
                                       LPWSTR password );  // пароль типа для просмотра 0

#ifdef _UNICODE
#define ViewEditAttrTypeT  ViewEditAttrTypeW
#else
#define ViewEditAttrTypeT  ViewEditAttrType
#endif // !UNICODE


// Экспортный номер - 122
//-------------------------------------------------------------------------
// Выводится диалог для просмотра в библиотеке атрибутов списка типов атрибутов
// и  выбора нужного типа.
// Если libname = NULL, типы атрибутов берутся из документа.
// Функция возвращает уникальный номер типа или 0 при неудаче.
// Диалог привязан к главному окну.
//-------------------------------------------------------------------------
double     LIB_FUNC ChoiceAttrTypes ( char * libname );  // имя библиотеки типов атрибутов


// Экспортный номер - 904
//-------------------------------------------------------------------------
// Выводится диалог для просмотра в библиотеке атрибутов списка типов атрибутов
// и  выбора нужного типа.
// Если libname = NULL, типы атрибутов берутся из документа.
// Функция возвращает уникальный номер типа или 0 при неудаче.
// Диалог привязан к главному окну. (Unicode)
//-------------------------------------------------------------------------
double     LIB_FUNC ChoiceAttrTypesW ( LPWSTR libname );  // имя библиотеки типов атрибутов

#ifdef _UNICODE
#define ChoiceAttrTypesT  ChoiceAttrTypesW
#else
#define ChoiceAttrTypesT  ChoiceAttrTypes
#endif // !UNICODE


// Экспортный номер - 123
//-------------------------------------------------------------------------
//  Выводится диалог для просмотра атрибутов объекта и выбора нужного атрибута.
//  Функция возвращает  указатель на атрибут в случае успеха или 0 при неудаче.
//-------------------------------------------------------------------------
reference  LIB_FUNC ChoiceAttr ( reference pObj ); // указатель объекта к которому подключены атрибуты

// Экспортный номер - 243
//-------------------------------------------------------------------------------------
// Функция возвращает указатель на динамический массив LIBRARY_ATTR_TYPE_ARR -
// массив типов атрибутов, находящихся в заданной библиотеке типов.
// В случае неудачи возвращает 0.
//-------------------------------------------------------------------------------------
reference LIB_FUNC ksGetLibraryAttrTypesArray( char * libname );    // полное имя библиотеки типов атрибутов


// Экспортный номер - 905
//-------------------------------------------------------------------------------------
// Функция возвращает указатель на динамический массив LIBRARY_ATTR_TYPE_ARR -
// массив типов атрибутов, находящихся в заданной библиотеке типов.
// В случае неудачи возвращает 0. (Unicode)
//-------------------------------------------------------------------------------------
reference LIB_FUNC ksGetLibraryAttrTypesArrayW( LPWSTR libname );    // полное имя библиотеки типов атрибутов

#ifdef _UNICODE
#define ksGetLibraryAttrTypesArrayT  ksGetLibraryAttrTypesArrayW
#else
#define ksGetLibraryAttrTypesArrayT  ksGetLibraryAttrTypesArray
#endif // !UNICODE

} // extern "C"

#endif // __LT_ATTR_H