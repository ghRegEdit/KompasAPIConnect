////////////////////////////////////////////////////////////////////////////////
//
// Раздел "Графический диалог". LT_GRDLG
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_GRDLG_H
#define __LT_GRDLG_H

#ifndef __LTDEFINE_H
#include "ltdefine.h"
#endif


#ifndef __LIB_FUNC__
#define __LIB_FUNC__
#define LIB_FUNC WINAPI
#endif


extern "C" {

// Экспортный номер - 5
//-----------------------------------------------------------------------------
// Выводится сообщение, соответствующее результату работы библиотеки.
//-----------------------------------------------------------------------------
void    LIB_FUNC  MessageBoxResult();

// Экспортный номер - 7
//-----------------------------------------------------------------------------
// 24.9.97 - функция устарела, предпочтительнее использовать ksChoiceFile
// Выдать диалог и выбрать имя файла для чтения (по расширению).
// Функция возвращает требуемую длину буфера.
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName.
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ChoiceFile( char        *ext,       // расширение файла
                                    char        *filter,    // фильтр поиска (0 - формируется автоматически)
                                    char        *name,      // буфер для имени файла
                                    unsigned int bufLen );  // длина отведенного буфера name в символах


// Экспортный номер - 180
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать имя файла для чтения (по расширению).
// Функция возвращает требуемую длину буфера.
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName.
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ksChoiceFile( char         *ext,       // расширение имени файла
                                      char         *filter,    // фильтр поиска (0 - формируется автоматически)
                                      char         *name,      // буфер для имени файла
                                      unsigned int  bufLen,    // длина отведенного буфера name в символах
                                      unsigned char preview ); // 1-с подключением окна предварительного просмотра, 0-без

// Экспортный номер - 831
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать имя файла для чтения (по расширению).
// Функция возвращает требуемую длину буфера.
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName. (Unicode)
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ksChoiceFileW( LPWSTR        ext,       // расширение имени файла
                                       LPWSTR        filter,    // фильтр поиска (0 - формируется автоматически)
                                       LPWSTR        name,      // буфер для имени файла
                                       unsigned int  bufLen,    // длина отведенного буфера name в символах
                                       unsigned char preview ); // 1-с подключением окна предварительного просмотра, 0-без

#ifdef _UNICODE
#define ksChoiceFileT  ksChoiceFileW
#else
#define ksChoiceFileT  ksChoiceFile
#endif // !UNICODE


// Экспортный номер - 213
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать имя файла для чтения (по расширению).
// Функция возвращает требуемую длину буфера.
// Параметром typeDir назначается стартовая директория (типы определены в ltdefine.h)
// typeDir = sptSYSTEM_FILES 	0  - открывается каталог системных файлов
//           sptLIBS_FILES 		1  - открывается каталог файлов библиотек
//                            иначе открывается текущий каталог
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName.
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ksChoiceFileAppointedDir( char         *ext,      // расширение имени файла
                                                  char         *filter,   // фильтр поиска (0 - формируется автоматически)
                                                  char         *name,     // буфер для имени файла
                                                  unsigned int  bufLen,   // длина отведенного буфера name в символах
                                                  unsigned char preview,  // 1-с подключением окна предварительного просмотра, 0-без
                                                  int           typeDir );

// Экспортный номер - 837
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать имя файла для чтения (по расширению).
// Функция возвращает требуемую длину буфера.
// Параметром typeDir назначается стартовая директория (типы определены в ltdefine.h)
// typeDir = sptSYSTEM_FILES 	0  - открывается каталог системных файлов
//           sptLIBS_FILES 		1  - открывается каталог файлов библиотек
//                            иначе открывается текущий каталог
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName. (Unicode)
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ksChoiceFileAppointedDirW( LPWSTR        ext,      // расширение имени файла
                                                   LPWSTR        filter,   // фильтр поиска (0 - формируется автоматически)
                                                   LPWSTR        name,     // буфер для имени файла
                                                   unsigned int  bufLen,   // длина отведенного буфера name в символах
                                                   unsigned char preview,  // 1-с подключением окна предварительного просмотра, 0-без
                                                   int           typeDir );

#ifdef _UNICODE
#define ksChoiceFileAppointedDirT  ksChoiceFileAppointedDirW
#else
#define ksChoiceFileAppointedDirT  ksChoiceFileAppointedDir
#endif // !UNICODE


// Экспортный номер - 147
//-----------------------------------------------------------------------------
// 24.9.97 - функция устарела, предпочтительнее использовать ksChoiceFiles
// Выдать диалог и выбрать группу файлов для чтения.
//-----------------------------------------------------------------------------
int           LIB_FUNC  ChoiceFiles( char     *ext,    // расширение имени файла
                                     char     *filter, // фильтр поиска (0 - формируется автоматически)
                                     reference p );    // массив неопределенной длины на строки CHAR_STR_ARR или CHAR_STR_ARR_W



// Экспортный номер - 181
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать группу файлов для чтения.
//-----------------------------------------------------------------------------
int           LIB_FUNC  ksChoiceFiles( char         *ext,       // расширение имени файла
                                       char         *filter,    // фильтр поиска (0 - формируется автоматически)
                                       reference     p,         // массив неопределенной длины на строки CHAR_STR_ARR или CHAR_STR_ARR_W
                                       unsigned char preview ); // 1-с подключением окна предварительного просмотра, 0-без


// Экспортный номер - 839
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать группу файлов для чтения. (Unicode)
//-----------------------------------------------------------------------------
int           LIB_FUNC  ksChoiceFilesW( LPWSTR        ext,       // расширение имени файла
                                        LPWSTR        filter,    // фильтр поиска (0 - формируется автоматически)
                                        reference     p,         // массив неопределенной длины на строки CHAR_STR_ARR или CHAR_STR_ARR_W
                                        unsigned char preview ); // 1-с подключением окна предварительного просмотра, 0-без


#ifdef _UNICODE
#define ksChoiceFilesT  ksChoiceFilesW
#else
#define ksChoiceFilesT  ksChoiceFiles
#endif // !UNICODE


// Экспортный номер - 8
//-----------------------------------------------------------------------------
// 24.9.97 - функция устарела, предпочтительнее использовать ksSaveFile
// Выдать диалог и выбрать имя файла для записи.
// Функция возвращает требуемую длину буфера.
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName.
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  SaveFile( char        *ext,       // расширение имени файла
                                  char        *oldName,   // имя файла по умолчанию
                                  char        *filter,    // фильтр поиска (0 - формируется автоматически)
                                  char        *name,      // буфер для имени файла
                                  unsigned int bufLen );  // размер отведенного буфера name


// Экспортный номер - 182
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать имя файла для записи.
// Функция возвращает требуемую длину буфера.
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName.
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ksSaveFile( char         *ext,       // расширение имени файла
                                    char         *oldName,   // имя файла по умолчанию
                                    char         *filter,    // фильтр поиска (0 - формируется автоматически)
                                    char         *name,      // буфер для имени файла
                                    unsigned int  bufLen,    // длина отведенного буфера name в символах
                                    unsigned char preview ); // 1-с подключением окна предварительного просмотра, 0-без

// Экспортный номер - 841
//-----------------------------------------------------------------------------
// Выдать диалог и выбрать имя файла для записи.
// Функция возвращает требуемую длину буфера.
// Если bufLen меньше требуемой длины - name не заполняется.
// В этом случае name можно получить функцией GetRightFileName. (Unicode)
//-----------------------------------------------------------------------------
unsigned  int LIB_FUNC  ksSaveFileW( LPWSTR        ext,       // расширение имени файла
                                     LPWSTR        oldName,   // имя файла по умолчанию
                                     LPWSTR        filter,    // фильтр поиска (0 - формируется автоматически)
                                     LPWSTR        name,      // буфер для имени файла
                                     unsigned int  bufLen,    // длина отведенного буфера name в символах
                                     unsigned char preview ); // 1-с подключением окна предварительного просмотра, 0-без

#ifdef _UNICODE
#define ksSaveFileT  ksSaveFileW
#else
#define ksSaveFileT  ksSaveFile
#endif // !UNICODE


// Экспортный номер - 245
//------------------------------------------------------------------------------
// иницилизировать адрес пользовательской функции просмотра пользовательского файла
// ---
int    LIB_FUNC ksInitFilePreviewFunc( FilePreviewFuncCallBack func );

// Экспортный номер - 842
//------------------------------------------------------------------------------
// иницилизировать адрес пользовательской функции просмотра пользовательского файла
// (Unicode)
// ---
int    LIB_FUNC ksInitFilePreviewFuncW( FilePreviewFuncCallBackW func );

#ifdef _UNICODE
#define ksInitFilePreviewFuncT  ksInitFilePreviewFuncW
#else
#define ksInitFilePreviewFuncT  ksInitFilePreviewFunc
#endif // !UNICODE


// Экспортный номер - 9
//-----------------------------------------------------------------------------
// Выдать сообщение.
//-----------------------------------------------------------------------------
void    LIB_FUNC  Message( LPSTR s ); // s - строка сообщения

// Экспортный номер - 800
//-----------------------------------------------------------------------------
// Выдать сообщение (Unicode).
//-----------------------------------------------------------------------------
void    LIB_FUNC  MessageW( LPWSTR s ); // s - строка сообщения

#ifdef _UNICODE
#define MessageT  MessageW
#else
#define MessageT  Message
#endif // !UNICODE

// Экспортный номер - 10
//-----------------------------------------------------------------------------
// Выдать сообщение об ошибке.
//-----------------------------------------------------------------------------
void    LIB_FUNC  Error( LPSTR s );  // s - строка сообщения об ошибке

// Экспортный номер - 804
//-----------------------------------------------------------------------------
// Выдать сообщение об ошибке (Unicode).
//-----------------------------------------------------------------------------
void    LIB_FUNC  ErrorW( LPWSTR s );  // s - строка сообщения об ошибке

#ifdef _UNICODE
#define ErrorT  ErrorW
#else
#define ErrorT  Error
#endif // !UNICODE

// Экспортный номер - 11
//-----------------------------------------------------------------------------
// Выдать диалог для запроса подтверждения на выполнение какого-то действия.
// Возвращается 1 - Yes; 0 - No; -1 - CANCEL;
//-----------------------------------------------------------------------------
int     LIB_FUNC  YesNo( LPSTR s );  // s - строка сообщения

// Экспортный номер - 806
//-----------------------------------------------------------------------------
// Выдать диалог для запроса подтверждения на выполнение какого-то действия.
// Возвращается 1 - Yes; 0 - No; -1 - CANCEL; (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  YesNoW( LPWSTR s );  // s - строка сообщения

#ifdef _UNICODE
#define YesNoT  YesNoW
#else
#define YesNoT  YesNo
#endif // !UNICODE

// Экспортный номер - 12
//-----------------------------------------------------------------------------
// Отрисовать BMP с идентификатором bmpID в заданном окне(HWindow).
// Возвращается 1 в случае успеха, 0 в случае неудачи.
//-----------------------------------------------------------------------------
int     LIB_FUNC  DrawBitmap( void        *HWindow, // HWND окна
															unsigned int bmpID ); // идентификатор BMP в файле ресурсов приложения

// Экспортный номер - 748
//-----------------------------------------------------------------------------
// [21.7.04]
// Отрисовать BMP расширенная функция
//-----------------------------------------------------------------------------
int     LIB_FUNC ksDrawBitmapEx( void        *HWindow,     // HWND окна
                                 unsigned int bmpID,       // идентификатор BMP в файле ресурсов приложения
                                 HINSTANCE    hInstance ); //NULL - отрисовка в текущей библиотеке, hInstance - в подключаемой 


// Экспортный номер - 302
//-----------------------------------------------------------------------------
// Отрисовать слайд с идентификатором sldID в заданном окне(HWindow).
// Слайд описывается в ресурсном файле библиотеки при помощи объекта RCDATA.
// Возвращается 1 в случае успеха, 0 в случае неудачи.
//-----------------------------------------------------------------------------
int     LIB_FUNC  DrawSlide( void        *HWindow, // HWND окна
                             unsigned int sldID ); // идентификатор слайда в файле ресурсов приложения


// Экспортный номер - 359
//-----------------------------------------------------------------------------
// отрисовать слайд из текстового файла, содержащего блок RCDATA, в заданном
// окне(HWindow).
// Возвращается 1 в случае успеха, 0 в случае неудачи.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ksDrawSlideFromFile( void *HWindow,    // HWND окна
												               char *fileName ); // полное имя файла


// Экспортный номер - 843
//-----------------------------------------------------------------------------
// отрисовать слайд из текстового файла, содержащего блок RCDATA, в заданном
// окне(HWindow).
// Возвращается 1 в случае успеха, 0 в случае неудачи. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  ksDrawSlideFromFileW( void  *HWindow,    // HWND окна
												                LPWSTR fileName ); // полное имя файла

#ifdef _UNICODE
#define ksDrawSlideFromFileT  ksDrawSlideFromFileW
#else
#define ksDrawSlideFromFileT  ksDrawSlideFromFile
#endif // !UNICODE


// Экспортный номер - 453
//-------------------------------------------------------------------------
//  отрисовать слайд расширенная функция
//-------------------------------------------------------------------------
int LIB_FUNC ksDrawSlideEx( void         *HWindow,       //идентификатор окна
                            unsigned int sldID,        //номер слайда в файле ресурсов приложения
                            HINSTANCE    hInstance );    //NULL - отрисовка в текущей библиотеке, hInstance - в подключаемой 

// Экспортный номер - 303
//-----------------------------------------------------------------------------
// Записать группу селектирования в формате слайда в текстовый файл с именем
// fileName. Документ должен быть открыт с отображением на экране.
// Возвращается 1 в случае успеха, 0 в случае неудачи.
//-----------------------------------------------------------------------------
int     LIB_FUNC  WriteSlide( char *filename,        // имя файла для записи
                              unsigned int iD,       // идентификатор слайда
                              double x, double y  ); // точка привязки слайда на чертеже

// Экспортный номер - 844
//-----------------------------------------------------------------------------
// Записать группу селектирования в формате слайда в текстовый файл с именем
// fileName. Документ должен быть открыт с отображением на экране.
// Возвращается 1 в случае успеха, 0 в случае неудачи. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  WriteSlideW( LPWSTR filename,        // имя файла для записи
                               unsigned int iD,       // идентификатор слайда
                               double x, double y  ); // точка привязки слайда на чертеже

#ifdef _UNICODE
#define WriteSlideT  WriteSlideW
#else
#define WriteSlideT  WriteSlide
#endif // !UNICODE


// Экспортный номер - 343
//-----------------------------------------------------------------------------
// Назначить цвет фона по умолчанию для отрисовки слайда.
//-----------------------------------------------------------------------------
void    LIB_FUNC  ksSlideBackground( COLORREF color );


// Экспортный номер - 13
//-----------------------------------------------------------------------------
// Запросить ввод вещественного числа с контролем попадания значения в
// заданный интервал.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadDouble( char   *mess,            // строка приглашения
                              double  defValue,        // значение по умолчанию
															double  min, double max, // интервал, в котором должно находиться значение
															double *value );         // возвращаемое значение

// Экспортный номер - 845
//-----------------------------------------------------------------------------
// Запросить ввод вещественного числа с контролем попадания значения в
// заданный интервал. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadDoubleW( LPWSTR  mess,            // строка приглашения
                               double  defValue,        // значение по умолчанию
															 double  min, double max, // интервал, в котором должно находиться значение
															 double *value );         // возвращаемое значение

#ifdef _UNICODE
#define ReadDoubleT  ReadDoubleW
#else
#define ReadDoubleT  ReadDouble
#endif // !UNICODE


// Экспортный номер - 14
//-----------------------------------------------------------------------------
// Запросить ввод целого числа с контролем попадания значения в заданный интервал.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadInt( char *mess,         // строка приглашения
													 int   defValue,     // значение по умолчанию
													 int   min, int max, // интервал, в котором должно находиться значение
													 int  *value );      // возвращаемое значение


// Экспортный номер - 846
//-----------------------------------------------------------------------------
// Запросить ввод целого числа с контролем попадания значения в заданный интервал.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadIntW( LPWSTR mess,         // строка приглашения
													  int    defValue,     // значение по умолчанию
													  int    min, int max, // интервал, в котором должно находиться значение
													  int   *value );      // возвращаемое значение


#ifdef _UNICODE
#define ReadIntT  ReadIntW
#else
#define ReadIntT  ReadInt
#endif // !UNICODE


// Экспортный номер - 15
//-----------------------------------------------------------------------------
// Ввод строки заданной длины.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadString( char *smess,   // строка приглашения
									 					  char *str,     // возвращаемая строка
															int   maxlen); // допустимая длина строки


// Экспортный номер - 847
//-----------------------------------------------------------------------------
// Ввод строки заданной длины. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadStringW( LPWSTR smess,   // строка приглашения
									 					   LPWSTR str,     // возвращаемая строка
															 int    maxlen); // допустимая длина строки


#ifdef _UNICODE
#define ReadStringT  ReadStringW
#else
#define ReadStringT  ReadString
#endif // !UNICODE


// Экспортный номер - 16
//-----------------------------------------------------------------------------
// Запросить ввод длинного целого числа с контролем попадания значения в
// заданный интервал.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadLong( char *mess,          // строка приглашения
                            long  defValue,      // значение по умолчанию
														long  min, long max, // интервал, в котором должно находиться значение
														long *value );       // возвращаемое значение


// Экспортный номер - 848
//-----------------------------------------------------------------------------
// Запросить ввод длинного целого числа с контролем попадания значения в
// заданный интервал. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReadLongW( LPWSTR mess,          // строка приглашения
                             long   defValue,      // значение по умолчанию
														 long   min, long max, // интервал, в котором должно находиться значение
														 long  *value );       // возвращаемое значение

#ifdef _UNICODE
#define ReadLongT  ReadLongW
#else
#define ReadLongT  ReadLong
#endif // !UNICODE


// Экспортный номер - 231
//------------------------------------------------------------------------------
// Выбрать из диалога плотность. Плотность выбирается из системного файла
// плотностей graphic.dsn.
// Функция возвращает плотность в г/см3 или 0 в случае неудачи
// ---
double LIB_FUNC ksViewGetDensity( void *HWindow ); // HWND окна родителя или NULL

// Экспортный номер - 272
//------------------------------------------------------------------------------
// Вывод диалога для задания формата листа.
// docPar - параметры чертежа.
// ---
int LIB_FUNC ksSheetSetupDlg( DocumentParam* docPar, void *HWindow );

// Экспортный номер - 849
//------------------------------------------------------------------------------
// Вывод диалога для задания формата листа.
// docPar - параметры чертежа. (Unicode)
// ---
int LIB_FUNC ksSheetSetupDlgW( DocumentParamW* docPar, void *HWindow );

#ifdef _UNICODE
#define ksSheetSetupDlgT  ksSheetSetupDlgW
#else
#define ksSheetSetupDlgT  ksSheetSetupDlg
#endif // !UNICODE


// Экспортный номер - 273
//------------------------------------------------------------------------------
// Проверка на получение и получение материала и его плотности из справочника материалов
// -1 справочник материалов не подключился
// 0  выход из диалога справочника материалов по отмене
// 1  удачное завершение
// ---
//      material - строку буфер в которую будет помещео обозначение выбранного материала
//      sizeStr  - размер строки material
//      plt      - плотность выбранного материала
//      kod_size - четыре элемента
//        kod_size[0] - код вида типоразмера. Сейчас определены: 1-толщина, 2-диаметр, 0-вид не определен.
//        kod_size[1] - значение размера вида толщина, диаметр, диаметр вписанной окружности, значение а типоразмеров вида ахв или ахвхс
//        kod_size[2] - значение в типоразмеров вида ахв или ахвхс
//        kod_size[3] - значение с типоразмеров вида ахвхс
//      kod_tip - строка кодов типов сортаментов для отображения (через запятую),
//       '0' - отображается все.
//      Коды типов сортаментов
//      ----------------+-----------------+------------+---------------+-------------------+-------------------------
//       Черные металлы | Цветные металлы | Пластмассы | Резины и кожи | Стекло и минералы | Материалы разные
//      ----------------+-----------------+------------+---------------+-------------------+-------------------------
//       1- Фасонный    | 8 - Прутки      | 17- Пленки | 24- Листы     | 27- Листы         | 30- Пиломатериалы
//       2- Листовой    | 9 - Трубы       | 18- Трубы  | 25- Трубки    | 28- Трубки        | 31- Бумаги
//       3- Ленты       | 10 - Проволока  | 19- Плиты  | 26- Прутки    | 29- Прутки        | 32- Стройматериалы
//       4- Проволока   | 11 - Листы      | 20- Ленты  |               |                   | 33- Текстиль
//       5- Профильн.   | 12 - Плиты      | 21- Листы  |               |                   |
//       6- Трубы       | 13 - Ленты      | 22- Трубки |               |                   |
//       7- Сетки       | 14 - Фольги     | 23- Прутки |               |                   |
//                      | 15 - Профили    |            |               |                   |
//                      | 16 - Сетки      |            |               |                   |
//      ----------------+-----------------+------------+---------------+-------------------+-------------------------
int LIB_FUNC ksMaterialDlg( void *HWindow, char * material, int sizeStr, double* plt, double* kod_size, char *kod_tip );


// Экспортный номер - 274
//------------------------------------------------------------------------------
// Получение предопределенного текста из файла *.pdt
// все строки складываются в одну строку str с перевом строки "\n"
// ---
int LIB_FUNC ksExecDialPredefinedText( void *HWindow, char * str, int sizeStr );


// Экспортный номер - 851
//------------------------------------------------------------------------------
// Получение предопределенного текста из файла *.pdt
// все строки складываются в одну строку str с перевом строки "\n" (Unicode)
// ---
int LIB_FUNC ksExecDialPredefinedTextW( void *HWindow, LPWSTR str, int sizeStr );

#ifdef _UNICODE
#define ksExecDialPredefinedTextT  ksExecDialPredefinedTextW
#else
#define ksExecDialPredefinedTextT  ksExecDialPredefinedText
#endif // !UNICODE


// Экспортный номер - 720
//------------------------------------------------------------------------------
// Получение предопределенного текста из файла *.pdt
// Возвращает динамический массив строк текста TEXT_LINE_ARR или 0 в случае неудачи
// ---
reference LIB_FUNC ksExecDialPredefinedTextEx( void *HWindow );

// Экспортный номер - 284
//--------------------------------------------------------------------------
// Выбрать из диалога плотность и наименование материала. Плотность выбирается из системного файла
// плотностей graphic.dsn.
// Функция возвращает плотность в г/см3 и наименование материала или 0 в случае неудачи
// material - наименование материала
// sizeStr  - размер строки material
// HWindow  - HWND окна
//--------------------------------------------------------------------------
double LIB_FUNC ksViewGetDensityAndMaterial( char * material, int sizeStr, void *HWindow );

// Экспортный номер - 852
//--------------------------------------------------------------------------
// Выбрать из диалога плотность и наименование материала. Плотность выбирается из системного файла
// плотностей graphic.dsn.
// Функция возвращает плотность в г/см3 и наименование материала или 0 в случае неудачи
// material - наименование материала
// sizeStr  - размер строки material
// HWindow  - HWND окна (Unicode)
//--------------------------------------------------------------------------
double LIB_FUNC ksViewGetDensityAndMaterialW( LPWSTR material, int sizeStr, void *HWindow );

#ifdef _UNICODE
#define ksViewGetDensityAndMaterialT  ksViewGetDensityAndMaterialW
#else
#define ksViewGetDensityAndMaterialT  ksViewGetDensityAndMaterial
#endif // !UNICODE

// Экспортный номер - 286
//------------------------------------------------------------------------------
// вызвать диалог по редактированию текста
// ---
int LIB_FUNC ksEditTextLine( void *HWindow, char *str, int sizeStr );

// Экспортный номер - 853
//------------------------------------------------------------------------------
// вызвать диалог по редактированию текста (Unicode)
// ---
int LIB_FUNC ksEditTextLineW( void *HWindow, LPWSTR str, int sizeStr );

#ifdef _UNICODE
#define ksEditTextLineT  ksEditTextLineW
#else
#define ksEditTextLineT  ksEditTextLine
#endif // !UNICODE

// Экспортный номер - 781
// [01/11/2006] 
//------------------------------------------------------------------------------
//  Запустить индикатор процесса
//  minVal - минимальное значение шкалы
//  maxVal - максимальное значение шкалы
//  newText- текст в строке состояния
//  resetText = 1 - обновить текст в строке состояния/ 0 - не обновлять
// ---
void LIB_FUNC ksStartProgressBar( long minVal, long maxVal, char * newText, int resetText );


// Экспортный номер - 854
// [04/07/2007] 
//------------------------------------------------------------------------------
//  Запустить индикатор процесса
//  minVal - минимальное значение шкалы
//  maxVal - максимальное значение шкалы
//  newText- текст в строке состояния
//  resetText = 1 - обновить текст в строке состояния/ 0 - не обновлять
//  (Unicode)
// ---
void LIB_FUNC ksStartProgressBarW( long minVal, long maxVal, LPWSTR newText, int resetText );

#ifdef _UNICODE
#define ksStartProgressBarT  ksStartProgressBarW
#else
#define ksStartProgressBarT  ksStartProgressBar
#endif // !UNICODE


// Экспортный номер - 782
// [01/11/2006] 
//------------------------------------------------------------------------------
// Установить текущее значение индикатора
//  currentVal - текущее значение значение индикатора
//  newText- текст в строке состояния
//  resetText = 1 - обновить текст в строке состояния/ 0 - не обновлять
// ---
void LIB_FUNC ksSetProgressBar( long currentVal, char * newText, int resetText );


// Экспортный номер - 855
// [04/07/2007] 
//------------------------------------------------------------------------------
// Установить текущее значение индикатора
//  currentVal - текущее значение значение индикатора
//  newText- текст в строке состояния
//  resetText = 1 - обновить текст в строке состояния/ 0 - не обновлять
// ---
void LIB_FUNC ksSetProgressBarW( long currentVal, LPWSTR newText, int resetText );

#ifdef _UNICODE
#define ksSetProgressBarT  ksSetProgressBarW
#else
#define ksSetProgressBarT  ksSetProgressBar
#endif // !UNICODE


// Экспортный номер - 783
// [01/11/2006] 
//------------------------------------------------------------------------------
//  Установить текст в строке состояния индикатора
//  newText- текст в строке состояния
// ---
void LIB_FUNC ksSetProgressText( char * newText );


// Экспортный номер - 856
// [04/07/2007] 
//------------------------------------------------------------------------------
//  Установить текст в строке состояния индикатора
//  newText- текст в строке состояния (Unicode)
// ---
void LIB_FUNC ksSetProgressTextW( LPWSTR newText );

#ifdef _UNICODE
#define ksSetProgressTextT  ksSetProgressTextW
#else
#define ksSetProgressTextT  ksSetProgressText
#endif // !UNICODE


// Экспортный номер - 784
// [01/11/2006] 
//------------------------------------------------------------------------------
//  Остановить индикатор процесса
//  newText- текст в строке состояния
//  resetText = 1 - обновить текст в строке состояния/ 0 - не обновлять
// ---
void LIB_FUNC ksStopProgressBar( char * newText, int resetTxt );


// Экспортный номер - 857
// [04/07/2007] 
//------------------------------------------------------------------------------
//  Остановить индикатор процесса
//  newText- текст в строке состояния
//  resetText = 1 - обновить текст в строке состояния/ 0 - не обновлять
//  (Unicode)
// ---
void LIB_FUNC ksStopProgressBarW( LPWSTR newText, int resetTxt );

#ifdef _UNICODE
#define ksStopProgressBarT  ksStopProgressBarW
#else
#define ksStopProgressBarT  ksStopProgressBar
#endif // !UNICODE

// Экспортный номер - 996
// [22/05/2009] 
//------------------------------------------------------------------------------
// Вызов диалога "Вставка спецзнака"
// ---
int LIB_FUNC ksExecDialSpecialSymbol( void * HWindow );

// Экспортный номер - 996
// [25/05/2009] 
//------------------------------------------------------------------------------
//  Вызов диалога "Вставка символа"
// ---
int LIB_FUNC ksExecDialSymbol( void *HWindow, int * symb, LPSTR font, unsigned int len );


// Экспортный номер - 998
// [25/05/2009] 
//------------------------------------------------------------------------------
//  Вызов диалога "Вставка символа"
//  (Unicode)
// ---
int LIB_FUNC ksExecDialSymbolW( void *HWindow, int * symb, LPWSTR font, unsigned int len );

#ifdef _UNICODE
#define ksExecDialSymbolT  ksExecDialSymbolW
#else
#define ksExecDialSymbolT  ksExecDialSymbol
#endif // !UNICODE


// Экспортный номер - 1000
// [07.08.2009]
//------------------------------------------------------------------------------
//  Вызов диалога "Выберите стиль линии"
// ---
int LIB_FUNC ksExecDialLineStyleSelect( void *HWindow, LPCTSTR caption, int style );

} // extern "C"

#endif // __LT_GRDLG_H
