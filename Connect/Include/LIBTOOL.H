///////////////////////////////////////////////////////////////////////////////
//
// LIBTOOL.H  
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LIBTOOL_H
#define __LIBTOOL_H

#ifndef __LTDEFINE_H
#include "ltdefine.h"
#endif


interface IObject2DNotifyResult;

#define LIB_FUNC WINAPI
////////////////////////////////////////////////////////////////////////////////
//
// Раздел "Графический диалог". LT_GRDLG
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_GRDLG_H
#include "LT_GrDlg.h"
#endif

////////////////////////////////////////////////////////////////////////////////
//
// Раздел "Редактирование модели" LT_Edit.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_EDIT_H
#include "LT_Edit.h"
#endif

////////////////////////////////////////////////////////////////////////////////
//
// Раздел "Модельные объекты". LT_MODEL.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_MODEL_H
#include "LT_Model.h"
#endif

////////////////////////////////////////////////////////////////////////////////
//
// Математика LT_Math.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_MATH_H
#include "LT_Math.h"
#endif

////////////////////////////////////////////////////////////////////////////////
//
// Работа с атрибутами. LT_Attr.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_ATTR_H
#include "LT_Attr.h"
#endif

////////////////////////////////////////////////////////////////////////////////
//
// Работа со спецификацией LT_Spc.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_SPC_H
#include "LT_Spc.h"
#endif


extern "C" {

// ----------------------------------------------------------------------------
// Экспортный номер - 2 
//-----------------------------------------------------------------------------
// Возвращается результат работы библиотеки.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ReturnResult();


// Экспортный номер - 3
//-----------------------------------------------------------------------------
// Обнулить результат работы библиотеки, если ошибка не фатальная.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ResultNULL();


// Экспортный номер - 4
//-----------------------------------------------------------------------------
// Возвращается строка сообщения, соответствующая результату работы библиотеки.
//-----------------------------------------------------------------------------
void    LIB_FUNC  StrResult( LPSTR str,     // строка сообщения
                             int   limit ); // длина строки str


// Экспортный номер - 791
//-----------------------------------------------------------------------------
// Возвращается строка сообщения, соответствующая результату работы библиотеки.
// (Unicode)
//-----------------------------------------------------------------------------
void    LIB_FUNC  StrResultW( LPWSTR str,     // строка сообщения
                              int    limit ); // длина строки str

#ifdef _UNICODE
#define StrResultT  StrResultW
#else
#define StrResultT  StrResult
#endif // !_UNICODE



// Экспортный номер - 6
//-----------------------------------------------------------------------------
// Возвращается дескриптор главного окна (HWND).
//-----------------------------------------------------------------------------
void  * LIB_FUNC  GetHWindow();

//-----------------------------------------------------------------------------
// Возвращается дескриптор (HWND) скрытого окна которое нужно передавать как Parent в 
// библиотеках сделанных в Borland С++ 5.
//-----------------------------------------------------------------------------
void  * LIB_FUNC  GetParentHWindow();

// Экспортный номер - 386
//------------------------------------------------------------------------------
// Получить цвет фона рабочего окна
// ---
unsigned long LIB_FUNC ksGetWorkWindowColor();

// Экспортный номер - 124
//-----------------------------------------------------------------------------
// Функция работает только в OWL. Возвращает указатель на TValidator.
//-----------------------------------------------------------------------------
void  * LIB_FUNC  GetValidator( void *min, void *max, // границы интервала
                                unsigned char type ); // 1-char 2-int 3-long 4-float 5-double


// Экспортный номер - 142
//-----------------------------------------------------------------------------
// Разрешить или запретить доступ к задаче со стороны пользователя.
//-----------------------------------------------------------------------------
void    LIB_FUNC  EnableTaskAccess( int enable ); // 0-запретить, 1-разрешить

// Экспортный номер - 142
//-----------------------------------------------------------------------------
// Функция сообщает разрешен( 1 ) или запрещен( 0 ) доступ к задаче со стороны пользователя.
//-----------------------------------------------------------------------------
int LIB_FUNC IsEnableTaskAccess();

// Экспортный номер - 238
//-----------------------------------------------------------------------------
// Обработать все сообщения, имеющиеся в очереди сообщений задачи.
//-----------------------------------------------------------------------------
void    LIB_FUNC  PumpWaitingMessages();

// Экспортный номер - 260
//------------------------------------------------------------------------------
//  Установить критический процесс
//  До завершения Cursor, Placement или конца библиотечной команды
//  системе не разрешается принудительно завершать работу библиотеки
// ---
int  LIB_FUNC ksSetCriticalProcess();

// Экспортный номер - 141
//-----------------------------------------------------------------------------
// Запрос к системе на создание окна с деревом команд.
// В качестве функции обратной связи передается указатель на функцию типа
// CommandWindowCallBack.
// Если в качестве функции обратной связи задан NULL, то управление из
// CommandWindow возвращается немедленно, как только пользователь выберет команду
// в дереве команд. При этом возвращается идентификатор выбранной команды.
// В противном случае управление вернется, если пользователь закроет окно
// или функция обратной связи вернет FALSE. При этом возвращается -1.
// Если в качестве commands задана строка в формате Компас 4.X,
// например "!Команда_1 !Команда_2 ..."
// то идентификатором команды является ее позиция в строке (начиная с 1),
// т.е. идентификатором команды "Команда_1" является 1.
// Если в качестве commands задан идентификатор меню, то идентификатором команды
// является идентификатор соответствующего пункта меню.
//-----------------------------------------------------------------------------
int     LIB_FUNC  CommandWindow( RequestInfo *info ); // информация для запроса

// Экспортный номер - 906
//-----------------------------------------------------------------------------
// Запрос к системе на создание окна с деревом команд.
// В качестве функции обратной связи передается указатель на функцию типа
// CommandWindowCallBackW.
// Если в качестве функции обратной связи задан NULL, то управление из
// CommandWindowW возвращается немедленно, как только пользователь выберет команду
// в дереве команд. При этом возвращается идентификатор выбранной команды.
// В противном случае управление вернется, если пользователь закроет окно
// или функция обратной связи вернет FALSE. При этом возвращается -1.
// Если в качестве commands задана строка в формате Компас 4.X,
// например "!Команда_1 !Команда_2 ..."
// то идентификатором команды является ее позиция в строке (начиная с 1),
// т.е. идентификатором команды "Команда_1" является 1.
// Если в качестве commands задан идентификатор меню, то идентификатором команды
// является идентификатор соответствующего пункта меню. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  CommandWindowW( RequestInfoW *info ); // информация для запроса

#ifdef _UNICODE
#define CommandWindowT  CommandWindowW
#else
#define CommandWindowT  CommandWindow
#endif // !UNICODE


// Экспортный номер - 17
//-----------------------------------------------------------------------------
// Запрос к системе на получение точки.
// В качестве функции обратной связи передается указатель
// на функцию типа CursorCallBack.
//-----------------------------------------------------------------------------
int     LIB_FUNC  Cursor( RequestInfo *info,      // информация для запроса
												  double *x ,double *y,   // возвращаемые координаты точки
													void        *phantom ); // указатель на структуру фантома


// Экспортный номер - 744
//-----------------------------------------------------------------------------
// [11/6/2004]
// Запрос к системе на получение точки.
// В качестве функции обратной связи передается указатель
// на функцию типа CursorCallBack.
//-----------------------------------------------------------------------------
int     LIB_FUNC  CursorEx( RequestInfo *info,      // информация для запроса
												    double *x ,double *y,   // возвращаемые координаты точки
													  void   *phantom,        // указатель на структуру фантома
                            LPUNKNOWN processParam ); // параметры процесса
                            

// Экспортный номер - 908
//-----------------------------------------------------------------------------
// [05/07/2007]
// Запрос к системе на получение точки.
// В качестве функции обратной связи передается указатель
// на функцию типа CursorCallBackW. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  CursorExW( RequestInfoW *info,      // информация для запроса
												     double *x ,double *y,   // возвращаемые координаты точки
													   void   *phantom,        // указатель на структуру фантома
                             LPUNKNOWN processParam ); // параметры процесса
 
#ifdef _UNICODE
#define CursorExT  CursorExW
#else
#define CursorExT  CursorEx
#endif // !UNICODE


// Экспортный номер - 18
//------------------------------------------------------------------------------
// Запрос к системе на получение точки и угла.
// В качестве функции обратной связи передается указатель
// на функцию типа PlacementCallBack.
//------------------------------------------------------------------------------
int     LIB_FUNC  Placement( RequestInfo *info,      // информация для запроса
														 double *x, double *y,   // возвращаемые координаты точки
														 double      *angle,     // возвращаемое значение угла
														 void        *phantom ); // указатель на структуру фантома



// Экспортный номер - 745
//------------------------------------------------------------------------------
// [11/6/2004]
// Запрос к системе на получение точки и угла.
// В качестве функции обратной связи передается указатель
// на функцию типа PlacementCallBack.
//------------------------------------------------------------------------------
int LIB_FUNC PlacementEx( RequestInfo *info,         // информация для запроса         
                          double *x, double *y,      // возвращаемые координаты точки  
                          double *angl,              // возвращаемое значение угла     
                          void * phantom ,           // указатель на структуру фантома 
                          LPUNKNOWN processParam );  // параметры процесса) {     


// Экспортный номер - 910
//------------------------------------------------------------------------------
// [05/07/2007]
// Запрос к системе на получение точки и угла.
// В качестве функции обратной связи передается указатель
// на функцию типа PlacementCallBackW. (Unicode)
//------------------------------------------------------------------------------
int LIB_FUNC PlacementExW( RequestInfoW *info,         // информация для запроса         
                           double *x, double *y,      // возвращаемые координаты точки  
                           double *angl,              // возвращаемое значение угла     
                           void * phantom ,           // указатель на структуру фантома 
                           LPUNKNOWN processParam );  // параметры процесса) {     

#ifdef _UNICODE
#define PlacementExT  PlacementExW
#else
#define PlacementExT  PlacementEx
#endif // !UNICODE


// Экспортный номер - 165
//-----------------------------------------------------------------------------
// Во время работы Cursor и Placement может возникнуть необходимость изменить фантом
// или компоненты команд. Функция позволяет передать изменения в цикл Cursor и
// Placement. Это может понадобиться для отработки команд пользовательских
// инструментальных панелей.
// Предварительно нужно убедиться что вызов Cursor и требование к Cursor передаются в
// одном документе.
// Если какой-либо параметр 0 - не обрабатывается,
// если оба параметра 0 - прервать процесс Cursor и Placement. Аналогично нажатию Esc.
// После завершения функции, вызвавшей останов процесса, управление будет передано в
// Cursor или Placement, а затем в функцию пользователя, которая вызывала
// Cursor или Placement.
//-----------------------------------------------------------------------------
int     LIB_FUNC  ksChangeObjectInLibRequest( RequestInfo *info,     // указатель на область памяти для замены состава команд
                                              void        *phantom); // указатель на фантомную группу


// Экспортный номер - 911
//-----------------------------------------------------------------------------
// Во время работы CursorExW и PlacementExW может возникнуть необходимость изменить фантом
// или компоненты команд. Функция позволяет передать изменения в цикл CursorExW и
// PlacementExW. Это может понадобиться для отработки команд пользовательских
// инструментальных панелей.
// Предварительно нужно убедиться что вызов CursorExW и требование к CursorExW передаются в
// одном документе.
// Если какой-либо параметр 0 - не обрабатывается,
// если оба параметра 0 - прервать процесс CursorExW и PlacementExW. Аналогично нажатию Esc.
// После завершения функции, вызвавшей останов процесса, управление будет передано в
// CursorExW или PlacementExW, а затем в функцию пользователя, которая вызывала
// CursorExW или PlacementExW. (Unicode)
//-----------------------------------------------------------------------------
int     LIB_FUNC  ksChangeObjectInLibRequestW( RequestInfoW *info,     // указатель на область памяти для замены состава команд
                                               void        *phantom); // указатель на фантомную группу

#ifdef _UNICODE
#define ksChangeObjectInLibRequestT  ksChangeObjectInLibRequestW
#else
#define ksChangeObjectInLibRequestT  ksChangeObjectInLibRequest
#endif // !UNICODE


// Экспортный номер - 166
//-----------------------------------------------------------------------------
// Поверка: является ли текущий документ тем, в котором запустили процесс
// (Cursor или Placement).
// Возвращает 1 в случае совпадения, 0 - нет.
//-----------------------------------------------------------------------------
int LIB_FUNC  ksIsCursorOrPlacementDocument( );

// Экспортный номер - 387
// Проверить запущен ли в текущем графическом документе построительный процесс.
// В случае ошибки функция возвращает -1, если процесс не запущен, возвращается 0,
// в противном случае возвращается 1.
// ---
int LIB_FUNC ksIsActiveProcessRunnig ();


// Экспортный номер - 171
//-----------------------------------------------------------------------------
// Погасить(show=0) или включить(show=1) фантом
//-----------------------------------------------------------------------------
int LIB_FUNC  ksPhantomShowHide( unsigned char show );

// Экспортный номер - 244
//--------------------------------------------------------------------------
// Вернуть координаты курсора
// функция возвращает 1 - если успешное завершение,
// 0 -если ошибка или курсор не на поле чертежа.
//--------------------------------------------------------------------------
int LIB_FUNC ksGetCursorPosition( double *x,     // координаты курсора в миллиметрах,
                                  double *y,
                                  int     type );// type - признак какие координаты возвращать:
                                                 // 0 - без учета привязок 1 - с учетом привязок,

// Экспортный номер - 19
//------------------------------------------------------------------------------
// Выход под управление системы.
// Возвращаемый результат (см. LtDefine.h):
// scsSTOPPED_FOR_MENU_COMMAND      ( 1) Выполнена команда меню "Остановить работу библиотеки".
// scsSTOPPED_FOR_SYSTEM_STOP       ( 0) Идет закрытие задачи.
// scsSTOPPED_FOR_ITSELF            (-1) Вызов функции SystemControlStop из-под библиотеки.
// scsSTOPPED_FOR_START_THIS_LIB    (-2) Принудительный останов при запуске той же библиотеки.
// scsSTOPPED_FOR_START_ANOTHER_LIB (-3) Принудительный останов при запуске другой библиотеки.
//------------------------------------------------------------------------------
int LIB_FUNC  SystemControlStart( char *menuCommand ); // указатель на строку,
                                                       // помещаемую в меню для
                                                       // возврата в библиотеку

// Экспортный номер - 912
//------------------------------------------------------------------------------
// Выход под управление системы.
// Возвращаемый результат (см. LtDefine.h):
// scsSTOPPED_FOR_MENU_COMMAND      ( 1) Выполнена команда меню "Остановить работу библиотеки".
// scsSTOPPED_FOR_SYSTEM_STOP       ( 0) Идет закрытие задачи.
// scsSTOPPED_FOR_ITSELF            (-1) Вызов функции SystemControlStop из-под библиотеки.
// scsSTOPPED_FOR_START_THIS_LIB    (-2) Принудительный останов при запуске той же библиотеки.
// scsSTOPPED_FOR_START_ANOTHER_LIB (-3) Принудительный останов при запуске другой библиотеки.
// (Unicode)
//------------------------------------------------------------------------------
int LIB_FUNC  SystemControlStartW( LPWSTR menuCommand ); // указатель на строку,
                                                       // помещаемую в меню для
                                                       // возврата в библиотеку

#ifdef _UNICODE
#define SystemControlStartT  SystemControlStartW
#else
#define SystemControlStartT  SystemControlStart
#endif // !UNICODE


// Экспортный номер - 20
//-----------------------------------------------------------------------------
// Вернуть управление в библиотеку.
//-----------------------------------------------------------------------------
void    LIB_FUNC  SystemControlStop();


// Экспортный номер - 753
//-----------------------------------------------------------------------------
// 28.12.04
// Проверить запущен SystemControlStart или нет
//                                  ( 0) - процесс не запущен
// scsSTOPPED_FOR_ITSELF            (-1) - уже вызван SystemControlStop, но цикл еще не завершон
// scsSTOPPED_FOR_START_THIS_LIB    (-2) - запрос из библиотеки, из которй вызвали SystemControlStart
// scsSTOPPED_FOR_START_THIS_LIB    (-3) - запрос из другой библиотеки, 
//                                  (-4) - ошибка
// ---
int  LIB_FUNC ksGetSystemControlStartResult();

// Экспортный номер - 21
// ----------------------------------------------------------------------------
// Функция не поддерживается
// ----------------------------------------------------------------------------
int     LIB_FUNC  KeepReference( reference r ); // указатель на графический объект


// Экспортный номер - 125
//-----------------------------------------------------------------------------
// Проверить имя файла и, если не полное имя, добавить к нему текущий директорий.
// Возвращает требуемую длину буфера для нового имени.
// Если bufLen меньше требуемой длины - newName не формируется.
//-----------------------------------------------------------------------------
unsigned int  LIB_FUNC  FullFileName( LPSTR oldName,   // старое имя файла
                                      LPSTR newName,   // буфер для полного имени файла
                                      unsigned int bufLen ); // длина отведенного буфера newName


// Экспортный номер - 803
//-----------------------------------------------------------------------------
// Проверить имя файла и, если не полное имя, добавить к нему текущий директорий.
// Возвращает требуемую длину буфера для нового имени.
// Если bufLen меньше требуемой длины - newName не формируется. (Unicode)
//-----------------------------------------------------------------------------
unsigned int  LIB_FUNC  FullFileNameW( LPWSTR oldName,   // старое имя файла
                                       LPWSTR  newName,   // буфер для полного имени файла
                                       unsigned int bufLen ); // длина отведенного буфера newName

#ifdef _UNICODE
#define FullFileNameT  FullFileNameW
#else
#define FullFileNameT  FullFileName
#endif // !UNICODE


// Экспортный номер - 128
//-----------------------------------------------------------------------------
// Формируется и регистрируется в системе уникальное имя служебного файла.
//-----------------------------------------------------------------------------
unsigned int  LIB_FUNC  UniqueFileName( char        *buff,      // буфер для имени служебного файла
                                        unsigned int bufSize ); // размер буфера buff


// Экспортный номер - 913
//-----------------------------------------------------------------------------
// Формируется и регистрируется в системе уникальное имя служебного файла. (Unicode)
//-----------------------------------------------------------------------------
unsigned int  LIB_FUNC  UniqueFileNameW( LPWSTR       buff,      // буфер для имени служебного файла
                                         unsigned int bufSize ); // размер буфера buff

#ifdef _UNICODE
#define UniqueFileNameT  UniqueFileNameW
#else
#define UniqueFileNameT  UniqueFileName
#endif // !UNICODE


// Экспортный номер - 129
//-----------------------------------------------------------------------------
// Удаляется служебный файл.
//-----------------------------------------------------------------------------
void LIB_FUNC RemoveUniqueFile( char *fileName );


// Экспортный номер - 914
//-----------------------------------------------------------------------------
// Удаляется служебный файл. (Unicode)
//-----------------------------------------------------------------------------
void LIB_FUNC RemoveUniqueFileW( LPWSTR fileName );


#ifdef _UNICODE
#define RemoveUniqueFileT  RemoveUniqueFileW
#else
#define RemoveUniqueFileT  RemoveUniqueFile
#endif // !UNICODE


// Экспортный номер - 134
//-----------------------------------------------------------------------------
unsigned int  LIB_FUNC  GetRightFileName( char        *fileName,  // буфер для имени файла
                                          unsigned int bufSize ); // размер отведенного буфера fileName

// Экспортный номер - 915
//-----------------------------------------------------------------------------
unsigned int  LIB_FUNC  GetRightFileNameW( LPWSTR       fileName,  // буфер для имени файла
                                           unsigned int bufSize ); // размер отведенного буфера fileName

#ifdef _UNICODE
#define GetRightFileNameT  GetRightFileNameW
#else
#define GetRightFileNameT  GetRightFileName
#endif // !UNICODE


// Экспортный номер - 163
//---------------------------------------------------------------------------
// Получить длину  текста в миллиметрах
// функция может принимать строку в синтаксисе 4 версии
//---------------------------------------------------------------------------
double  LIB_FUNC GetTextLength( char * text,            //строка текста
                                unsigned short style ); //стиль текста, style ==0 для стиля по умолчанию

// Экспортный номер - 916
//---------------------------------------------------------------------------
// Получить длину  текста в миллиметрах
// функция может принимать строку в синтаксисе 4 версии (Unicode)
//---------------------------------------------------------------------------
double  LIB_FUNC GetTextLengthW( LPWSTR text,            //строка текста
                                 unsigned short style ); //стиль текста, style ==0 для стиля по умолчанию

#ifdef _UNICODE
#define GetTextLengthT  GetTextLengthW
#else
#define GetTextLengthT  GetTextLength
#endif // !UNICODE


// Экспортный номер - 173
//---------------------------------------------------------------------------
// Получить длину  текста в миллиметрах
//---------------------------------------------------------------------------
double  LIB_FUNC GetTextLengthFromReference( reference pText );  //- указатель на объект "текст"

// Экспортный номер - 194
//------------------------------------------------------------------------------------------------
//  Выдать системный путь установленного типа (типы определены в ltdefine.h)
//  sptSYSTEM_FILES 	    - Выдать путь на каталог системных файлов
//  sptLIBS_FILES 		    - Выдать путь на каталог файлов библиотек
//  sptTEMP_FILES 	      - Выдать путь на каталог сохранения временных файлов
//  sptCONFIG_FILES 	    - Выдать путь на каталог сохранения конфигурации системы
//  sptINI_FILE 	        - Выдать полное имя INI-файла системы
//  sptBIN_FILE           - Выдать путь на каталог исполняемых файлов системы
//  sptPROJECT_FILES      - Выдать путь на каталог сохранения kompas.prj
//  sptDESKTOP_FILES      - Выдать путь на каталог сохранения kompas.dsk
//  sptTEMPLATES_FILES    - Выдать путь на каталог шаблонов Компас-документов
//  sptPROFILES_FILES     - Выдать путь на каталог сохранения профилей пользователя
//  sptWORK_FILES         - Выдать путь на рабочий каталог
//  sptSHEETMETAL_FILES   - Выдать путь на каталог таблиц сгибов
//  sptPARTLIB_FILES      - Выдать путь на каталог PartLib
//  sptMULTILINE_FILES    - Выдать путь к каталогу шаблонов мультилинии
//  sptPRINTDEVICE_FILES  - Выдать путь к каталогу конфигураций плоттеров/принтеров
//
//  Выдать путь к последнему каталогу, использовавшемуся в диалогах Open|Save для:
//  sptCURR_WORK_FILES       - открытия/сохранения файлов документов
//  sptCURR_LIBS_FILES       - подключения прикладных библиотек и библиотек документов
//  sptCURR_SYSTEM_FILES     - подключения библиотек стилей
//  sptCURR_PROFILES_FILES   - загрузки/сохранения профиля
//  sptCURR_SHEETMETAL_FILES - загрузки таблиц сгибов
//
//  Если buff не равен NULL и bufLen больше или равен реальной длине строки пути
//  (включая завершающий 0), возвращается количество переписанных байт
//  В противном случае возвращается требуемый размер буфера
//  Пути не завершаются символом '\' (за исключением случая корневого каталога
//  устройства - "<drive>:\")
//------------------------------------------------------------------------------------------------
int LIB_FUNC ksSystemPath( char *buff, int bufLen, int pathType );

// Экспортный номер - 917
//------------------------------------------------------------------------------------------------
//  Выдать системный путь установленного типа (типы определены в ltdefine.h)
//  sptSYSTEM_FILES 	    - Выдать путь на каталог системных файлов
//  sptLIBS_FILES 		    - Выдать путь на каталог файлов библиотек
//  sptTEMP_FILES 	      - Выдать путь на каталог сохранения временных файлов
//  sptCONFIG_FILES 	    - Выдать путь на каталог сохранения конфигурации системы
//  sptINI_FILE 	        - Выдать полное имя INI-файла системы
//  sptBIN_FILE           - Выдать путь на каталог исполняемых файлов системы
//  sptPROJECT_FILES      - Выдать путь на каталог сохранения kompas.prj
//  sptDESKTOP_FILES      - Выдать путь на каталог сохранения kompas.dsk
//  sptTEMPLATES_FILES    - Выдать путь на каталог шаблонов Компас-документов
//  sptPROFILES_FILES     - Выдать путь на каталог сохранения профилей пользователя
//  sptWORK_FILES         - Выдать путь на рабочий каталог
//  sptSHEETMETAL_FILES   - Выдать путь на каталог таблиц сгибов
//  sptPARTLIB_FILES      - Выдать путь на каталог PartLib
//  sptMULTILINE_FILES    - Выдать путь к каталогу шаблонов мультилинии
//  sptPRINTDEVICE_FILES  - Выдать путь к каталогу конфигураций плоттеров/принтеров
//
//  Выдать путь к последнему каталогу, использовавшемуся в диалогах Open|Save для:
//  sptCURR_WORK_FILES       - открытия/сохранения файлов документов
//  sptCURR_LIBS_FILES       - подключения прикладных библиотек и библиотек документов
//  sptCURR_SYSTEM_FILES     - подключения библиотек стилей
//  sptCURR_PROFILES_FILES   - загрузки/сохранения профиля
//  sptCURR_SHEETMETAL_FILES - загрузки таблиц сгибов
//
//  Если buff не равен NULL и bufLen больше или равен реальной длине строки пути
//  (включая завершающий 0), возвращается количество переписанных байт
//  В противном случае возвращается требуемый размер буфера
//  Пути не завершаются символом '\' (за исключением случая корневого каталога
//  устройства - "<drive>:\") (Unicode)
//------------------------------------------------------------------------------------------------
int LIB_FUNC ksSystemPathW( LPWSTR buff, int bufLen, int pathType );

#ifdef _UNICODE
#define ksSystemPathT  ksSystemPathW
#else
#define ksSystemPathT  ksSystemPath
#endif // !UNICODE


// Экспортный номер - 200
//------------------------------------------------------------------------------------------------
//  Сформировать относительный путь к файлу из заданного полного пути к файлу
//  и системного пути установленного типа (типы определены в <ltdefine.h>)
//  sptSYSTEM_FILES 	- Относительно каталога системных файлов
//  sptLIBS_FILES 		- Относительно каталога файлов библиотек
//  sptTEMP_FILES 	  - Относительно каталога сохранения временных файлов
//  sptCONFIG_FILES 	- Относительно каталога сохранения конфигурации системы
//  sptINI_FILE 	    - Относительно полного имени INI-файла системы
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetRelativePathFromSystemPath( char *sourcePath,  // полный путь к файлу
                                               char *destBuff,    //(результат) относительный путь к файлу( без системного пути )
                                               int   bufLen,      // длина отведенного буфера в символах
                                               int   pathType );  // путь установленного типа см. ksSystemPath

// Экспортный номер - 918
//------------------------------------------------------------------------------------------------
//  Сформировать относительный путь к файлу из заданного полного пути к файлу
//  и системного пути установленного типа (типы определены в ltdefine.h)
//  sptSYSTEM_FILES 	- Относительно каталога системных файлов
//  sptLIBS_FILES 		- Относительно каталога файлов библиотек
//  sptTEMP_FILES 	  - Относительно каталога сохранения временных файлов
//  sptCONFIG_FILES 	- Относительно каталога сохранения конфигурации системы
//  sptINI_FILE 	    - Относительно полного имени INI-файла системы
//  (Unicode)
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetRelativePathFromSystemPathW( LPWSTR sourcePath,  //полный путь к файлу
                                                LPWSTR destBuff,    //(результат) относительный путь к файлу( без системного пути )
                                                int    bufLen,      // длина отведенного буфера в символах
                                                int    pathType );  //путь установленного типа см. ksSystemPath
#ifdef _UNICODE
#define ksGetRelativePathFromSystemPathT  ksGetRelativePathFromSystemPathW
#else
#define ksGetRelativePathFromSystemPathT  ksGetRelativePathFromSystemPath
#endif // !UNICODE


// Экспортный номер - 201
//------------------------------------------------------------------------------------------------
//  Сформировать полный путь к файлу из заданного относительного пути к файлу
//  и системного пути установленного типа (типы определены в ltdefine.h)
//  sptSYSTEM_FILES 	- Относительно каталога системных файлов
//  sptLIBS_FILES 		- Относительно каталога файлов библиотек
//  sptTEMP_FILES 	  - Относительно каталога сохранения временных файлов
//  sptCONFIG_FILES 	- Относительно каталога сохранения конфигурации системы
//  sptINI_FILE 	    - Относительно полного имени INI-файла системы
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetFullPathFromSystemPath( char *relativePath, // относительный путь к файлу( без системного пути )
                                           char *destBuff,     // (результат) полный путь к файлу
                                           int   bufLen,       // длина отведенного буфера в символах
                                           int   pathType );   // путь установленного типа см. ksSystemPath

// Экспортный номер - 919
//------------------------------------------------------------------------------------------------
//  Сформировать полный путь к файлу из заданного относительного пути к файлу
//  и системного пути установленного типа (типы определены в ltdefine.h)
//  sptSYSTEM_FILES 	- Относительно каталога системных файлов
//  sptLIBS_FILES 		- Относительно каталога файлов библиотек
//  sptTEMP_FILES 	  - Относительно каталога сохранения временных файлов
//  sptCONFIG_FILES 	- Относительно каталога сохранения конфигурации системы
//  sptINI_FILE 	    - Относительно полного имени INI-файла системы
//  (Unicode)
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetFullPathFromSystemPathW( LPWSTR relativePath, // относительный путь к файлу( без системного пути )
                                            LPWSTR destBuff,     // (результат) полный путь к файлу
                                            int bufLen,          // длина отведенного буфера в символах
                                            int pathType );      // путь установленного типа см. ksSystemPath

#ifdef _UNICODE
#define ksGetFullPathFromSystemPathT  ksGetFullPathFromSystemPathW
#else
#define ksGetFullPathFromSystemPathT  ksGetFullPathFromSystemPath
#endif // !UNICODE


// Экспортный номер - 202
//------------------------------------------------------------------------------------------------
//  Сформировать относительный путь к файлу из полного пути к задающему файлу
//  и полного пути к файлу
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetRelativePathFromFullPath( char *mainFilePath,  // полный путь к задающему файлу
                                             char *sourcePath,    // полный путь к требуемому файлу
                                             char *destBuff,      // (результат) относительный путь к требуемому файлу( без общей с задающим файлом части пути )
                                             int   bufLen );      // длина отведенного буфера в символах
// Экспортный номер - 920
//------------------------------------------------------------------------------------------------
//  Сформировать относительный путь к файлу из полного пути к задающему файлу
//  и полного пути к файлу (Unicode)
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetRelativePathFromFullPathW( LPWSTR mainFilePath,  // полный путь к задающему файлу
                                              LPWSTR sourcePath,    // полный путь к требуемому файлу
                                              LPWSTR destBuff,      // (результат) относительный путь к требуемому файлу( без общей с задающим файлом части пути )
                                              int    bufLen );      // длина отведенного буфера в символах

#ifdef _UNICODE
#define ksGetRelativePathFromFullPathT  ksGetRelativePathFromFullPathW
#else
#define ksGetRelativePathFromFullPathT  ksGetRelativePathFromFullPath
#endif // !UNICODE


// Экспортный номер - 203
//------------------------------------------------------------------------------------------------
//  Сформировать полный путь к файлу из заданного пути к задающему файлу
//  и относительного пути к файлу
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetFullPathFromRelativePath( char *mainFilePath,    //полный путь к задающему файлу
                                             char *relativePath,    //относительный путь к требуемому файлу( без общей с задающим файлом части пути )
                                             char *destBuff,        //(результат) полный путь к требуемому файлу
                                             int sizeDestBuff );    // размер буффера

// Экспортный номер - 921
//------------------------------------------------------------------------------------------------
//  Сформировать полный путь к файлу из заданного пути к задающему файлу
//  и относительного пути к файлу (Unicode)
//------------------------------------------------------------------------------------------------
void LIB_FUNC ksGetFullPathFromRelativePathW( LPWSTR mainFilePath,    //полный путь к задающему файлу
                                              LPWSTR relativePath,    //относительный путь к требуемому файлу( без общей с задающим файлом части пути )
                                              LPWSTR destBuff,        //(результат) полный путь к требуемому файлу
                                              int sizeDestBuff );    // размер буффера

#ifdef _UNICODE
#define ksGetFullPathFromRelativePathT  ksGetFullPathFromRelativePathW
#else
#define ksGetFullPathFromRelativePathT  ksGetFullPathFromRelativePath
#endif // !UNICODE


// Экспортный номер - 204
//------------------------------------------------------------------------------------------------
//  Получить версию системы
//  Пример :
//  Для версии 5.4 Release 2 Build 1
//  iMajor   = 5
//  iMinor   = 4
//  iRelease = 2
//  iBuild   = 1
//  Любой из указателей может быть равен 0, тогда соответствующеее значение
//  не выдается
//  функция возвращает полный номер версии
//------------------------------------------------------------------------------------------------
unsigned long LIB_FUNC ksGetSystemVersion( int *iMajor,    //Старшее слово версии
																	int *iMinor,    //Младшее слово версии
                                  int *iRelease,  //Номер выпуска внутри одной версии
                                  int *iBuild );  //Номер сборки внутри одного выпуска

                                  
// Экспортный номер - 205
//------------------------------------------------------------------------------
//  Получить строку из INI-файла системы или из Registry
//  Если lpReturnedString = 0 или iSize = 0, то возвращается необходимый размер буфера в символах,
//  Иначе - возвращается количество переписанных символов (с учетом завершающего 0)
//  Если результат функции = 0, значит секция или ключ не были найдены ни в INI-файле,
//  ни в Registry
//  Пример :
//  lpSection = "Directories"
//  lpKey     = "Sys"
//  Результат :
//  lpReturnedString = "c:\Program Files\Kompas54\Sys"
//  iSize            = 29
// ---
int LIB_FUNC ksGetSystemProfileString( char *lpSection,        // Имя секции
																			 char *lpKey,            // Имя ключа
                                       char *lpReturnedString, // Буфер для выходной строки
                                       int   buffLen );        // длина отведенного буфера в символах

// Экспортный номер - 922
//------------------------------------------------------------------------------
//  Получить строку из INI-файла системы или из Registry
//  Если lpReturnedString = 0 или buffLen = 0, то возвращается необходимый размер буфера в символах,
//  Иначе - возвращается количество переписанных символов (с учетом завершающего 0)
//  Если результат функции = 0, значит секция или ключ не были найдены ни в INI-файле,
//  ни в Registry
//  Пример :
//  lpSection = "Directories"
//  lpKey     = "Sys"
//  Результат :
//  lpReturnedString = "c:\Program Files\Kompas54\Sys"
//  iSize            = 29
//  (Unicode)
// ---
int LIB_FUNC ksGetSystemProfileStringW( LPWSTR lpSection,        // Имя секции
																			  LPWSTR lpKey,            // Имя ключа
                                        LPWSTR lpReturnedString, // Буфер для выходной строки
                                        int    buffLen );        // длина отведенного буфера в символах

#ifdef _UNICODE
#define ksGetSystemProfileStringT  ksGetSystemProfileStringW
#else
#define ksGetSystemProfileStringT  ksGetSystemProfileString
#endif // !UNICODE


// Экспортный номер - 362
//------------------------------------------------------------------------------
// Открыть файл  помощи
// синтаксис соответствует ::WinHelp
// Функция открывает файл помощи из под системы. При закрытиии системы
// окно помощи закроется автоматически
// ---
void  LIB_FUNC ksOpenHelpFile( char        *file,    // полное имя help-файла
                               unsigned int command, // тип help
                               unsigned int id );    // идентификатор темы помощи

// Экспортный номер - 923
//------------------------------------------------------------------------------
// Открыть файл  помощи
// синтаксис соответствует ::WinHelp
// Функция открывает файл помощи из под системы. При закрытиии системы
// окно помощи закроется автоматически (Unicode)
// ---
void  LIB_FUNC ksOpenHelpFileW( LPWSTR       file,    // полное имя help-файла
                                unsigned int command, // тип help
                                unsigned int id );    // идентификатор темы помощи

#ifdef _UNICODE
#define ksOpenHelpFileT  ksOpenHelpFileW
#else
#define ksOpenHelpFileT  ksOpenHelpFile
#endif // !UNICODE


// Экспортный номер - 366
//------------------------------------------------------------------------------
// получить настройки документа
// DIMENTION_OPTIONS    -  param -> структура DimensionsOptions
// ARROWFILLING_OPTIONS -  param -> int  1- стрелки зачерняют 0- не зачерняют
// SHEET_OPTIONS        -  param -> структура SheetPar настроек новых документов
// LENGTHUNITS_OPTIONS  -  param -> short ST_MIX_MM - мм, ST_MIX_SM - см, ST_MIX_M - метры
// ---
int LIB_FUNC  GetDocOptions( int   optionsType,// тип настройки ( реализовано для настройки размера
                             void *param,      // указатель на структуру параметров
                             int   sizePar );  // размер структуры параметров


// Экспортный номер - 705
//------------------------------------------------------------------------------
// изменить настройки документа
// DIMENTION_OPTIONS    -  param -> структура DimensionsOptions
// ARROWFILLING_OPTIONS -  param -> int  1- стрелки зачерняют 0- не зачерняют
// SHEET_OPTIONS        -  param -> структура SheetPar настроек новых документов
// LENGTHUNITS_OPTIONS  -  param -> short ST_MIX_MM - мм, ST_MIX_SM - см, ST_MIX_M - метры
// ---
int LIB_FUNC  SetDocOptions( int   optionsType,// тип настройки
														 void *param,      // указатель на структуру параметров
                             int   sizePar );  // размер структуры параметров


// Экспортный номер - 382
//------------------------------------------------------------------------------
// заменить системные настройки
// * param - указатель на структуру параметров
// sizePar - размер структуры параметров
// optionsType - тип настройки ( реализовано для привязок )
// Функция возвращает  1 в случае успеха или 0 в случае неудачи
// ---
int LIB_FUNC  ksSetSysOptions( int optionsType, void *param, int sizePar );


// Экспортный номер - 383
//------------------------------------------------------------------------------
// получить системные настройки
// * param - указатель на структуру параметров
// sizePar - размер структуры параметров
// optionsType - тип настройки ( реализовано для привязок )
// Функция возвращает  1 в случае успеха или 0 в случае неудачи
// ---
int LIB_FUNC  ksGetSysOptions( int optionsType, void *param, int sizePar );


// Экспортный номер - 412
//------------------------------------------------------------------------------
// Выполнение команды другой библиотеки
// fileName - Имя библиотеки либо полное либо относительно директория LIBS
// ---
int LIB_FUNC  ksExecuteLibraryCommand( char *fileName, int command );


// Экспортный номер - 924
//------------------------------------------------------------------------------
// Выполнение команды другой библиотеки
// fileName - Имя библиотеки либо полное либо относительно директория LIBS
// (Unicode)
// ---
int LIB_FUNC  ksExecuteLibraryCommandW( LPWSTR fileName, int command );

#ifdef _UNICODE
#define ksExecuteLibraryCommandT  ksExecuteLibraryCommandW
#else
#define ksExecuteLibraryCommandT  ksExecuteLibraryCommand
#endif // !UNICODE


// Экспортный номер - 434
//------------------------------------------------------------------------------
//  Функция Возвращает : можно ли выполнять библиотеку или нет
//  1 - можно выполнять библиотеку 0 - нет
//  Имя библиотеки либо полное либо относительно директория LIBS
//  Функция распространяется на библиотеки *.rtw (API), *.lfr(фрагменов), *.l3d(3D моделей ) 
// ---
int LIB_FUNC ksIsLibraryEnabled( char * libName );// имя библиотеки


// Экспортный номер - 925
//------------------------------------------------------------------------------
//  Функция Возвращает : можно ли выполнять библиотеку или нет
//  1 - можно выполнять библиотеку 0 - нет
//  Имя библиотеки либо полное либо относительно директория LIBS
//  Функция распространяется на библиотеки *.rtw (API), *.lfr(фрагменов), *.l3d(3D моделей ) 
//  (Unicode)
// ---
int LIB_FUNC ksIsLibraryEnabledW( LPWSTR libName );// имя библиотеки

#ifdef _UNICODE
#define ksIsLibraryEnabledT  ksIsLibraryEnabledW
#else
#define ksIsLibraryEnabledT  ksIsLibraryEnabled
#endif // !UNICODE


// Экспортный номер - 420
//------------------------------------------------------------------------------
// Получить отклонения
// name - поле допуска; dimValue - значение размера; high, low - отклонения;
// inMM = 1 - dimValue, high, low - в мм, 0 - в единицах измерения текущего документа
// ---
int LIB_FUNC  ksGetQualityDefects( const char* name, double  dimValue,
                                   double*     high, double* low,
                                   unsigned char  inMM );

// Экспортный номер - 926
//------------------------------------------------------------------------------
// Получить отклонения
// name - поле допуска; dimValue - значение размера; high, low - отклонения;
// inMM = 1 - dimValue, high, low - в мм, 0 - в единицах измерения текущего документа
// (Unicode)
// ---
int LIB_FUNC  ksGetQualityDefectsW( LPCWSTR name, double  dimValue,
                                    double*     high, double* low,
                                    unsigned char  inMM );

#ifdef _UNICODE
#define ksGetQualityDefectsT  ksGetQualityDefectsW
#else
#define ksGetQualityDefectsT  ksGetQualityDefects
#endif // !UNICODE


// Экспортный номер - 421
//------------------------------------------------------------------------------
// Создать итератор по квалитетам
// system - 1 - для отверстия, 0 - для вала
// withLimitation - 0 - без учёта ограничений, 1 - с учётом ограничений наложенных
// в системе
// Возвращает ссылку на итератор или 0 если итератор не создан
// ---
reference LIB_FUNC  ksCreateQualityIterator( unsigned char system, unsigned char withLimitation );

// Экспортный номер - 422
//------------------------------------------------------------------------------
// Двигаться по квалитетам
// ch = 'F' - первый, ch = 'N' - следующий
// inMM = 1  - minLimit, maxLimit, high, low - в мм,
//        0 - в единицах измерения текущего документа
// ---
int LIB_FUNC  ksMoveQualityIterator( reference iterator, QualityContensParam* param,
                                     unsigned char inMM, unsigned char ch );

// Экспортный номер - 927
//------------------------------------------------------------------------------
// Двигаться по квалитетам
// ch = 'F' - первый, ch = 'N' - следующий
// inMM = 1  - minLimit, maxLimit, high, low - в мм,
//        0 - в единицах измерения текущего документа 
// (Unicode)
// ---
int LIB_FUNC  ksMoveQualityIteratorW( reference iterator, QualityContensParamW* param,
                                     unsigned char inMM, unsigned char ch );

#ifdef _UNICODE
#define ksMoveQualityIteratorT  ksMoveQualityIteratorW
#else
#define ksMoveQualityIteratorT  ksMoveQualityIterator
#endif // !UNICODE


// Экспортный номер - 423
//------------------------------------------------------------------------------
// Получить отклонения
// name - поле допуска
// inMM = 1  - minLimit, maxLimit, high, low - в мм,
//        0 - в единицах измерения текущего документа
// ---
int LIB_FUNC  ksGetQualityContensParam( char* name, QualityContensParam* param,
                                        unsigned char inMM );

// Экспортный номер - 928
//------------------------------------------------------------------------------
// Получить отклонения
// name - поле допуска
// inMM = 1  - minLimit, maxLimit, high, low - в мм,
//        0 - в единицах измерения текущего документа
// (Unicode)
// ---
int LIB_FUNC  ksGetQualityContensParamW( LPWSTR name, QualityContensParamW* param,
                                        unsigned char inMM );

#ifdef _UNICODE
#define ksGetQualityContensParamT  ksGetQualityContensParamW
#else
#define ksGetQualityContensParamT  ksGetQualityContensParam
#endif // !UNICODE


// Экспортный номер - 424
//------------------------------------------------------------------------------
// Получить массив полей допусков, которые поддерживают размер dimValue и не превышают
// указанных отклонений
// names - динамический массив полей допусков
// dimValue, high, low - строго в мм
// system - 1 - для отверстия, 0 - для вала
// withLimitation - 0 - без учёта ограничений, 1 - с учётом ограничений наложенных
// в системе
// ---
int LIB_FUNC  ksGetQualityNames( reference names, double dimValue, double high, double low,
                                 unsigned char system, unsigned char withLimitation );

// Экспортный номер - 268
//------------------------------------------------------------------------------
// Установить текущую библиотеку
// Необходимо вызывать для библиотек, которые используют SystemControlStart - выход под управление
// системой.
// Установить текущесть можно либо по идентификатору модуля Dll библиотеки,
// либо по имени библиотеки, которое задают в функции LibraryName().
// Функция возвращает 1, если удалось установить текущесть - признак, что библиотека
// может продолжать работу. Если возвращает 0 - текущесть не установлена и работу продолжать нельзя
// в это время работает другая библиотека, работу которой нельзя прекратить
// ---
int  LIB_FUNC ksSetCurrentLibrary( char * libname, long hModule );


// Экспортный номер - 929
//------------------------------------------------------------------------------
// Установить текущую библиотеку
// Необходимо вызывать для библиотек, которые используют SystemControlStart - выход под управление
// системой.
// Установить текущесть можно либо по идентификатору модуля Dll библиотеки,
// либо по имени библиотеки, которое задают в функции LibraryName().
// Функция возвращает 1, если удалось установить текущесть - признак, что библиотека
// может продолжать работу. Если возвращает 0 - текущесть не установлена и работу продолжать нельзя
// в это время работает другая библиотека, работу которой нельзя прекратить
// (Unicode)
// ---
int  LIB_FUNC ksSetCurrentLibraryW( LPWSTR libname, long hModule );

#ifdef _UNICODE
#define ksSetCurrentLibraryT  ksSetCurrentLibraryW
#else
#define ksSetCurrentLibraryT  ksSetCurrentLibrary
#endif // !UNICODE


// Экспортный номер - 425
//------------------------------------------------------------------------------
// 15.01.04 - функция устарела, предпочтительнее использовать ksConvertLangStrEx
// Конвертировать строку src в dst в соответствии с текущим словарем
// ---
int LIB_FUNC  ksConvertLangStr( LPSTR src, LPSTR dst, int dstMaxLen );

// Экспортный номер - 930
//------------------------------------------------------------------------------
// 
// 
// ---
int LIB_FUNC  ksConvertLangStrW( LPWSTR src, LPWSTR dst, int dstMaxLen );

#ifdef _UNICODE
#define ksConvertLangStrT  ksConvertLangStrW
#else
#define ksConvertLangStrT  ksConvertLangStr
#endif // !_UNICODE


// Экспортный номер - 725
//------------------------------------------------------------------------------
// Конвертировать строку с идентификатором strID в dst в соответствии с текущим словарем
// ---
int LIB_FUNC  ksConvertLangStrEx( HINSTANCE hInstance, unsigned int strID, char* dst, int dstMaxLen );


// Экспортный номер - 931
//------------------------------------------------------------------------------
// Конвертировать строку с идентификатором strID в dst в соответствии с текущим словарем
// (Unicode)
// ---
int LIB_FUNC  ksConvertLangStrExW( HINSTANCE hInstance, unsigned int strID, LPWSTR dst, int dstMaxLen );

#ifdef _UNICODE
#define ksConvertLangStrExT  ksConvertLangStrExW
#else
#define ksConvertLangStrExT  ksConvertLangStrEx
#endif // !UNICODE


// Экспортный номер - 426
//------------------------------------------------------------------------------
// 15.01.04 - функция устарела, предпочтительнее использовать ksConvertLangWindowEx
// Конвертировать окно с входящтми дочерними окнами в соответствии с текущим словарем
// ---
int LIB_FUNC  ksConvertLangWindow( HWND hWnd );

// Экспортный номер - 726
//------------------------------------------------------------------------------
// Конвертировать окно с входящтми дочерними окнами в соответствии с текущим словарем
// ---
int LIB_FUNC  ksConvertLangWindowEx( HWND hWnd, HINSTANCE hInstance, char* dlgID );

// Экспортный номер - 932
//------------------------------------------------------------------------------
// Конвертировать окно с входящтми дочерними окнами в соответствии с текущим словарем
// (Unicode)
// ---
int LIB_FUNC  ksConvertLangWindowExW( HWND hWnd, HINSTANCE hInstance, LPWSTR dlgID );

#ifdef _UNICODE
#define ksConvertLangWindowExT  ksConvertLangWindowExW
#else
#define ksConvertLangWindowExT  ksConvertLangWindowEx
#endif // !UNICODE

// Экспортный номер - 427
//------------------------------------------------------------------------------
// Конвертировать меню в соответствии с текущим словарем
// ---
HMENU LIB_FUNC  ksConvertLangMenu( HMENU hMenu );


// Экспортный номер - 279
//------------------------------------------------------------------------------
// Перерисовка части 2D документа ( Листа )
// Получает указатель на структуру RectParam и референс вида,
// в координатах которого задается RectParam
// ---
int LIB_FUNC ksReDrawDocPart( RectParam * rect, reference pView );

// Экспортный номер - 437
//------------------------------------------------------------------------------
// Включить/отключить отмену предыдущих операций.
// enable = false - отключить (Устанавливает "количество шагов назад" равным нулю)
// enable = true  - включить  (Восстанавливает старое значение "количества шагов назад",
// изменненое вызовом этой функции с параметром enable = false. Если функция ранее
// не вызывалась - ничего изменятся не будет)
// ---
void LIB_FUNC ksEnableUndo( unsigned char enable );


// Экспортный номер - 1001
//------------------------------------------------------------------------------
// Включить/отключить объединение операций для Undo
// add = true  - включить  создаёт текущий контейнер Undo для объединения операций
// add = false - отключить закрывает текущий контейнер Undo для объединения операций
// с момента включения и до момента отключения, все создаваемые объекты попадают в один 
// контейнер Undo и в случае вызова команды отката будут удалены за 1 шаг.
// Допускаются вложенные вызовы ф-ии, но контейнер в таком случае все равно будет один.
// ---
void LIB_FUNC ksUndoContainer( unsigned char add );


// Экспортный номер - 281
//------------------------------------------------------------------------------
// Получить точку привязки текста
// pText - указатель на объект "текст"
// возврашаемое значение : тип точки привязки TextAlign, или -1 в случае неудачи
// ---
int LIB_FUNC ksGetTextAlign( reference pText );

// Экспортный номер - 282
//------------------------------------------------------------------------------
// Установить точку привязки текста
// pText - указатель на объект "текст"
// align - тип точки привязки TextAlign
// возврашаемое значение : 0 - в случае неудачи
// ---
int LIB_FUNC ksSetTextAlign( reference pText, unsigned int align );

// Экспортный номер - 282
//------------------------------------------------------------------------------
// Интерфейс результатов редактирования объекта
// pDoc - Указатель на 2D документ  
// возврашаемое значение : указатель на интерфейс IObject2DNotifyResult
// ---
IObject2DNotifyResult * LIB_FUNC ksGetObject2DNotifyResult( reference pDoc );

// Экспортный номер - 734
//-------------------------------------------------------------------------------
// Получить тип отрисовки визуальной части
// ---
long LIB_FUNC ksGetLookStyle();

// Экспортный номер - 735
//-------------------------------------------------------------------------------
// Установить тип отрисовки визуальной части
// ---
long LIB_FUNC ksSetLookStyle( long style );

// Экспортный номер - 743
//-----------------------------------------------------------------------------
// [26.5.04]
// Получить указатель внешнего интерфейса.
// ---
LPDISPATCH LIB_FUNC ksGetExternalInterface();

// Экспортный номер - 734
//-------------------------------------------------------------------------------
// Получить тип отрисовки визуальной части
// ---
long LIB_FUNC ksGetLookStyle();

// Экспортный номер - 735
//-------------------------------------------------------------------------------
// Установить тип отрисовки визуальной части
// ---
long LIB_FUNC ksSetLookStyle( long style );


// Экспортный номер - 749
// [09/8/2004] 
//-------------------------------------------------------------------------------
// рассчитать масштаб для вставки растра в прямоугольник заданных габаритов
// возвращает значение массштаба или 0, в случае неудачи
//
// fileName - полный путь к файлу
// w - ширина габаритного прямоугольника 
// h - высота габаритного прямоугольника 
// ---
double LIB_FUNC ksCalcRasterScale( const char* fileName, double w, double h );

// Экспортный номер - 933
// [05/07/2007] 
//-------------------------------------------------------------------------------
// рассчитать масштаб для вставки растра в прямоугольник заданных габаритов
// возвращает значение массштаба или 0, в случае неудачи
//
// fileName - полный путь к файлу
// w - ширина габаритного прямоугольника 
// h - высота габаритного прямоугольника 
// (Unicode)
// ---
double LIB_FUNC ksCalcRasterScaleW( LPCWSTR fileName, double w, double h );

#ifdef _UNICODE
#define ksCalcRasterScaleT  ksCalcRasterScaleW
#else
#define ksCalcRasterScaleT  ksCalcRasterScale
#endif // !UNICODE

// Экспортный номер - 771
// [20/12/2005] 
//------------------------------------------------------------------------------
// Управление подключением 3D модуля  для режима сетевой работы системы
// attach: 1 включить работу с 3D модулем; 0 - выключить работу с 3D модулем
// Функция возвращает 1, если был инициирован процесс подключения или отключения 3D.
// В случае неудачи возвращается 0
//
// ---
int  LIB_FUNC ksModule3D( unsigned char attach );

// Экспортный номер - 772
// [20/12/2005] 
//-------------------------------------------------------------------------------
// Проверить разрешена ли работа со модулем 3D
// ---
int LIB_FUNC ksIsModule3DActive();

// Экспортный номер - 780
// [23/10/2006] 
//------------------------------------------------------------------------------
//   Найти или создать объект LPUNKNOWN API7, 3D COM, API5(Auto)
//   по объекту LPUNKNOWN API7, 3D COM, API5(Auto)
//   obj - объект LPUNKNOWN API5(COM или Auto) или API7, подлежащий перобразованию
//   apiNewType - новый тип API, objNewType - новый тип объекта 
//   В случае неудачи возвращается 0
// ---
LPUNKNOWN LIB_FUNC ksTransferInterface( LPUNKNOWN obj, long apiNewType, long objNewType );

// Экспортный номер - 956
// [11/9/2007] 
//---------------------------------------------------------------------------------------------------
//
//   Найти или создать объект LPUNKNOWN API7  - c AddRef
//   по объекту obj в документе doc
//   obj - указатель на объект
//   doc - указатель на документ
//   В случае неудачи возвращается 0
//
//---
LPUNKNOWN LIB_FUNC ksTransferReference( reference obj, reference doc );


// Экспортный номер - 785
// [22/11/2006] 
//-----------------------------------------------------------------------------
// Выполнить команду Компаса
// commandID - константа из enum-а ProcessTypeEnum или KompasCommandEnum
// post      - true - запуск команды через PostMessage, false - через SendMessage
// ---
int LIB_FUNC ksExecuteKompasCommand( long commandID, int post );


// Экспортный номер - 787
// [22/11/2006] 
//-----------------------------------------------------------------------------
// Проверить доступность выполнения команды
// ---
int LIB_FUNC ksIsKompasCommandEnable( long commandID );


// Экспортный номер - 788
// [22/11/2006] 
//-----------------------------------------------------------------------------
// Проверить нажата ли кнопка команды
// ---
int LIB_FUNC ksIsKompasCommandCheck( long commandID );


// Экспортный номер - 789
//-----------------------------------------------------------------------------
// Сравнить имена файлов 0 - совпадают
// ---
int LIB_FUNC ksFileNameCompare( char * fileName1, char * fileName2 );


// Экспортный номер - 934
//-----------------------------------------------------------------------------
// Сравнить имена файлов 0 - совпадают (Unicode)
// ---
int LIB_FUNC ksFileNameCompareW( LPWSTR fileName1, LPWSTR fileName2 );

#ifdef _UNICODE
#define ksFileNameCompareT  ksFileNameCompareW
#else
#define ksFileNameCompareT  ksFileNameCompare
#endif // !UNICODE


//-----------------------------------------------------------------------------
// установить текстуру для диалога
// ---
void LIB_FUNC ksEnableThemeDialogTexture( HWND hWnd );


// Экспортный номер - 1003
//-----------------------------------------------------------------------------
// Включить\выключить динамическую выдачу сообщений о ошибке
// debugMode = 1 - включить 0 - выключить
// возвращается предыдующее состояние флага
// ---
int LIB_FUNC ksSetDebugMessagesMode( int debugMode );


// Экспортный номер - 1008
//-----------------------------------------------------------------------------
// Установить текст курсора для процесса
//---
int LIB_FUNC ksSetCursorText( char * text );

// Экспортный номер - 1009
//-----------------------------------------------------------------------------
// Установить текст курсора для процесса
//---
int LIB_FUNC ksSetCursorTextW( LPWSTR text );

#ifdef _UNICODE
#define ksSetCursorTextT  ksSetCursorTextW
#else
#define ksSetCursorTextT  ksSetCursorText
#endif // !UNICODE 


// Экспортный номер - 1017
//-----------------------------------------------------------------------------
// Выключить\включить кеширование поиска файлов
// Кеширование включается при запуске библиотечной команды
//---
int LIB_FUNC ksLockFileCache( int lock );


// Экспортный номер - 1018
//-----------------------------------------------------------------------------
// Очистить кеш 
// Кеширование включается при запуске библиотечной команды
//---
int LIB_FUNC ksClearFileCache( );


// Экспортный номер - 1019
//-------------------------------------------------------------------------------
// Проверить разрешена ли работа со модулем 2D
// ---
int LIB_FUNC ksIsModule2DActive();


// Экспортный номер - 1022
//------------------------------------------------------------------------------
// Проверить, является ли версия КОМПАС-Студент
//---
int LIB_FUNC ksIsHomeVersion();

} //extern "C"


#endif

