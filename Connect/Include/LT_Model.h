////////////////////////////////////////////////////////////////////////////////
//
// Раздел "Модельные объекты". LT_MODEL.h
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LT_MODEL_H
#define __LT_MODEL_H

#ifndef __LTDEFINE_H
#include "ltdefine.h"
#endif

#define LIB_FUNC WINAPI

extern "C" {

// Экспортный номер - 322
//-------------------------------------------------------------------------------
// функция устарела 4.10.97 со временем будет удалена
// Создать объект "неуказанная шероховатость".Объект действителен для листа.
// Функция возвращает указатель на  объект "неуказанная шероховатость".
//-------------------------------------------------------------------------------
reference LIB_FUNC SpecRough( unsigned char type,    //тип знака 0-вид обр-ки не уст-ся 1- обр-ка удалением слоя материала
                                                     // 2 -обр-ка без удаления слоя материала
                              unsigned char t,       //1- есть знак в скобках 0 -нет
                              char * s );            //текст



// Экспортный номер - 358
//-------------------------------------------------------------------------------
// Объект "неук.шероховатость" для листа
//-------------------------------------------------------------------------------
reference  LIB_FUNC ksSpecRough( SpecRoughParam * par ); //параметры для неуказанной шероховатости


// Экспортный номер - 826
//-------------------------------------------------------------------------------
// Объект "неук.шероховатость" для листа (Unicode)
//-------------------------------------------------------------------------------
reference  LIB_FUNC ksSpecRoughW( SpecRoughParamW * par ); //параметры для неуказанной шероховатости

#ifdef _UNICODE
#define ksSpecRoughT  ksSpecRoughW
#else
#define ksSpecRoughT  ksSpecRough
#endif // !UNICODE


// Экспортный номер - 49
//-------------------------------------------------------------------------------
//  Создать объект "точка".
//  Возвращается указатель на объект "точка".
//-------------------------------------------------------------------------------
reference LIB_FUNC Point( double x, double y,   //координаты точки
													unsigned short style ); //стиль отрисовки  точки
                                              		//0-точка,1 - крестик,2 -х-точка,3-квадрат,4-треугольник,5-окружность,6-звезда,7-перечеркнутый квадрат,8 - утолщенный плюс
// Экспортный номер - 45
//-------------------------------------------------------------------------------
//  Создать объект "отрезок".
//  Возвращается указатель на объект "отрезок".
//-------------------------------------------------------------------------------
reference LIB_FUNC LineSeg( double x1, double y1,  //первая точка отрезка
														double x2, double y2,  //вторая точка отрезка
	                          unsigned short style); //стиль отрисовки отрезка
														

// Экспортный номер - 331
//-------------------------------------------------------------------------------
//  Тип знака
// 0  без значка
// 1  стрелка изнутри
// 2  стрелка снаружи
// 3  засечка с продолжением кривой ( с хвостиком )
// 4  верхняя половина стрелки изнутри
// 5  нижняя половина стрелки изнутри
// 6  большая стрелка изнутри  (7мм)
// 7  стрелка для размера высоты(штрихи длиной 4 мм под углом  45 гр )
// 8  треугольник по направлению кривой
// 9  окружность радиусом  2 мм тонкой линией
// 10 обозначение фиктивного центра в виде большого креста
// 11 знак склеивания
// 12 знак пайки
// 13 знак сшивания
// 14 знак соединения внахлестку металл скобами
// 15 знак углового соединения металл скобами
// 16 знак монтажного шва
// 17 засечка без продолжения кривой (без хвостика)
// 18 треугольник по текущей СК
// 19 закрытая стрелка изнутри             
// 20 закрытая стрелка снаружи             
// 21 открытая стрелка изнутри             
// 22 открытая стрелка снаружи             
// 23 стрелка 90 град изнутри              
// 24 стрелка 90 град снаружи              
// 25 точка диаметром стрелки размера      
// 26 точка диаметром 0.6 стрелки размера  
// Ввод в модель аннотационного отрезка ( не зависит от масштаба и может иметь значки на концах
//----------------------------------------------------------------------------------------------
reference  LIB_FUNC AnnLineSeg( double x1, double y1,                    //первая точка отрезка
  											    		double x2, double y2,                    //вторая точка отрезка
                                unsigned char term1, unsigned char term2,//типы значков на концах отрезка
                                unsigned short style );                  //стиль отрисовки отрезка

// Экспортный номер - 361
//----------------------------------------------------------------------------------------------
//  Ввод в модель значка определенного типа
//  Тип значка см. функцию  AnnLineSeg
//----------------------------------------------------------------------------------------------
reference  LIB_FUNC PointArraw( double x, double y,               // точка привязки значка
                                           double ang,            // угол отрисовки значка
																			     unsigned char term );  // тип отрисовки значка

// Экспортный номер - 332
//------------------------------------------------------------------------------
//  Ввод в модель  дуги по точкам со стрелками
//  составной объект из дуги и PointArraw на концах дуги
//  Типы значков см. функцию  AnnLineSeg
//------------------------------------------------------------------------------
reference LIB_FUNC AnnArcByPoint( double xc, double yc,                      //цетр дуги
                                  double rad,                                //радиус дуги 
        						 							double x1, double y1,                      //точка на дуге
                                  double x2, double y2,                      //точка на дуге
                                  short direction,                           //направление отрисовки дуги
                                  unsigned char  term1, unsigned char  term2,//типы значков на концах отрезка
										      				unsigned short style );                    //стиль отрисовки дуги

                                           
// Экспортный номер - 46
//-------------------------------------------------------------------------------
//  Создать объект "вспомогательная линия".
//  Возвращается указатель на объект "вспомогательная линия".
//-------------------------------------------------------------------------------
reference LIB_FUNC Line( double x, double y,  //точка на линии
												 double angle );      //угол линии относительно оси X в гр.


// Экспортный номер - 51
//-------------------------------------------------------------------------------
// Создать объект "дуга" по центру и углам.
// Возвращается указатель на объект "дуга".
//-------------------------------------------------------------------------------
reference LIB_FUNC ArcByAngle( double xc, double yc, //цетр дуги
															 double rad,           //радиус дуги
															 double f1, double f2, //начальный и конечный угол
															 short direction,        //направление отрисовки дуги
															 unsigned short style ); //стиль отрисовки дуги

// Экспортный номер - 307
//-------------------------------------------------------------------------------
//  Создать объект "дуга" по трем точкам.
//  Возвращается указатель на объект "дуга".
//-------------------------------------------------------------------------------
reference LIB_FUNC ArcBy3Points( double x1, double y1,  //точка на дуге
																 double x2, double y2,  //точка на дуге
																 double x3, double y3,  //точка на дуге
																 unsigned short style );  //стиль отрисовки дуги
// Экспортный номер - 332
//-------------------------------------------------------------------------------
//  Создать объект "дуга" по центу и конечным точкам.
//  Возвращается указатель на объект "дуга".
//-------------------------------------------------------------------------------
reference LIB_FUNC ArcByPoint(  double  xc, double yc,   //цетр дуги
                                double rad,             //радиус дуги
        						 						double x1, double y1,   //точка на дуге
                                double x2, double y2,   //точка на дуге
                                short  direction,       //направление отрисовки дуги
										      			unsigned short style ); //стиль отрисовки дуги

// Экспортный номер - 53
//-------------------------------------------------------------------------------
//  Создать объект "окружность".
//  Возвращается указатель на объект "окружность".
//-------------------------------------------------------------------------------
reference LIB_FUNC Circle( double xc, double yc,  //цент окружности
													 double rad,            //радиус окружности
													 unsigned short style );  //стиль отрисовки окружности

// Экспортный номер - 132
//-------------------------------------------------------------------------------
//  Создать объект "эллипс".
//  Возвращается указатель на объект "эллипс".
//-------------------------------------------------------------------------------
reference LIB_FUNC  ksEllipse( EllipseParam *par ); //параметры эллипса

// Экспортный номер - 342
//-------------------------------------------------------------------------------
//  Ввод в модель дуги эллипса
//-------------------------------------------------------------------------------
reference LIB_FUNC ksEllipseArc( EllipseArcParam *par );

// Экспортный номер - 390
//-------------------------------------------------------------------------------
//  Ввод в модель дуги эллипса по параметрам
//-------------------------------------------------------------------------------
reference  LIB_FUNC ksParEllipseArc( EllipseArcParam1 *par );

// Экспортный номер - 133
//-------------------------------------------------------------------------------
//  Создать объект "эквидистанта".
//  Возвращается указатель на объект "эквидистанта".
//-------------------------------------------------------------------------------
reference LIB_FUNC  Equidistant( EquidistantParam *par ); //параметры эквидистанты

// Экспортный номер - 330
//--------------------------------------------------------------------------------
///  Nurbs   по характеристическим точкам конического сечения
//--------------------------------------------------------------------------------
reference LIB_FUNC NurbsForConicCurve( double x[4], double y[4], unsigned short style );


// Экспортный номер - 298
//-------------------------------------------------------------------------------
// Создать объект "Осевая линия"
// ---
reference LIB_FUNC ksAxisLine( AxisLineParam * param );


// Экспортный номер - 83
//-------------------------------------------------------------------------------
//  Открывает параграф.
//  Составной объект. Объекты TextLine, вводимые между орераторами Paragraph и
//  EndObj,   принадлежат параграфу.
//  Параграф, может состоять из нескольких строк, строки могут состоять из
//  нескольких компонент.Компоненты могут изменять параметры текущего фонта.
//  EndObj возвращает указатель на параграф.
//-------------------------------------------------------------------------------
int       LIB_FUNC Paragraph( ParagraphParam  *par  );   //par- параметры параграфа


// Экспортный номер - 84
//-------------------------------------------------------------------------------
// Задать участок(компоненту) строки текста.
// Компонента строки должна иметь изменение хотя бы одного свойства
// по отношению к текущему фонту.
// Спецзнак задается отдельной компонентой.
// bitVector формируется с помощью логической операции | из набора определений
// [INVARIABLE ...NEW_LINE] см. ltdefine.h.
//-------------------------------------------------------------------------------
int       LIB_FUNC TextLine( unsigned int   bitVector,//свойства строки, которые задаются вкл.-выкл.
														 int   tip,               //тип свойства строки, которое задается значением
														 void *value,             //указатель на значение свойства строки
														 char * s );              //строка символов


// Экспортный номер - 827
//-------------------------------------------------------------------------------
// Задать участок(компоненту) строки текста.
// Компонента строки должна иметь изменение хотя бы одного свойства
// по отношению к текущему фонту.
// Спецзнак задается отдельной компонентой.
// bitVector формируется с помощью логической операции | из набора определений
// [INVARIABLE ...NEW_LINE] см. ltdefine.h. (Unicode)
//-------------------------------------------------------------------------------
int       LIB_FUNC TextLineW( unsigned int   bitVector,//свойства строки, которые задаются вкл.-выкл.
														 int   tip,               //тип свойства строки, которое задается значением
														 void *value,             //указатель на значение свойства строки
														 LPWSTR s );              //строка символов

#ifdef _UNICODE
#define TextLineT  TextLineW
#else
#define TextLineT  TextLine
#endif // !UNICODE


// Экспортный номер - 283
//-------------------------------------------------------------------------------
// задать выравнивание строки текста
//---------------------------------------------------------------------------
int  LIB_FUNC ksSetTextLineAlign( unsigned char align ); // стиль строки текста

// Экспортный номер - 85
//----------------------------------------------------------------------------
// Ввод одной строки текста.
// bitVector формируется с помощью логической операции |. Поддерживаются
// определения:  ITALIC_ON ( включить наклон ),BOLD_ON (включить толщину),
// UNDERLINE_ON (включить подчеркивание). См. ltdefine.h.
// Если необходимо задать дробь, отклонение, спецзнак  использовать
// алгоритм 4-й версии:
// отклонение - $ верхнее отклонение ; нижнее отклонение $
// дробь      - $d числитель ; знаменатель $
// спецзнак   - &nn номер спецсимвола 0 - 99
//----------------------------------------------------------------------------
reference LIB_FUNC Text( double x, double y,     //точка привязки текста
												 double ang,             //угол наклона текста
												 double hStr,            //высота текста
												 double ksuStr,          //сужение текста
												 unsigned int bitVector, //свойства строки, которые задаются вкл.-выкл.
                         char *s );              //строка символов


// Экспортный номер - 828
//----------------------------------------------------------------------------
// Ввод одной строки текста.
// bitVector формируется с помощью логической операции |. Поддерживаются
// определения:  ITALIC_ON ( включить наклон ),BOLD_ON (включить толщину),
// UNDERLINE_ON (включить подчеркивание). См. ltdefine.h.
// Если необходимо задать дробь, отклонение, спецзнак  использовать
// алгоритм 4-й версии:
// отклонение - $ верхнее отклонение ; нижнее отклонение $
// дробь      - $d числитель ; знаменатель $
// спецзнак   - &nn номер спецсимвола 0 - 99 (Unicode)
//----------------------------------------------------------------------------
reference LIB_FUNC TextW( double x, double y,      //точка привязки текста
												  double ang,              //угол наклона текста
												  double hStr,             //высота текста
												  double ksuStr,           //сужение текста
												  unsigned int bitVector,  //свойства строки, которые задаются вкл.-выкл.
                          LPWSTR s );              //строка символов


#ifdef _UNICODE
#define TextT  TextW
#else
#define TextT  Text
#endif // !UNICODE


// Экспортный номер - 750
//----------------------------------------------------------------------------
// Создать многострочный текст по структуре параметров
// align - выравнивание текста - выравнивание 0 - слева, 1 - по центру,2 - справа, 3 - на всю ширину
// align - -1 установить выравнивание как у стиля текста
//----------------------------------------------------------------------------
reference LIB_FUNC ksTextEx( TextParam * txtParam, int align );


// Экспортный номер - 396
//--------------------------------------------------------------------------
//  преобразовать текст в кривые
//  функция возвращает временную группу кривых, которые описывают текст
//--------------------------------------------------------------------------
reference LIB_FUNC  ksConvertTextToCurve( reference text );

// Экспортный номер - 42
//-------------------------------------------------------------------------------
//  Открывает контур.
//  Составной объект. Объекты , вводимые между орераторами Contour и EndObj,
//  принадлежат контуру.
//  В контуре могут лежать отрезки, дуги, окружность  превращается в дугу, сплайны
//  Конечная точка предыдущего звена должна совпадать с  начальной точкой
//  последующего звена. EndObj возвращает указатель на контур.
//-------------------------------------------------------------------------------
int LIB_FUNC Contour( unsigned short style );  //стиль отрисовки

// Экспортный номер - 43
//--------------------------------------------------------------------------------
//  создает новый макроэлемент.
//  Составной объект. Объекты вида, вводимые между орераторами Macro и EndObj,
//  принадлежат макроэлементу.  EndObj возвращает указатель на макроэлемент.
//--------------------------------------------------------------------------------
int LIB_FUNC Macro( unsigned char type );  //0- в текущий слой, 1- многослойный макро

// Экспортный номер - 195
//---------------------------------------------------------------------------
// открыть макрообъект для редактирования
// в этом режиме можно добавлять в macro новые объекты вида,
// использовать функцию FindObj
// режим закрывается функцией EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksOpenMacro( reference macro ); 

// Экспортный номер - 44
//--------------------------------------------------------------------------------
//  Закрыть составной объект.  Возвращает указатель на составной объект.
//--------------------------------------------------------------------------------
reference LIB_FUNC EndObj();


// Экспортный номер - 264
//------------------------------------------------------------------------------
// По точке и временной группе или только по точке и
// текущему виду вернуть временную группу контуров, охватывающих эту точку (для штриховки).
// Функция возвращает  указатель на временную группу контуров или 0, если контуров не
// нашлось или в случае ошибки
// ---
reference LIB_FUNC ksMakeEncloseContours( reference gr,         //временная группа или 0, если нужны контура в виде
                                          double x, double y ); //точка внутри охватываемых контуров
// Экспортный номер - 965
//------------------------------------------------------------------------------
// По точке и временной группе или только по точке и
// текущему виду вернуть временную группу контуров, охватывающих эту точку (для штриховки).
// Функция возвращает  указатель на временную группу контуров или 0, если контуров не
// нашлось или в случае ошибки
// forHatch == 1 - Cоздании контуров для штриховки используются объекты со стилем основная и утолшенная
//                 объекты других стилей не учитываются 
// ---
reference LIB_FUNC ksMakeEncloseContoursEx( reference gr,         //временная группа или 0, если нужны контура в виде
                                            double x, double y,   //точка внутри охватываемых контуров
                                            int forHatch );       // Создание контура для штриховки

// Экспортный номер - 47
//--------------------------------------------------------------------------------
//  Открывает штриховку.
//  Составной объект. Объекты вида, вводимые между орераторами Hatch и EndObj,
//  принадлежат штриховке и образуют границу штриховки.
//  EndObj возвращает указатель на штриховку.
//--------------------------------------------------------------------------------
int       LIB_FUNC Hatch( unsigned short style,   //стиль штриховки
													double angle,           //угол штриховки в гр.
													double step,            //шаг штриховки
													double width,           //ширина полосы штрихования вдоль границы штриховки
													double x0, double y0 ); //начальная точка штриховки

// Экспортный номер - 276
//--------------------------------------------------------------------------------
//  Открывает штриховку.
//  Составной объект. Объекты вида, вводимые между орераторами HatchEx и EndObj,
//  принадлежат штриховке и образуют границу штриховки.
//  EndObj возвращает указатель на штриховку.
//--------------------------------------------------------------------------------
int LIB_FUNC HatchEx( unsigned short style,     //стиль штриховки
                      double angle,             //угол штриховки в гр.
										  double step,              //шаг штриховки
                      double width,             //ширина полосы штрихования вдоль границы штриховки
											double x0,   double y0,   //начальная точка штриховки
                      unsigned long color,      //цвет FREE_COLOR (0xff000000l)
                      unsigned char sheetAng ); ////0 -   угол собственный ( накатка ) 1 -угол листовой ( обычная штриховка)


// Экспортный номер - 211
//--------------------------------------------------------------------------------
//  Открывает фоновую заливку цветом
//  Составной объект. Объекты вида, вводимые между операторами ksColouring и EndObj,
//  принадлежат заливке и образуют границу залики.
//  EndObj возвращает указатель на заливку.
//  Если color = -1 - признак, что заливка осуществляется цветом фона рабочено окна
//--------------------------------------------------------------------------------
int       LIB_FUNC ksColouring( unsigned long color );

// Экспортный номер - 752
// 21.09.2004
//--------------------------------------------------------------------------------
//  Создает фоновую заливку цветом
//  Объекты из группы group образуют границу заливки
//  Возвращает указатель на заливку.
//  Если color = -1 - признак, что заливка осуществляется цветом фона рабочено окна
//--------------------------------------------------------------------------------
reference LIB_FUNC ksColouringEx( unsigned long color, reference group );

// Экспортный номер - 265
//------------------------------------------------------------------------------
//  Создать штриховку по структуре параметров
// ---
reference LIB_FUNC ksHatch( HatchParam * par );

// Экспортный номер - 276
//------------------------------------------------------------------------------
//  Создать штриховку по структуре параметров
// ---
reference LIB_FUNC ksHatchEx( HatchParamEx * par );

// Экспортный номер - 395
//------------------------------------------------------------------------------
// устаревшая функция 14.09.2001
// Функция возвращает копию границы штриховки или заливки во временной группе
// ---
reference LIB_FUNC ksDuplicateBoundaries( reference  p ); //указатель на штриховку или заливку

// Экспортный номер - 452
//------------------------------------------------------------------------------
// Функция возвращает копию границы штриховки или заливки во временной группе
// p - указатель на штриховку или заливку
// systemCoord - 1 - в системе координат листа, 0 - в системе координат текущего вида 
// ---
reference LIB_FUNC ksDuplicateBoundariesEx( reference p, unsigned char systemCoord );


// Экспортный номер - 50
//--------------------------------------------------------------------------------
//  Ввод  точки  для построения Bezier-сплайна.
//--------------------------------------------------------------------------------
int       LIB_FUNC BezierPoint( BezierPointParam *par );  //структура параметров  узла  для  Bezier - кривой

// Экспортный номер - 145
//--------------------------------------------------------------------------------
//  Ввод  точки  для построения Nurbs-сплайна.
//--------------------------------------------------------------------------------
int       LIB_FUNC NurbsPoint( NurbsPointParam *par );

// Экспортный номер - 246
//------------------------------------------------------------------------------
//  Ввод  узла  для построения Nurbs сплайна.
// ---
int  LIB_FUNC ksNurbsKnot( double knot );

// Экспортный номер - 48
//--------------------------------------------------------------------------------
// Открывает объект Bezier-сплайн.
// Составной объект. Объекты BezierPoint, вводимые между операторами Bezier и
// EndObj, принадлежат сплайну. EndObj возвращает указатель на Bezier-сплайн.
//--------------------------------------------------------------------------------
int       LIB_FUNC Bezier( unsigned char closed,  //тип замыкания сплайна 0 - незамкнутый 1 - замкнутый
													 unsigned short style );  //стиль отрисовки сплайна

// Экспортный номер - 306
//--------------------------------------------------------------------------
// Создать  сплайн по массиву Bezier-точек. Возвращается указатель на Bezier сплайн.
//--------------------------------------------------------------------------
reference LIB_FUNC _Bezier( BezierPointParam *par,  //массив точек, определяющих сплайн
														int countPoints,        //количество точек в массиве
														unsigned char closed,   //тип замыкания сплайна 0 - незамкнутый 1 - замкнутый
														unsigned short style );   //стиль отрисовки сплайна
// Экспортный номер - 144
//--------------------------------------------------------------------------------
// Открывает объект Nurbs-сплайн.
// Составной объект. Объекты NurbsPoint, вводимые между операторами Nurbs и
// EndObj, принадлежат сплайнeу.  EndObj возвращает указатель на Nurbs-сплайн.
//--------------------------------------------------------------------------------
int       LIB_FUNC Nurbs ( unsigned char degree,    //степень сплайна > 2 && < 9
                           unsigned char close,     //тип замыкания сплайна 0 - незамкнутый 1 - замкнутый
                           unsigned short style );    //стиль отрисовки сплайна

// Экспортный номер - 169
//-------------------------------------------------------------------------------------------------
//  Ввод в модель конического сечения
//  Это может быть дуга окружности, дуга эллипса, nurbs
//-------------------------------------------------------------------------------------------------
reference  LIB_FUNC ksConicArc( ConicArcParam * par ); //параметры конического сечения

// Экспортный номер - 400
//------------------------------------------------------------------------------
// создать объект "обозначение центра"
// ---
reference LIB_FUNC  ksCentreMarker( CentreParam  * par );

// Экспортный номер - 401
//------------------------------------------------------------------------------
// создать объект "прямоугольник"
// ---
reference LIB_FUNC  ksRectangle( RectangleParam * par,  //параметры объекта
                                 unsigned char centre );//признак построения осей 0 - нет осей 1- спецзнак, 2- горизонтальная ось 3- обе оси

// Экспортный номер - 402
//------------------------------------------------------------------------------
// создать объект "правильный многоугольник"
// ---
reference LIB_FUNC  ksRegularPolygon( RegularPolygonParam * par, //параметры объекта
                                      unsigned char centre );    //признак построения осей 0 - нет осей 1- спецзнак, 2- горизонтальная ось 3- обе оси

// Экспортный номер - 411
//------------------------------------------------------------------------------
// Вставить растровый объект
// ---
reference LIB_FUNC  ksInsertRaster( RasterParam *par );


// Экспортный номер - 829
//------------------------------------------------------------------------------
// Вставить растровый объект (Unicode)
// ---
reference LIB_FUNC  ksInsertRasterW( RasterParamW *par );

#ifdef _UNICODE
#define ksInsertRasterT  ksInsertRasterW
#else
#define ksInsertRasterT  ksInsertRaster
#endif // !UNICODE


// Экспортный номер - 148
//--------------------------------------------------------------------------
//  Открывает  полилинию.
//  Составной объект. Объекты Point, вводимые между операторами ksPolyline
//  и EndObj, принадлежат полилинии. EndObj возвращает указатель на полилинию.
//--------------------------------------------------------------------------
int       LIB_FUNC ksPolyline( unsigned short style );     //стиль отрисовки сплайна

// Экспортный номер - 323
//--------------------------------------------------------------------------
// Создать  полилинию по структуре полилинии  Возвращается указатель на полилинию.
//--------------------------------------------------------------------------
reference LIB_FUNC _ksPolyline( PolylineParam  *par );

// Экспортный номер - 454
//--------------------------------------------------------------------------
// Создать полилинию по структуре параметров
//--------------------------------------------------------------------------
reference LIB_FUNC ksPolylineEx( PolylineParamEx * par );

// Экспортный номер - 392
//------------------------------------------------------------------------------
//  Проверить замкнута кривая или нет
//  Функция возвращает -1 в случае неудачи, 0  - кривая разомкнута,  1 - кривая замкнута
// ---
int LIB_FUNC ksIsCurveClosed( reference  p );//указатель на кривую

// Экспортный номер - 135
//--------------------------------------------------------------------------------
//  Открывает таблицу.
//  Составной объект. Объекты, вводимые между операторами Table и EndObj
//  принадлежат таблице. Допустимые объекты - отрезки, тексты. Отрезки должны быть
//  вертикальными и горизонтальными.
//  Допустимые стили линии для отрезков таблицы:  1-основная, 2-тонкая,
//  7-утолщенная, 0-невидимая
//  EndObj возвращает указатель на таблицу.
//--------------------------------------------------------------------------------
int       LIB_FUNC Table( );

// Экспортный номер - 183
//---------------------------------------------------------------------------
//открыть составной  объект - таблицу для редактирования
//---------------------------------------------------------------------------
int  LIB_FUNC ksOpenTable( reference table );

// Экспортный номер - 192
//---------------------------------------------------------------------------
// Перестроить виртуальную сетку таблицы                  ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования           ksRebuildTableVirtualGrid(..);
// таблицы или допуска формы                              EndObj();
// Таблица работает с виртуальной сеткой - регулярная таблица, наложенная на редактируемую
// таблицу, отображающая все ячейки. Если редактируемая таблица регулярная, то ее виртуальная
// сетка полностью совпадает с таблицей.
// Нумерация ячеек начинается с левого верхнего угла и с единицы по строкам.
// Перестраивать сетку нужно после объединения или разделения ячеек
//---------------------------------------------------------------------------
int LIB_FUNC ksRebuildTableVirtualGrid( );

// Экспортный номер - 193
//---------------------------------------------------------------------------
// Выдать  количество ячеек в таблице
// ( для виртуальной сетки )                              ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования           ksGetTableItemsCount(..);
// таблицы или допуска формы                              EndObj();
//---------------------------------------------------------------------------
int LIB_FUNC ksGetTableItemsCount( unsigned char type );//0-общее число ячеек ,1-число ячеек в строке,2-число ячеек в колонке

// Экспортный номер - 186
//---------------------------------------------------------------------------
// Функция выдает текст ячейки, и смещается на следующую ячейку
// Если не определен индекс ячейки с помощью функции ColumnNumber,  начинает с первой
// ячейки.
// Возвращает указатель на динамический массив  строк текста - TEXT_LINE_ARR
// или 0, когда все графы пройдены или в случае ошибки         ksOpenTable(..);
// если  numb != NULL -возвращаем номер графы                  ksGetTableColumnText(..);
// Функция используется  в режиме редактирования таблицы       EndObj();
// Нумерация начинается с единицы
//---------------------------------------------------------------------------
int  LIB_FUNC ksGetTableColumnText( unsigned int *numb, TextParam *par);

// Экспортный номер - 237
//---------------------------------------------------------------------------
// Функция заменяет текст ячейки таблицы,                      ksOpenTable(..);
// Возвращает 1 в случае успеха и 0 в случае неудачи           ksSetTableColumnText(..);
// Функция используется  в режиме редактирования таблицы       EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksSetTableColumnText( unsigned int numb, TextParam *par);

// Экспортный номер - 187
//---------------------------------------------------------------------------
// очистить ячейку таблицы или допуска формы
// если numb = 0  очищаем всю таблицу
// нумерация начинается с 1                               ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования  таблицы  ksClearTableColumnText(..);
// или допуска формы                                      EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksClearTableColumnText( unsigned int numb );

// Экспортный номер - 188
//---------------------------------------------------------------------------
// объединить две ячейки таблицы, если они имеют общее ребро
// нумерация начинается с 1                               ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования           ksCombineTwoTableItems(..);
// таблицы или допуска формы                              EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksCombineTwoTableItems( unsigned int index1,    //индекс первой ячейки
                                      unsigned int index2 );  //индекс второй ячейки

// Экспортный номер - 189
//---------------------------------------------------------------------------
// разделить ячейку таблицы,
// нумерация начинается с 1                               ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования           ksDivideTableItem(..);
// таблицы или допуска формы                              EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksDivideTableItem( unsigned int index,      //индекс ячейки
                                 unsigned char vertical,  //1 - вертикально 0 -горизонтально
                                 unsigned short style );  //стиль линии 0-невидимая, 1-основная, 2-тонкая,7-утолщенная

// Экспортный номер - 190
//---------------------------------------------------------------------------
// изменить стиль ребра таблицы
// нумерация начинается с 1                               ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования           ksSetTableBorderStyle(..);
// таблицы или допуска формы                              EndObj();
// возвращает 1 - успех 0 - неудача
//---------------------------------------------------------------------------
int  LIB_FUNC ksSetTableBorderStyle( unsigned int index,      //индекс ячейки
                                     unsigned char typeBorder,//тип ребра 0-левое,1-правое,2-верхнеее,3-нижнее
                                     unsigned short style  ); //стиль линии 0-невидимая, 1-основная, 2-тонкая,7-утолщенная

// Экспортный номер - 191
//---------------------------------------------------------------------------
// выдать  стиль ребра таблицы
// нумерация начинается с 1                               ksOpenTable() или ksOpenTolerance();
// Функция используется в режиме редактирования           ksGetTableBorderStyle(..);
// таблицы или допуска формы                              EndObj();
// возвращает стиль ячейки или -1 в случае ошибки
//---------------------------------------------------------------------------
int  LIB_FUNC ksGetTableBorderStyle( unsigned int index,        //индекс ячейки
                                     unsigned char typeBorder );//тип ребра 0-левое,1-правое,2-верхнеее,3-нижнее

// Экспортный номер - 308
//-------------------------------------------------------------------------------
//  Создать объект "линейный размер".
//  Возвращается указатель на объект "линейный размер".
//-------------------------------------------------------------------------------
reference  LIB_FUNC LinDimension( LDimParam *linPar );//параметры линейного размера

// Экспортный номер - 404
//-------------------------------------------------------------------------------
//  Создать объект "линейный размер с обрывом".
//  Возвращается указатель на объект "линейный размер с обрывом".
//-------------------------------------------------------------------------------
reference  LIB_FUNC LinBreakDimension( LBreakDimParam *linPar );

// Экспортный номер - 309
//-------------------------------------------------------------------------------
//  Создать объект "диаметральный размер".
//  Возвращается указатель на объект "диаметральный размер".
//-------------------------------------------------------------------------------
reference  LIB_FUNC DiamDimension( RDimParam *linPar ); //параметры диаметрального размера

// Экспортный номер - 310
//-------------------------------------------------------------------------------
//  Создать объект "радиальный размер".
//  Возвращается указатель на объект "радиальный размер".
//-------------------------------------------------------------------------------
reference  LIB_FUNC RadDimension( RDimParam *linPar );  //параметры радиального размера

// Экспортный номер - 311
//-------------------------------------------------------------------------------
//  Создать объект "радиальный размер с изломом".
//  Возвращается указатель на объект "радиальный размер с изломом".
//-------------------------------------------------------------------------------
reference  LIB_FUNC RadBreakDimension( RBreakDimParam *linPar );  //параметры радиального размера с изломом

// Экспортный номер - 312
//-------------------------------------------------------------------------------
//  Создать объект "угловой размер".
//  Возвращается указатель на объект "угловой размер".
//-------------------------------------------------------------------------------
reference  LIB_FUNC AngDimension( ADimParam *angPar );//параметры углового размера

// Экспортный номер - 405
//-------------------------------------------------------------------------------
//  Создать объект "угловой размер с обрывом".
//  Возвращается указатель на объект "угловой размер с обрывом".
//-------------------------------------------------------------------------------
reference  LIB_FUNC AngBreakDimension( ABreakDimParam *angPar );


// Экспортный номер - 431
//-------------------------------------------------------------------------------
//  Создать объект "размер высоты".
//  Возвращается указатель на объект "размер высоты".
//-------------------------------------------------------------------------------
reference  LIB_FUNC ksOrdinatedDimension( OrdinatedDimParam *ordPar );


// Экспортный номер - 314
//-------------------------------------------------------------------------------
//  Создать объект "шероховатость поверхности".
//  Возвращается указатель на объект "шероховатость поверхности".
//-------------------------------------------------------------------------------
reference  LIB_FUNC Rough( RoughParam *roughPar );    //параметры шероховатости

// Экспортный номер - 315
//-------------------------------------------------------------------------------
//  Создать объект "линия выноски".
//  Возвращается указатель на объект "линия выноски".
//-------------------------------------------------------------------------------
reference  LIB_FUNC Leader( LeaderParam *leaderPar );  //параметры линии выноски

// Экспортный номер - 316
//-------------------------------------------------------------------------------
//  Создать объект "позиционная линия выноски".
//  Возвращается указатель на объект "позиционная линия выноски".
//-------------------------------------------------------------------------------
reference  LIB_FUNC PositionLeader( PosLeaderParam *leaderPar ); //параметры позиционной линии выноски

// Экспортный номер - 317
//-------------------------------------------------------------------------------
//  Создать объект "линии выноски для обозначения клеймения".
//  Возвращается указатель на объект "линии выноски для обозначения клеймения".
//-------------------------------------------------------------------------------
reference  LIB_FUNC BrandLeader( BrandLeaderParam *leaderPar ); //параметры линии выноски для обозначения клеймения

// Экспортный номер - 318
//-------------------------------------------------------------------------------
//  Создать объект "линии выноски для обозначения маркирования".
//  Возвращается указатель на объект "линии выноски для обозначения маркирования".
//-------------------------------------------------------------------------------
reference  LIB_FUNC MarkerLeader( MarkerLeaderParam *leaderPar ); //параметры линии выноски для обозначения маркирования

// Экспортный номер - 953
//-------------------------------------------------------------------------------
//  Создать объект обозначение изменения.
//  Возвращается указатель на объект "обозначение изменения".
//-------------------------------------------------------------------------------
reference  LIB_FUNC ChangeLeader( ChangeLeaderParam *leaderPar ); //параметры обозначение изменения

// Экспортный номер - 319
//-------------------------------------------------------------------------------
//  Создать объект "обозначение базы".
//  Возвращается указатель на объект "обозначение базы".
//-------------------------------------------------------------------------------
reference  LIB_FUNC Base( BaseParam *par );//параметры обозначения базы

// Экспортный номер - 832
//-------------------------------------------------------------------------------
//  Создать объект "обозначение базы".
//  Возвращается указатель на объект "обозначение базы".
//-------------------------------------------------------------------------------
reference  LIB_FUNC BaseW( BaseParamW *par );//параметры обозначения базы

#ifdef _UNICODE
#define BaseT  BaseW
#else
#define BaseT  Base
#endif // !UNICODE


// Экспортный номер - 320
//-------------------------------------------------------------------------------
//  Создать объект "линия разреза/сечения".
//  Возвращается указатель на объект "линия разреза/сечения".
//-------------------------------------------------------------------------------
reference  LIB_FUNC CutLine( CutLineParam *par ); //параметры линии разреза/сечения

// Экспортный номер - 832
//-------------------------------------------------------------------------------
//  Создать объект "линия разреза/сечения".
//  Возвращается указатель на объект "линия разреза/сечения". (Unicode)
//-------------------------------------------------------------------------------
reference  LIB_FUNC CutLineW( CutLineParamW *par ); //параметры линии разреза/сечения

#ifdef _UNICODE
#define CutLineT  CutLineW
#else
#define CutLineT  CutLine
#endif // !UNICODE


// Экспортный номер - 321
//-------------------------------------------------------------------------------
//  Создать объект "стрелка вида".
//  Возвращается указатель на объект "стрелка вида".
//-------------------------------------------------------------------------------
reference  LIB_FUNC ViewPointer( ViewPointerParam *par ); //параметры стрелки вида

// Экспортный номер - 834
//-------------------------------------------------------------------------------
//  Создать объект "стрелка вида".
//  Возвращается указатель на объект "стрелка вида". (Unicode)
//-------------------------------------------------------------------------------
reference  LIB_FUNC ViewPointerW( ViewPointerParamW *par ); //параметры стрелки вида

#ifdef _UNICODE
#define ViewPointerT  ViewPointerW
#else
#define ViewPointerT  ViewPointer
#endif // !UNICODE

// Экспортный номер - 140
//--------------------------------------------------------------------------------
//  12.1.2001 устаревшая функция со временем будет убрана
//  Открыть составной  объект "допуск формы".
//  Опрераторы    ColumnNumber  и TextLine, вводимые между операторами
//  Tolerance  и EndObj, принадлежат допуску формы.
//--------------------------------------------------------------------------------
int        LIB_FUNC Tolerance( ToleranceParam *par ); //параметры допуска формы

// Экспортный номер - 270
//--------------------------------------------------------------------------------
//  Открыть составной  объект "допуск формы".
//  Опрераторы    ColumnNumber  и TextLine, вводимые между операторами
//  ksTolerance  и EndObj, принадлежат допуску формы.
//  ColumnNumber определяет номер ячейки, куда помещать текст.
//  Вначале считается, что допуск формы имеет таблицу из 10 колонок и
//  10 строк. Нумерация идет слева направо и сверху вниз
//  1   2  3  4  5  6  7  8  9 10
//  11 12 13 14 15 16 17 18 19 20
//  21 22 23 24 25 26 27 28 29 30
//  .............................
//  91 92 93 94 95 96 97 98 99 100
//  При завершении создания объекта таблица форматируется и лишние ячейки
//  удаляются. EndObj возвращает указатель на допуск формы.
//--------------------------------------------------------------------------------
int LIB_FUNC ksTolerance( ksTolerancePar *par );

// Экспортный номер - 184
//---------------------------------------------------------------------------
//открыть составной  объект - допуск формы для редактирования
//---------------------------------------------------------------------------
int  LIB_FUNC ksOpenTolerance( reference tolerance );

// Экспортный номер - 185
//---------------------------------------------------------------------------
// Функция выдает текст ячейки, и смещается на следующую ячейку
// Если не определен индекс ячейки с помощю функции ColumnNumber,  начинает с первой
// ячейки.
// Возвращает 1 в случае успеха
// или 0, когда все графы пройдены или в случае ошибки
// после использования массив par->pTextItem желательно удалить      ksOpenTolerance(..)
// если  numb != NULL -возвращаем номер графы                        ksGetToleranceColumnText(..)
// Функция используется  в режиме редактирования допуска формы       EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksGetToleranceColumnText( unsigned int *numb, TextLineParam *par );

// Экспортный номер - 236
//---------------------------------------------------------------------------
// Функция заменяет текст ячейки допуска формы                       ksOpenTolerance(..)
// Возвращает 1 в случае успеха и 0 в случае неудачи                 ksSetToleranceColumnText(..)
// Функция используется  в режиме редактирования допуска формы       EndObj();
//---------------------------------------------------------------------------
int  LIB_FUNC ksSetToleranceColumnText( unsigned int numb,     //номер ячейки
                                        TextLineParam *par );  //параметры строки текста

// Экспортный номер - 214
//---------------------------------------------------------------------------
//  Для объекта "допуск формы" получить        3..4..5
//  координаты точки на таблице                :     :
//  согласно указанному типу.                  2     6
//  Функция возвращает 1 в случае успеха       :     :
//  0 - в случае неудачи                       1..8..7
//---------------------------------------------------------------------------
int  LIB_FUNC ksGetPointOnToleranceTable( reference tolerance,         // указатель на допуск формы
                                          unsigned char entry,         // тип точки на таблице допуска формы
                                          MathPointParam * point );    // координаты точки

// Экспортный номер - 288
//------------------------------------------------------------------------------
// Ввод параметра для построения Nurbs сплайна кусочно-степенным способом.
// ---
int  LIB_FUNC ksAddPowerForm( double x, double y );

// Экспортный номер - 289
//------------------------------------------------------------------------------
// Создание части Nurbs сплайна кусочно-степенным способом.
// ---
int  LIB_FUNC ksCreatePowerArc();

// Экспортный номер - 290
//------------------------------------------------------------------------------
// Усечь Nurbs сплайн от tMin до tMax
// ---
int  LIB_FUNC ksTrimNurbs( reference pObj, double tMin, double tMax );

// Экспортный номер - 291
//------------------------------------------------------------------------------
// Выдать имя параметрической переменной размера
// dimObj  - указатель на размер
// varName - имя переменной, size - размер буфера выделенного под имя переменной
// ---
int LIB_FUNC ksGetDimensionVariableName( reference dimObj,
                                         char * varName, int size );

// Экспортный номер - 835
//------------------------------------------------------------------------------
// Выдать имя параметрической переменной размера
// dimObj  - указатель на размер
// varName - имя переменной, size - размер буфера выделенного под имя переменной
// (Unicode)
// ---
int LIB_FUNC ksGetDimensionVariableNameW( reference dimObj,
                                          LPWSTR varName, int size );

#ifdef _UNICODE
#define ksGetDimensionVariableNameT  ksGetDimensionVariableNameW
#else
#define ksGetDimensionVariableNameT  ksGetDimensionVariableName
#endif // !UNICODE


// Экспортный номер - 708
//-------------------------------------------------------------------------------------------------
//  Для текстового документа получить количество листов
//  txtDoc = 0 - для текущего текстового документа
//-------------------------------------------------------------------------------------------------
int LIB_FUNC ksGetTxtDocumentPagesCount( reference txtDoc );

// Экспортный номер - 717
//-------------------------------------------------------------------------------
// Создать объект  "Выносной элемент"
//-------------------------------------------------------------------------------
reference LIB_FUNC ksRemoteElement( RemoteElementParam * param ); 


// Экспортный номер - 966
//-------------------------------------------------------------------------------
// Создать объект  "Аннотационная полилиния" по структуре параметров
// ---
reference LIB_FUNC ksAnnPolylineEx( PolylineParamEx * par, unsigned char term1, unsigned char term2 );


// Экспортный номер - 967
//-------------------------------------------------------------------------------
// Создать объект  "Аннотационная дуга эллипса"
// ---
reference  LIB_FUNC ksAnnEllipseArc( EllipseArcParam * par, unsigned char term1, unsigned char term2  ); 


// Экспортный номер - 968
//-------------------------------------------------------------------------------
// Создать объект  "Аннотационная дуга эллипса" по параметрам
// ---
reference  LIB_FUNC ksAnnParEllipseArc( EllipseArcParam1 * par, unsigned char term1, unsigned char term2  );  


// Экспортный номер - 969
//-------------------------------------------------------------------------------
// Создать объект  "Аннотационная окружность"
// ---
reference  LIB_FUNC ksAnnCircle( double xc, double yc, double rad, unsigned short style ); 


// Экспортный номер - 970
//-------------------------------------------------------------------------------
// Создать объект  "Аннотационный эллипс"
// ---
reference  LIB_FUNC ksAnnEllipse( EllipseParam * par ); 


// Экспортный номер - 971
//-----------------------------------------------------------------------------
//  Открывает аннотационную полилинию.
//  Составной объект. Объекты Point, вводимые между операторами ksAnnPolyline
//  и EndObj, принадлежат аннотационной полилинии. EndObj возвращает указатель на полилинию.
// ---
int LIB_FUNC ksAnnPolyline( unsigned short style, unsigned char term1, unsigned char term2 );


// Экспортный номер - 750
//----------------------------------------------------------------------------
// Создать многострочный текст по структуре параметров
// align - выравнивание текста - выравнивание 0 - слева, 1 - по центру,2 - справа, 3 - на всю ширину
// align - -1 установить выравнивание как у стиля текста
//----------------------------------------------------------------------------
reference LIB_FUNC ksAnnTextEx( TextParam * txtParam, int align );


// Экспортный номер - 49
//-------------------------------------------------------------------------------
//  Создать объект "точка".
//  Возвращается указатель на объект "точка".
//-------------------------------------------------------------------------------
reference LIB_FUNC ksAnnPoint( double x, double y,     //координаты точки
                               unsigned short style ); //стиль отрисовки  точки
                                                       //0-точка,1 - крестик,2 -х-точка,3-квадрат,4-треугольник,5-окружность,6-звезда,7-перечеркнутый квадрат,8 - утолщенный плюс

//-----------------------------------------------------------------------------
// Получить идентификаторы терминальных символов для аннатационного объекта
// ---
int LIB_FUNC ksGetAnnObjTerminators( reference annObj, unsigned char * term1, unsigned char * term2 );  


//-----------------------------------------------------------------------------
// Получить стиль для объекта 2D документа
// Реализовано для кривых и эквидистанты
// Возвращает номер стиля кривой 
// ---
int LIB_FUNC ksGetObjectStyle( reference obj );
  

//-----------------------------------------------------------------------------
// Получить стиль для объекта 2D документа
// Реализовано для кривых и эквидистанты
// Возвращает 1 вслучае удачи
// ---
int LIB_FUNC ksSetObjectStyle( reference obj, unsigned int style );


} // extern "C"

#endif // __LT_MODEL_H