// Machine generated IDispatch wrapper class(es) created with ClassWizard

#include "stdafx.h"
#include "kapi7.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif



/////////////////////////////////////////////////////////////////////////////
// IKompasAPIObject properties

/////////////////////////////////////////////////////////////////////////////
// IKompasAPIObject operations

LPDISPATCH IKompasAPIObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasAPIObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IKompasAPIObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasAPIObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IApplication properties

/////////////////////////////////////////////////////////////////////////////
// IApplication operations

LPDISPATCH IApplication::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IApplication::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IApplication::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IApplication::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IApplication::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetDocuments()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IApplication::Quit()
{
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

LPDISPATCH IApplication::CreateProcessParam()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IApplication::StopCurrentProcess(BOOL PostMessage, LPDISPATCH PDoc)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PostMessage, PDoc);
}

LPDISPATCH IApplication::CreatePropertyManager(BOOL NewManager)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		NewManager);
	return result;
}

void IApplication::SetActiveDocument(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IApplication::GetActiveDocument()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetLibraryManager()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetKompasError()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetConverter(const VARIANT& Library)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Library);
	return result;
}

LPDISPATCH IApplication::GetCheckSum()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetProgressBarIndicator()
{
	LPDISPATCH result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IApplication::SetHideMessage(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IApplication::GetHideMessage()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IApplication::ExecuteKompasCommand(long CommandID, BOOL PostMessage)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CommandID, PostMessage);
	return result;
}

BOOL IApplication::IsKompasCommandEnable(long CommandID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CommandID);
	return result;
}

long IApplication::IsKompasCommandCheck(long CommandID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		CommandID);
	return result;
}

LPDISPATCH IApplication::GetSystemSettings()
{
	LPDISPATCH result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IApplication::GetApplicationName(BOOL FullName)
{
	CString result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		FullName);
	return result;
}

LPDISPATCH IApplication::GetMath2D()
{
	LPDISPATCH result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IApplication::GetPrintJob()
{
	LPDISPATCH result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IApplication::MessageBoxEx(LPCTSTR Text, LPCTSTR Caption, long Flags)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Text, Caption, Flags);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDocuments properties

/////////////////////////////////////////////////////////////////////////////
// IDocuments operations

LPDISPATCH IDocuments::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocuments::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDocuments::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDocuments::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDocuments::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDocuments::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocuments::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDocuments::Add(long Type, BOOL Visible)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, Visible);
	return result;
}

LPDISPATCH IDocuments::Open(LPCTSTR PathName, BOOL Visible, BOOL ReadOnly)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		PathName, Visible, ReadOnly);
	return result;
}

LPDISPATCH IDocuments::OpenEx(LPCTSTR PathName, BOOL Visible, BOOL ReadOnly, const VARIANT& LoadCombinationIndex)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		PathName, Visible, ReadOnly, &LoadCombinationIndex);
	return result;
}

VARIANT IDocuments::GetLoadCombinations(LPCTSTR PathName, long* CurrentIndex)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_PI4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		PathName, CurrentIndex);
	return result;
}

LPDISPATCH IDocuments::AddWithDefaultSettings(long Type, BOOL Visible)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, Visible);
	return result;
}

void IDocuments::SetDocumentSynchronize(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDocuments::GetDocumentSynchronize()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDocuments::GetRecoverMode()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDocuments::SetRecoverMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IDocuments::GetRecoverError()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDocuments::SetRecoverError(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IKompasCollection properties

/////////////////////////////////////////////////////////////////////////////
// IKompasCollection operations

LPDISPATCH IKompasCollection::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasCollection::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IKompasCollection::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasCollection::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IKompasCollection::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IKompasCollection::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasDocument properties

/////////////////////////////////////////////////////////////////////////////
// IKompasDocument operations

LPDISPATCH IKompasDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IKompasDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IKompasDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IKompasDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IKompasDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IKompasDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IKompasDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDocumentFrames properties

/////////////////////////////////////////////////////////////////////////////
// IDocumentFrames operations

LPDISPATCH IDocumentFrames::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocumentFrames::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDocumentFrames::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDocumentFrames::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDocumentFrames::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDocumentFrames::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocumentFrames::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDocumentFrame properties

/////////////////////////////////////////////////////////////////////////////
// IDocumentFrame operations

LPDISPATCH IDocumentFrame::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocumentFrame::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDocumentFrame::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDocumentFrame::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDocumentFrame::SetRegime(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDocumentFrame::GetRegime()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDocumentFrame::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDocumentFrame::GetActive()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString IDocumentFrame::GetCaption()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IDocumentFrame::Zoom(double X1, double Y1, double X2, double Y2)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X1, Y1, X2, Y2);
}

void IDocumentFrame::ZoomPrevNextOrAll(long Type)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Type);
}

void IDocumentFrame::ZoomScale(double X, double Y, double Scale)
{
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X, Y, Scale);
}

void IDocumentFrame::GetZoomScale(double* X, double* Y, double* Scale)
{
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 X, Y, Scale);
}

long IDocumentFrame::GetHWND()
{
	long result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void IDocumentFrame::SetGabaritModifying()
{
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IDocumentFrame::RefreshWindow()
{
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL IDocumentFrame::ConvertCoordinates(long Type, long LX, long LY, double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Type, LX, LY, X, Y, Z);
	return result;
}

BOOL IDocumentFrame::ExecuteKompasCommand(long CommandID, BOOL PostMessage)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CommandID, PostMessage);
	return result;
}

BOOL IDocumentFrame::IsKompasCommandEnable(long CommandID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CommandID);
	return result;
}

long IDocumentFrame::IsKompasCommandCheck(long CommandID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		CommandID);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDocumentSettings properties

/////////////////////////////////////////////////////////////////////////////
// IDocumentSettings operations

LPDISPATCH IDocumentSettings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocumentSettings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDocumentSettings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDocumentSettings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationDescriptions properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationDescriptions operations

LPDISPATCH ISpecificationDescriptions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescriptions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationDescriptions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationDescriptions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationDescriptions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationDescriptions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescriptions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISpecificationDescriptions::Add(LPCTSTR LayoutName, long StyleID, LPCTSTR SpcName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		LayoutName, StyleID, SpcName);
	return result;
}

LPDISPATCH ISpecificationDescriptions::GetDescription(LPCTSTR LayoutName, long StyleID)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		LayoutName, StyleID);
	return result;
}

LPDISPATCH ISpecificationDescriptions::GetActive()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationDescription properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationDescription operations

LPDISPATCH ISpecificationDescription::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescription::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationDescription::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationDescription::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationDescription::GetLayoutName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetLayoutName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long ISpecificationDescription::GetStyleID()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetStyleID(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString ISpecificationDescription::GetSpecificationDocumentName()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetSpecificationDocumentName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL ISpecificationDescription::GetActive()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationDescription::Update()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationDescription::Delete()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescription::GetSpecificationStyle()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescription::GetSpecificationTuning()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ISpecificationDescription::GetObjects()
{
	VARIANT result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescription::GetBaseObjects()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDescription::GetCommentObjects()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationDescription::GetShowOnSheet()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetShowOnSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationDescription::GetCurrentObject()
{
	LPDISPATCH result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetCurrentObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ISpecificationDescription::GetShowAllObjects()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetShowAllObjects(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString ISpecificationDescription::GetPerformanceName(long PerformanceIndex, long BlockIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		PerformanceIndex, BlockIndex);
	return result;
}

void ISpecificationDescription::SetPerformanceName(long PerformanceIndex, long BlockIndex, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 PerformanceIndex, BlockIndex, lpszNewValue);
}

BOOL ISpecificationDescription::GetDelegateMode()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationDescription::SetDelegateMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationStyle properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationStyle operations

LPDISPATCH ISpecificationStyle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationStyle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationStyle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationStyle::GetLayoutName1()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long ISpecificationStyle::GetStyleID1()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationStyle::GetLayoutName2()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long ISpecificationStyle::GetStyleID2()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationStyle::GetVariant()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationStyle::GetSectionOn()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetSpecificationTuning()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetFormat()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetAdditionalColumns()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetSections()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationStyle::GetAdditionalBlocks()
{
	LPDISPATCH result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationStyle::GetSortSectionDown()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationTuning properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationTuning operations

LPDISPATCH ISpecificationTuning::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationTuning::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationTuning::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationTuning::GetLinkType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetLinkType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ISpecificationTuning::GetCalculateZone()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetCalculateZone(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetCalculatePosition()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetCalculatePosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetShowSectionName()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetShowSectionName(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetDeleteGeometry()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDeleteGeometry(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetDisableEmptyString()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDisableEmptyString(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetDisableEmptyBlockString()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDisableEmptyBlockString(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetInsertNull()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetInsertNull(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetInsertDash()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetInsertDash(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetShowInfoByObjects()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetShowInfoByObjects(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetSupportPerformance()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetSupportPerformance(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetShowPerformanceFull()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetShowPerformanceFull(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetBlockOnNewPage()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetBlockOnNewPage(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetPositionUp()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetPositionUp(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetDrawBottomUp()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDrawBottomUp(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetUserTextStyle()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetUserTextStyle(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long ISpecificationTuning::GetPerformanceCount()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetPerformanceCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationTuning::GetBlockCount()
{
	long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationTuning::GetInitialPosition()
{
	long result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetInitialPosition(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString ISpecificationTuning::GetPredefinedTextFileName()
{
	CString result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetPredefinedTextFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

LPDISPATCH ISpecificationTuning::GetSectionTextStyleFirst()
{
	LPDISPATCH result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetSectionTextStyleNext()
{
	LPDISPATCH result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetObjectTextStyle()
{
	LPDISPATCH result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetSections()
{
	LPDISPATCH result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationTuning::GetUseAdditionalBlocks()
{
	BOOL result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetUseAdditionalBlocks(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationTuning::GetAdditionalBlocks()
{
	LPDISPATCH result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationTuning::GetShowAdditionalBlockName()
{
	BOOL result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetShowAdditionalBlockName(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetShowNestingBlockName()
{
	BOOL result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetShowNestingBlockName(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetShowPerformanceBlockName()
{
	BOOL result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetShowPerformanceBlockName(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationTuning::GetPerformanceBlockTextStyleFirst()
{
	LPDISPATCH result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetPerformanceBlockTextStyleNext()
{
	LPDISPATCH result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetAdditionalBlockTextStyleFirst()
{
	LPDISPATCH result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetAdditionalBlockTextStyleNext()
{
	LPDISPATCH result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetNestingBlockTextStyleFirst()
{
	LPDISPATCH result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuning::GetNestingBlockTextStyleNext()
{
	LPDISPATCH result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationTuning::GetDisableNestingBlockEmptyStrings()
{
	BOOL result;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDisableNestingBlockEmptyStrings(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetDisableAdditionalBlockEmptyStrings()
{
	BOOL result;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDisableAdditionalBlockEmptyStrings(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::Update()
{
	BOOL result;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationTuning::GetDeleteSpcObjectOnDeleteGeometry()
{
	BOOL result;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetDeleteSpcObjectOnDeleteGeometry(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuning::GetCopySpcObjectOnCopyGeometry()
{
	BOOL result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuning::SetCopySpcObjectOnCopyGeometry(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ITextStyle properties

/////////////////////////////////////////////////////////////////////////////
// ITextStyle operations

LPDISPATCH ITextStyle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextStyle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITextStyle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextStyle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ITextStyle::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long ITextStyle::GetNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double ITextStyle::GetStep()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetStep(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long ITextStyle::GetAlign()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetAlign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double ITextStyle::GetIndentedLine()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetIndentedLine(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetStepBeforeParagraph()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetStepBeforeParagraph(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetStepAfterParagraph()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetStepAfterParagraph(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetLeftEdge()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetLeftEdge(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetRightEdge()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetRightEdge(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ITextStyle::GetExtended()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetExtended(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long ITextStyle::GetLinesCount()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetLinesCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ITextStyle::GetEnableLine1()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetEnableLine1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double ITextStyle::GetHeight1()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetHeight1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetWidthFactor1()
{
	double result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetWidthFactor1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetStep1()
{
	double result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetStep1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ITextStyle::GetEnableLine2()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetEnableLine2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double ITextStyle::GetHeight2()
{
	double result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetHeight2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetWidthFactor2()
{
	double result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetWidthFactor2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetStep2()
{
	double result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetStep2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ITextStyle::GetEnableLine3()
{
	BOOL result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetEnableLine3(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double ITextStyle::GetHeight3()
{
	double result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetHeight3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetWidthFactor3()
{
	double result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetWidthFactor3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextStyle::GetStep3()
{
	double result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextStyle::SetStep3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ITextStyle::GetFont()
{
	LPDISPATCH result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextStyle::GetTabulators()
{
	LPDISPATCH result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITextFont properties

/////////////////////////////////////////////////////////////////////////////
// ITextFont operations

LPDISPATCH ITextFont::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextFont::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITextFont::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextFont::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ITextFont::GetFontName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITextFont::SetFontName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

double ITextFont::GetHeight()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextFont::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextFont::GetWidthFactor()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextFont::SetWidthFactor(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long ITextFont::GetColor()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextFont::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ITextFont::GetBold()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextFont::SetBold(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextFont::GetItalic()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextFont::SetItalic(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextFont::GetUnderline()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextFont::SetUnderline(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextFont::GetTextLineStep()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextFont::SetTextLineStep(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ITabulators properties

/////////////////////////////////////////////////////////////////////////////
// ITabulators operations

LPDISPATCH ITabulators::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITabulators::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITabulators::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITabulators::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ITabulators::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ITabulators::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITabulators::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITabulators::Add(long Position)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Position);
	return result;
}

BOOL ITabulators::Clear()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITabulator properties

/////////////////////////////////////////////////////////////////////////////
// ITabulator operations

LPDISPATCH ITabulator::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITabulator::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITabulator::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITabulator::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITabulator::GetPosition()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITabulator::SetPosition(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ITabulator::GetAlign()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITabulator::SetAlign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ITabulator::GetFilling()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITabulator::SetFilling(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationTuningSections properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationTuningSections operations

LPDISPATCH ISpecificationTuningSections::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuningSections::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationTuningSections::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationTuningSections::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationTuningSections::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationTuningSections::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuningSections::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationTuningSection properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationTuningSection operations

LPDISPATCH ISpecificationTuningSection::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationTuningSection::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationTuningSection::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationTuningSection::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationTuningSection::GetNumber()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationTuningSection::GetSubsectionOn()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetSubsectionOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuningSection::GetAttachGeometry()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetAttachGeometry(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuningSection::GetPutPosition()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetPutPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuningSection::GetSortObjects()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetSortObjects(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationTuningSection::GetFirstOnSheet()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetFirstOnSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short ISpecificationTuningSection::GetReserveStringCount()
{
	short result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetReserveStringCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH ISpecificationTuningSection::GetSubsections()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationTuningSection::GetUseAdditionalBlocks()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationTuningSection::SetUseAdditionalBlocks(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationTuningSection::GetAdditionalBlocks()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationSubsections properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationSubsections operations

LPDISPATCH ISpecificationSubsections::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSubsections::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationSubsections::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationSubsections::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationSubsections::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationSubsections::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSubsections::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISpecificationSubsections::Add(LPCTSTR Name, short Number)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Name, Number);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationSubsection properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationSubsection operations

LPDISPATCH ISpecificationSubsection::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSubsection::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationSubsection::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationSubsection::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationSubsection::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

short ISpecificationSubsection::GetNumber()
{
	short result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationSubsection::Change(LPCTSTR Name, short Number)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Number);
	return result;
}

BOOL ISpecificationSubsection::Delete()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockTunings properties

/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockTunings operations

LPDISPATCH IAdditionalBlockTunings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockTunings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockTunings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockTunings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAdditionalBlockTunings::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockTunings::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockTunings::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockTuning properties

/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockTuning operations

LPDISPATCH IAdditionalBlockTuning::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockTuning::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockTuning::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockTuning::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockTuning::GetNumber()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IAdditionalBlockTuning::GetDocumentName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAdditionalBlockTuning::SetDocumentName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL IAdditionalBlockTuning::GetUse()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAdditionalBlockTuning::SetUse(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAdditionalBlockTuning::GetFirstOnSheet()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAdditionalBlockTuning::SetFirstOnSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IAdditionalBlockTuning::GetSections()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockSectionTunings properties

/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockSectionTunings operations

LPDISPATCH IAdditionalBlockSectionTunings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockSectionTunings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockSectionTunings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockSectionTunings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAdditionalBlockSectionTunings::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockSectionTunings::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockSectionTunings::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockSectionTuning properties

/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockSectionTuning operations

LPDISPATCH IAdditionalBlockSectionTuning::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockSectionTuning::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockSectionTuning::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockSectionTuning::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockSectionTuning::GetNumber()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IAdditionalBlockSectionTuning::GetUse()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAdditionalBlockSectionTuning::SetUse(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISheetFormat properties

/////////////////////////////////////////////////////////////////////////////
// ISheetFormat operations

LPDISPATCH ISheetFormat::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetFormat::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetFormat::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetFormat::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetFormat::GetFormat()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetFormat::SetFormat(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetFormat::GetFormatMultiplicity()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetFormat::SetFormatMultiplicity(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ISheetFormat::GetVerticalOrientation()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetFormat::SetVerticalOrientation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double ISheetFormat::GetFormatWidth()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetFormat::SetFormatWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetFormat::GetFormatHeight()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetFormat::SetFormatHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnStyles properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnStyles operations

LPDISPATCH ISpecificationColumnStyles::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumnStyles::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyles::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyles::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationColumnStyles::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyles::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumnStyles::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnStyle properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnStyle operations

LPDISPATCH ISpecificationColumnStyle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumnStyle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationColumnStyle::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetColumnType()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetNumber()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationColumnStyle::GetEdit()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationColumnStyle::GetCalculateSum()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationColumnStyle::GetMultiplyToCount()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationColumnStyle::GetUseForSectionTitle()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationColumnStyle::GetTextDown()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetStampLinkID()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetValueType()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationColumnStyle::GetAttributeLibraryName()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetAttributeKey1()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetAttributeKey2()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetAttributeKey3()
{
	long result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnStyle::GetAttributeKey4()
{
	long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

double ISpecificationColumnStyle::GetMinValue()
{
	double result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double ISpecificationColumnStyle::GetMaxValue()
{
	double result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationColumnStyle::GetUseIn3D()
{
	BOOL result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationSectionStyles properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationSectionStyles operations

LPDISPATCH ISpecificationSectionStyles::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSectionStyles::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyles::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyles::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationSectionStyles::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyles::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSectionStyles::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationSectionStyle properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationSectionStyle operations

LPDISPATCH ISpecificationSectionStyle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSectionStyle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpecificationSectionStyle::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyle::GetNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyle::GetSortColumnType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyle::GetSortColumnNumber()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationSectionStyle::GetFillDataFromStamp()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ISpecificationSectionStyle::GetSortType()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSectionStyle::GetColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSectionStyle::GetAdditionalColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationSectionStyle::GetAdditionalBlocks()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockStyles properties

/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockStyles operations

LPDISPATCH IAdditionalBlockStyles::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockStyles::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockStyles::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockStyles::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAdditionalBlockStyles::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockStyles::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockStyles::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockStyle properties

/////////////////////////////////////////////////////////////////////////////
// IAdditionalBlockStyle operations

LPDISPATCH IAdditionalBlockStyle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAdditionalBlockStyle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockStyle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockStyle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IAdditionalBlockStyle::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IAdditionalBlockStyle::GetNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationBaseObjects properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationBaseObjects operations

LPDISPATCH ISpecificationBaseObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationBaseObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationBaseObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationBaseObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISpecificationBaseObjects::Add(long SectionNumb, double AttrNumb)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		SectionNumb, AttrNumb);
	return result;
}

VARIANT ISpecificationBaseObjects::GetSpecificationObjectsForGeom(const VARIANT& PGeom, BOOL Equal, long SectionNumb, double AttrNumb)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL VTS_I4 VTS_R8;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&PGeom, Equal, SectionNumb, AttrNumb);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationBaseObject properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationBaseObject operations

LPDISPATCH ISpecificationBaseObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationBaseObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObject::GetObjectType()
{
	long result;
	InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObject::GetSection()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObject::GetSubsection()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetSubsection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationBaseObject::GetAdditionalSection()
{
	long result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetAdditionalSection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationBaseObject::GetAdditionalBlock()
{
	long result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetAdditionalBlock(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationBaseObject::GetNestedSection()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetNestedSection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationBaseObject::GetNestedBlock()
{
	long result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetNestedBlock(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationBaseObject::GetBlockNumberByIndex(long Val)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

double ISpecificationBaseObject::GetUniqueNumber()
{
	double result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long ISpecificationBaseObject::GetState()
{
	long result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationBaseObject::GetFirstOnSheet()
{
	BOOL result;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetFirstOnSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationBaseObject::GetIncrementPosition()
{
	BOOL result;
	InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetIncrementPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationBaseObject::GetColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationBaseObject::GetAdditionalColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationBaseObject::GetAttachedDocuments()
{
	LPDISPATCH result;
	InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationBaseObject::Update()
{
	BOOL result;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationBaseObject::Delete()
{
	BOOL result;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationBaseObject::Edit()
{
	BOOL result;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationBaseObject::GetDraw()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetDraw(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationBaseObject::GetDrawPosition()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetDrawPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationBaseObject::GetPerformance()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetPerformance(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationBaseObject::GetCommentObjects()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ISpecificationBaseObject::GetDocuments()
{
	VARIANT result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

double ISpecificationBaseObject::GetAttributeNumber()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetAttributeNumber(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISpecificationBaseObject::GetSummaryCount(long ColumnTypeNumber, long BlockNumber)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		ColumnTypeNumber, BlockNumber);
	return result;
}

BOOL ISpecificationBaseObject::SetMaterial(LPCTSTR Material, double Density)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Material, Density);
	return result;
}

VARIANT ISpecificationBaseObject::GetGeometry()
{
	VARIANT result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetGeometry(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

BOOL ISpecificationBaseObject::IncludeGeometry(const VARIANT& PVal, BOOL FillText)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&PVal, FillText);
	return result;
}

BOOL ISpecificationBaseObject::ClearGeometry(BOOL ClearGeometry, BOOL ClearLeaders)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ClearGeometry, ClearLeaders);
	return result;
}

BOOL ISpecificationBaseObject::GetEditSourceObject()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationBaseObject::SetEditSourceObject(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationObject properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationObject operations

LPDISPATCH ISpecificationObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationObject::GetObjectType()
{
	long result;
	InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationObject::GetSection()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationObject::GetSubsection()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetSubsection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationObject::GetAdditionalSection()
{
	long result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetAdditionalSection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationObject::GetAdditionalBlock()
{
	long result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetAdditionalBlock(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationObject::GetNestedSection()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetNestedSection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationObject::GetNestedBlock()
{
	long result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetNestedBlock(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationObject::GetBlockNumberByIndex(long Val)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

double ISpecificationObject::GetUniqueNumber()
{
	double result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long ISpecificationObject::GetState()
{
	long result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationObject::GetFirstOnSheet()
{
	BOOL result;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetFirstOnSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationObject::GetIncrementPosition()
{
	BOOL result;
	InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationObject::SetIncrementPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationObject::GetColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationObject::GetAdditionalColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationObject::GetAttachedDocuments()
{
	LPDISPATCH result;
	InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationObject::Update()
{
	BOOL result;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationObject::Delete()
{
	BOOL result;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationObject::Edit()
{
	BOOL result;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumns properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumns operations

LPDISPATCH ISpecificationColumns::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumns::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationColumns::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumns::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationColumns::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationColumns::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumns::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISpecificationColumns::GetColumn(long ColumnType, long ColumnNumber, long BlockNumber)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		ColumnType, ColumnNumber, BlockNumber);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumn properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumn operations

LPDISPATCH ISpecificationColumn::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumn::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetColumnType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetColumnTypeNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetBlockNumber()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetNumber()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumn::GetValueType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumn::GetColumnItems()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

double ISpecificationColumn::GetAttributeNumber()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISpecificationColumn::SetAttributeNumber(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISpecificationColumn::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnItems properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnItems operations

LPDISPATCH ISpecificationColumnItems::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumnItems::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnItems::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnItems::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationColumnItems::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnItems::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumnItems::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnItem properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationColumnItem operations

LPDISPATCH ISpecificationColumnItem::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationColumnItem::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnItem::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnItem::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationColumnItem::GetValueType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

short ISpecificationColumnItem::GetKey()
{
	short result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void ISpecificationColumnItem::SetKey(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ISpecificationColumnItem::GetVisible()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationColumnItem::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

VARIANT ISpecificationColumnItem::GetValue()
{
	VARIANT result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISpecificationColumnItem::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IText properties

/////////////////////////////////////////////////////////////////////////////
// IText operations

LPDISPATCH IText::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IText::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IText::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IText::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IText::GetStyle()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IText::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

VARIANT IText::GetTextLines()
{
	VARIANT result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long IText::GetCount()
{
	long result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IText::GetTextLine(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

LPDISPATCH IText::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x7d5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IText::AddBefore(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

CString IText::GetStr()
{
	CString result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IText::SetStr(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL IText::Clear()
{
	BOOL result;
	InvokeHelper(0x7d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IText::AddTextLine(long Type, LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x7d9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, FileName);
	return result;
}

LPDISPATCH IText::AddTextLineBefore(long Type, long Index, LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x7da, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, Index, FileName);
	return result;
}

BOOL IText::Replace(LPCTSTR SrcText, LPCTSTR NewText, BOOL Case, BOOL WordOnly, BOOL ReplaceAll)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_BOOL VTS_BOOL VTS_BOOL;
	InvokeHelper(0x7db, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SrcText, NewText, Case, WordOnly, ReplaceAll);
	return result;
}

BOOL IText::Assign(LPDISPATCH Other)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7dc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Other);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITextLine properties

/////////////////////////////////////////////////////////////////////////////
// ITextLine operations

LPDISPATCH ITextLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITextLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextLine::GetStyle()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextLine::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

VARIANT ITextLine::GetTextItems()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long ITextLine::GetCount()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextLine::GetTextItem(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

LPDISPATCH ITextLine::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextLine::AddBefore(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

CString ITextLine::GetStr()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITextLine::SetStr(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL ITextLine::Clear()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

double ITextLine::GetStep()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextLine::SetStep(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long ITextLine::GetAlign()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextLine::SetAlign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double ITextLine::GetIndentedLine()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextLine::SetIndentedLine(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextLine::GetStepBeforeParagraph()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextLine::SetStepBeforeParagraph(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextLine::GetStepAfterParagraph()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextLine::SetStepAfterParagraph(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextLine::GetLeftEdge()
{
	double result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextLine::SetLeftEdge(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITextLine::GetRightEdge()
{
	double result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITextLine::SetRightEdge(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ITextLine::GetTabulators()
{
	LPDISPATCH result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITextLine::GetLevel()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextLine::SetLevel(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ITextLine::GetNumbering()
{
	long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextLine::SetNumbering(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ITextLine::Delete()
{
	BOOL result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ITextLine::GetTextLineType()
{
	long result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextLine::GetTextLineData()
{
	LPDISPATCH result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ITextLine::GetNewPage()
{
	BOOL result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextLine::SetNewPage(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextLine::Assign(LPDISPATCH Other)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Other);
	return result;
}

LPDISPATCH ITextLine::InsertHypertextReference(long TextItemIndex, LPDISPATCH Object, long Type, BOOL Brackets, long TextLineIndex, long Precision, double ProperyId)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH VTS_I4 VTS_BOOL VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		TextItemIndex, Object, Type, Brackets, TextLineIndex, Precision, ProperyId);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITextItem properties

/////////////////////////////////////////////////////////////////////////////
// ITextItem operations

LPDISPATCH ITextItem::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextItem::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITextItem::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextItem::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextItem::GetItemType()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextItem::SetItemType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString ITextItem::GetStr()
{
	CString result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITextItem::SetStr(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ITextItem::GetSymbolFontName()
{
	CString result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITextItem::SetSymbolFontName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long ITextItem::GetNumber()
{
	long result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextItem::SetNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ITextItem::GetSizeFactor()
{
	long result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITextItem::SetSizeFactor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ITextItem::GetNewLine()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextItem::SetNewLine(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextItem::Delete()
{
	BOOL result;
	InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITextItem::Update()
{
	BOOL result;
	InvokeHelper(0x7d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAttachedDocuments properties

/////////////////////////////////////////////////////////////////////////////
// IAttachedDocuments operations

LPDISPATCH IAttachedDocuments::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAttachedDocuments::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAttachedDocuments::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAttachedDocuments::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAttachedDocuments::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAttachedDocuments::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAttachedDocuments::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAttachedDocuments::Add(LPCTSTR Name, BOOL Transmit)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Name, Transmit);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAttachedDocument properties

/////////////////////////////////////////////////////////////////////////////
// IAttachedDocument operations

LPDISPATCH IAttachedDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAttachedDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAttachedDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAttachedDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IAttachedDocument::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IAttachedDocument::GetTransmit()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAttachedDocument::SetTransmit(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString IAttachedDocument::GetComment()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAttachedDocument::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL IAttachedDocument::Delete()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationCommentObjects properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationCommentObjects operations

LPDISPATCH ISpecificationCommentObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationCommentObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISpecificationCommentObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationCommentObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISpecificationCommentObjects::Add(long SectionNamb)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		SectionNamb);
	return result;
}

BOOL ISpecificationCommentObjects::Attach(LPDISPATCH PVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PVal);
	return result;
}

BOOL ISpecificationCommentObjects::Detach(LPDISPATCH PVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PVal);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationCommentObject properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationCommentObject operations

LPDISPATCH ISpecificationCommentObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationCommentObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetObjectType()
{
	long result;
	InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetSection()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetSubsection()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetSubsection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationCommentObject::GetAdditionalSection()
{
	long result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetAdditionalSection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationCommentObject::GetAdditionalBlock()
{
	long result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetAdditionalBlock(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationCommentObject::GetNestedSection()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetNestedSection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationCommentObject::GetNestedBlock()
{
	long result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetNestedBlock(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpecificationCommentObject::GetBlockNumberByIndex(long Val)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

double ISpecificationCommentObject::GetUniqueNumber()
{
	double result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetState()
{
	long result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationCommentObject::GetFirstOnSheet()
{
	BOOL result;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetFirstOnSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationCommentObject::GetIncrementPosition()
{
	BOOL result;
	InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetIncrementPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ISpecificationCommentObject::GetColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationCommentObject::GetAdditionalColumns()
{
	LPDISPATCH result;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationCommentObject::GetAttachedDocuments()
{
	LPDISPATCH result;
	InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationCommentObject::Update()
{
	BOOL result;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationCommentObject::Delete()
{
	BOOL result;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationCommentObject::Edit()
{
	BOOL result;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationCommentObject::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationCommentObject::GetBlockNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetBlockNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ISpecificationCommentObject::GetEditSourceObject()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationCommentObject::SetEditSourceObject(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ILayoutSheets properties

/////////////////////////////////////////////////////////////////////////////
// ILayoutSheets operations

LPDISPATCH ILayoutSheets::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayoutSheets::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayoutSheets::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayoutSheets::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILayoutSheets::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILayoutSheets::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayoutSheets::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILayoutSheets::GetItemByNumber(long Number)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Number);
	return result;
}

LPDISPATCH ILayoutSheets::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayoutSheet properties

/////////////////////////////////////////////////////////////////////////////
// ILayoutSheet operations

LPDISPATCH ILayoutSheet::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayoutSheet::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayoutSheet::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayoutSheet::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayoutSheet::GetFormat()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString ILayoutSheet::GetLayoutLibraryFileName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILayoutSheet::SetLayoutLibraryFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

double ILayoutSheet::GetLayoutStyleNumber()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILayoutSheet::SetLayoutStyleNumber(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ILayoutSheet::Update()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILayoutSheet::Delete()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayoutSheet::GetStamp()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IStamp properties

/////////////////////////////////////////////////////////////////////////////
// IStamp operations

LPDISPATCH IStamp::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStamp::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IStamp::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IStamp::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStamp::GetText(long Id)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Id);
	return result;
}

BOOL IStamp::Update()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IStamp::Clear(long Id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Id);
	return result;
}

long IStamp::GetNextColumnId(long Id)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Id);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IUserDataStoragesMng properties

/////////////////////////////////////////////////////////////////////////////
// IUserDataStoragesMng operations

LPDISPATCH IUserDataStoragesMng::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUserDataStoragesMng::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUserDataStoragesMng::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUserDataStoragesMng::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IUserDataStoragesMng::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IUserDataStoragesMng::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUserDataStoragesMng::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IUserDataStoragesMng::Add(LPDISPATCH Object)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Object);
	return result;
}

BOOL IUserDataStoragesMng::Delete(const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index);
	return result;
}

BOOL IUserDataStoragesMng::Clear()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IUserDataStorages properties

/////////////////////////////////////////////////////////////////////////////
// IUserDataStorages operations

LPDISPATCH IUserDataStorages::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUserDataStorages::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUserDataStorages::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUserDataStorages::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IUserDataStorages::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IUserDataStorages::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUserDataStorages::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IUserDataStorages::Add(LPCTSTR StorageName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		StorageName);
	return result;
}

BOOL IUserDataStorages::Delete(LPCTSTR Password, const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, &Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IUserDataStorage properties

/////////////////////////////////////////////////////////////////////////////
// IUserDataStorage operations

LPDISPATCH IUserDataStorage::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUserDataStorage::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUserDataStorage::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUserDataStorage::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IUserDataStorage::GetName(LPCTSTR Pass)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Pass);
	return result;
}

void IUserDataStorage::SetName(LPCTSTR Pass, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Pass, lpszNewValue);
}

BOOL IUserDataStorage::SetPassword(LPCTSTR OldPass, LPCTSTR NewPass)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OldPass, NewPass);
	return result;
}

long IUserDataStorage::GetVersion(LPCTSTR Pass)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Pass);
	return result;
}

void IUserDataStorage::SetVersion(LPCTSTR Pass, long nNewValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Pass, nNewValue);
}

CString IUserDataStorage::GetObject(const VARIANT& Index, VARIANT* Object, long* Numb)
{
	CString result;
	static BYTE parms[] =
		VTS_VARIANT VTS_PVARIANT VTS_PI4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		&Index, Object, Numb);
	return result;
}

long IUserDataStorage::SetObject(LPCTSTR Pass, const VARIANT& Index, const VARIANT& Object, LPCTSTR Comment)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Pass, &Index, &Object, Comment);
	return result;
}

long IUserDataStorage::AddObject(LPCTSTR Pass, const VARIANT& Object, LPCTSTR Comment)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Pass, &Object, Comment);
	return result;
}

BOOL IUserDataStorage::Delete(LPCTSTR Pass, const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Pass, &Index);
	return result;
}

BOOL IUserDataStorage::Clear(LPCTSTR Pass)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Pass);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProcessParam properties

/////////////////////////////////////////////////////////////////////////////
// IProcessParam operations

LPDISPATCH IProcessParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProcessParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProcessParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProcessParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetCaption(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProcessParam::GetCaption()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProcessParam::GetPropertyTabs()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetSpecToolbar(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IProcessParam::GetSpecToolbar()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetAutoReduce(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IProcessParam::GetAutoReduce()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetDefaultControlFix(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IProcessParam::GetDefaultControlFix()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IProcessParam::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetSpecToolbarEx(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IProcessParam::GetSpecToolbarEx()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProcessParam::SetBmpBeginId(long Size, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Size, nNewValue);
}

long IProcessParam::GetBmpBeginId(long Size)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Size);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyTabs properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyTabs operations

LPDISPATCH IPropertyTabs::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyTabs::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyTabs::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyTabs::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IPropertyTabs::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IPropertyTabs::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyTabs::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPropertyTabs::Add(LPCTSTR Caption)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Caption);
	return result;
}

BOOL IPropertyTabs::Delete(const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPropertyTabs::GetActive()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyTabs::GetSystemTab()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyTab properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyTab operations

LPDISPATCH IPropertyTab::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyTab::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyTab::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyTab::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyTab::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyTab::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyTab::SetCaption(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyTab::GetCaption()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyTab::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyTab::GetActive()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyTab::GetPropertyControls()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPropertyTab::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyTab::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyTab::SetImage(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyTab::GetImage()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyControls properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyControls operations

LPDISPATCH IPropertyControls::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyControls::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyControls::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyControls::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IPropertyControls::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IPropertyControls::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyControls::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPropertyControls::Add(long Type)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type);
	return result;
}

BOOL IPropertyControls::Delete(const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyControl properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyControl operations

LPDISPATCH IPropertyControl::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyControl::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyControl::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyControl::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyControl::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyControl::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyControl::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyControl::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyControl::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyControl::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyControl::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyControl::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyControl::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyControl::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyManager properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyManager operations

LPDISPATCH IPropertyManager::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyManager::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyManager::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyManager::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyManager::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyManager::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyManager::SetCaption(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyManager::GetCaption()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyManager::SetLayout(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyManager::GetLayout()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyManager::GetPropertyTabs()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPropertyManager::SetGabaritRect(long Left, long Top, long Right, long Bottom)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Left, Top, Right, Bottom);
}

void IPropertyManager::GetGabaritRect(long* Left, long* Top, long* Right, long* Bottom)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Left, Top, Right, Bottom);
}

BOOL IPropertyManager::ShowTabs()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPropertyManager::UpdateTabs()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPropertyManager::HideTabs()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyManager::SetSpecToolbar(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyManager::GetSpecToolbar()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPropertyManager::RepeatCommand()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyManager::SetAutoHideMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyManager::GetAutoHideMode()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILibraryManager properties

/////////////////////////////////////////////////////////////////////////////
// ILibraryManager operations

LPDISPATCH ILibraryManager::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibraryManager::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILibraryManager::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILibraryManager::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibraryManager::GetProceduresLibraries()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibraryManager::GetFragmentsLibraries()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibraryManager::GetModelsLibraries()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ILibraryManager::GetVisible()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILibraryManager::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long ILibraryManager::GetLayout()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILibraryManager::GetActiveFolder()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILibraryManager::SetActiveFolder(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

VARIANT ILibraryManager::GetActiveFolderComment()
{
	VARIANT result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ILibraryManager::SetActiveFolderComment(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void ILibraryManager::AddFolder(LPCTSTR PathFolder)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathFolder);
}

void ILibraryManager::RemoveFolder(LPCTSTR PathFolder)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathFolder);
}

LPDISPATCH ILibraryManager::GetSystemControlStartLibrary()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibraryManager::GetCurrentLibrary()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ILibraryManager::SetCurrentLibrary(LPDISPATCH PVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PVal);
	return result;
}

long ILibraryManager::GetSystemControlStartResult()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProceduresLibraries properties

/////////////////////////////////////////////////////////////////////////////
// IProceduresLibraries operations

LPDISPATCH IProceduresLibraries::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProceduresLibraries::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProceduresLibraries::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProceduresLibraries::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IProceduresLibraries::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IProceduresLibraries::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProceduresLibraries::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProceduresLibrary properties

/////////////////////////////////////////////////////////////////////////////
// IProceduresLibrary operations

LPDISPATCH IProceduresLibrary::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProceduresLibrary::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProceduresLibrary::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProceduresLibrary::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IProceduresLibrary::GetLibraryManagerFolder()
{
	CString result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IProceduresLibrary::GetAttach()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProceduresLibrary::SetAttach(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IProceduresLibrary::GetLibraryType()
{
	long result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IProceduresLibrary::GetName()
{
	CString result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IProceduresLibrary::GetPathName()
{
	CString result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IProceduresLibrary::GetEnable()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IProceduresLibrary::Execute(long Command, LPDISPATCH External, BOOL Post)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Command, External, Post);
	return result;
}

long IProceduresLibrary::GetStyle()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProceduresLibrary::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IProceduresLibrary::GetProcedures()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProceduresLibrary::GetCurrentCommand()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IProceduresLibrary::SystemControlStop()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IProceduresLibrary::SystemControlStart(LPCTSTR menuCommand)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		menuCommand);
	return result;
}

long IProceduresLibrary::GetUniqueId()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IProceduresLibrary::GetExecutable()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IProceduresLibrary::GetAddIns()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProceduresLibrary::GetExternalInterface()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IProceduresLibrary::GetLibraryName()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILibrary properties

/////////////////////////////////////////////////////////////////////////////
// ILibrary operations

LPDISPATCH ILibrary::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibrary::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILibrary::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILibrary::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILibrary::GetLibraryManagerFolder()
{
	CString result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL ILibrary::GetAttach()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILibrary::SetAttach(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long ILibrary::GetLibraryType()
{
	long result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILibrary::GetName()
{
	CString result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString ILibrary::GetPathName()
{
	CString result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL ILibrary::GetEnable()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILibrary::Execute(long Command, LPDISPATCH External, BOOL Post)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Command, External, Post);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProcedures properties

/////////////////////////////////////////////////////////////////////////////
// IProcedures operations

LPDISPATCH IProcedures::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProcedures::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProcedures::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProcedures::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IProcedures::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IProcedures::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProcedures::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IProcedures::GetItemByID(long Id)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Id);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProcedure properties

/////////////////////////////////////////////////////////////////////////////
// IProcedure operations

LPDISPATCH IProcedure::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProcedure::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProcedure::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProcedure::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IProcedure::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IProcedure::GetLibraryFolder()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IProcedure::GetId()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IProcedure::Execute(LPDISPATCH External, BOOL Post)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		External, Post);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertsLibraries properties

/////////////////////////////////////////////////////////////////////////////
// IInsertsLibraries operations

LPDISPATCH IInsertsLibraries::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertsLibraries::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertsLibraries::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertsLibraries::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IInsertsLibraries::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IInsertsLibraries::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertsLibraries::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertsLibrary properties

/////////////////////////////////////////////////////////////////////////////
// IInsertsLibrary operations

LPDISPATCH IInsertsLibrary::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertsLibrary::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertsLibrary::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertsLibrary::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IInsertsLibrary::GetLibraryManagerFolder()
{
	CString result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IInsertsLibrary::GetAttach()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IInsertsLibrary::SetAttach(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IInsertsLibrary::GetLibraryType()
{
	long result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IInsertsLibrary::GetName()
{
	CString result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IInsertsLibrary::GetPathName()
{
	CString result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IInsertsLibrary::GetEnable()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertsLibrary::Execute(long Command, LPDISPATCH External, BOOL Post)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Command, External, Post);
	return result;
}

CString IInsertsLibrary::GetActiveFolder()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IInsertsLibrary::SetActiveFolder(LPCTSTR PathFolder, BOOL LastIsFile, BOOL HaveLibName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathFolder, LastIsFile, HaveLibName);
	return result;
}

LPDISPATCH IInsertsLibrary::GetInserts()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IInsertsLibrary::AddFolder(LPCTSTR PathFolder)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathFolder);
	return result;
}

BOOL IInsertsLibrary::RemoveFolder(LPCTSTR PathFolder)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathFolder);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInserts properties

/////////////////////////////////////////////////////////////////////////////
// IInserts operations

LPDISPATCH IInserts::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInserts::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInserts::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInserts::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IInserts::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IInserts::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInserts::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IInserts::Add(LPCTSTR Name, long DocType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Name, DocType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsert properties

/////////////////////////////////////////////////////////////////////////////
// IInsert operations

LPDISPATCH IInsert::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsert::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsert::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsert::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IInsert::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IInsert::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

VARIANT IInsert::GetComment()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IInsert::SetComment(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

CString IInsert::GetLibraryFolder()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IInsert::GetPathName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsert::Edit()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IInsert::Delete()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasError properties

/////////////////////////////////////////////////////////////////////////////
// IKompasError operations

LPDISPATCH IKompasError::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasError::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IKompasError::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasError::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasError::GetCode()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IKompasError::GetDescription()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IKompasError::GetError3D()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasError::Report()
{
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IKompasError::Clear()
{
	InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}


/////////////////////////////////////////////////////////////////////////////
// IConverter properties

/////////////////////////////////////////////////////////////////////////////
// IConverter operations

LPDISPATCH IConverter::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConverter::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConverter::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IConverter::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IConverter::ConverterParameters(long Command)
{
	LPUNKNOWN result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_UNKNOWN, (void*)&result, parms,
		Command);
	return result;
}

CString IConverter::GetFilter(long DocType, BOOL SaveAs, long* Command)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_PI4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		DocType, SaveAs, Command);
	return result;
}

long IConverter::Convert(LPCTSTR InputFile, LPCTSTR Outfile, long Command, BOOL ShowParam)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		InputFile, Outfile, Command, ShowParam);
	return result;
}

BOOL IConverter::VisualEditConvertParam(long ParentHwnd, long Command)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ParentHwnd, Command);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICheckSum properties

/////////////////////////////////////////////////////////////////////////////
// ICheckSum operations

LPDISPATCH ICheckSum::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICheckSum::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICheckSum::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICheckSum::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICheckSum::Add(const VARIANT& Value, BOOL Com)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Value, Com);
}

VARIANT ICheckSum::GetResult()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

CString ICheckSum::GetStrResult()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL ICheckSum::AddInterface(LPUNKNOWN Object, BOOL Com)
{
	BOOL result;
	static BYTE parms[] =
		VTS_UNKNOWN VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object, Com);
	return result;
}

BOOL ICheckSum::AddReference(long Object, long Doc, BOOL Com)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object, Doc, Com);
	return result;
}

void ICheckSum::Clear()
{
	InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long ICheckSum::GetVersion()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICheckSum::SetVersion(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IProgressBarIndicator properties

/////////////////////////////////////////////////////////////////////////////
// IProgressBarIndicator operations

LPDISPATCH IProgressBarIndicator::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProgressBarIndicator::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProgressBarIndicator::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProgressBarIndicator::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProgressBarIndicator::Start(long MinVal, long MaxVal, LPCTSTR TextVal, BOOL ResetVal)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1f41, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 MinVal, MaxVal, TextVal, ResetVal);
}

void IProgressBarIndicator::SetProgress(long CurrentVal, LPCTSTR TextVal, BOOL ResetVal)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1f42, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 CurrentVal, TextVal, ResetVal);
}

void IProgressBarIndicator::SetText(LPCTSTR TextVal)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f43, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 TextVal);
}

void IProgressBarIndicator::Stop(LPCTSTR TextVal, BOOL ResetVal)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x1f44, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 TextVal, ResetVal);
}


/////////////////////////////////////////////////////////////////////////////
// ISystemSettings properties

/////////////////////////////////////////////////////////////////////////////
// ISystemSettings operations

LPDISPATCH ISystemSettings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISystemSettings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISystemSettings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISystemSettings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISystemSettings::SetFilesAutoSaveSwitchOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISystemSettings::GetFilesAutoSaveSwitchOn()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISystemSettings::SetFilesBackupPrevCopySwitchOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISystemSettings::GetFilesBackupPrevCopySwitchOn()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISystemSettings::SetModelLocalCSCreateInAbsoluteCS(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISystemSettings::GetModelLocalCSCreateInAbsoluteCS()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISystemSettings::SetModelLocalCSSetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISystemSettings::GetModelLocalCSSetActive()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISystemSettings::SetModelSmoothMotion(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISystemSettings::GetModelSmoothMotion()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISystemSettings::GetReportStyleListSettings()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISystemSettings::SetObjectsFilter3D(long Type, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Type, bNewValue);
}

BOOL ISystemSettings::GetObjectsFilter3D(long Type)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Type);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILibArraySettings properties

/////////////////////////////////////////////////////////////////////////////
// ILibArraySettings operations

LPDISPATCH ILibArraySettings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILibArraySettings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILibArraySettings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILibArraySettings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILibArraySettings::GetLibraryCount()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILibArraySettings::GetLibrary(long Index, BOOL* Use)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_PBOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Index, Use);
	return result;
}

BOOL ILibArraySettings::SetLibraryUse(const VARIANT& Index, BOOL Use)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index, Use);
	return result;
}

BOOL ILibArraySettings::GetLibrarys(VARIANT* FileNames, VARIANT* Uses)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileNames, Uses);
	return result;
}

BOOL ILibArraySettings::AddLibrary(LPCTSTR FileName, BOOL Use)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Use);
	return result;
}

BOOL ILibArraySettings::RemoveLibrary(const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMath2D properties

/////////////////////////////////////////////////////////////////////////////
// IMath2D operations

LPDISPATCH IMath2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMath2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMath2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMath2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMath2D::Line(double X, double Y, double Angle)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Angle);
	return result;
}

LPDISPATCH IMath2D::LineSeg(double X1, double Y1, double X2, double Y2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X1, Y1, X2, Y2);
	return result;
}

LPDISPATCH IMath2D::Arc(double Xc, double Yc, double Radius, double Angle1, double Angle2, BOOL Direction)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Xc, Yc, Radius, Angle1, Angle2, Direction);
	return result;
}

LPDISPATCH IMath2D::Circle(double Xc, double Yc, double Radius)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Xc, Yc, Radius);
	return result;
}

LPDISPATCH IMath2D::PolyLine(const VARIANT& Points, BOOL Closed)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		&Points, Closed);
	return result;
}

LPDISPATCH IMath2D::Ellipse(double Xc, double Yc, double A, double B, double Angle)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Xc, Yc, A, B, Angle);
	return result;
}

LPDISPATCH IMath2D::EllipseArc(double Xc, double Yc, double A, double B, double Angle, double Angle1, double Angle2, BOOL Direction)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Xc, Yc, A, B, Angle, Angle1, Angle2, Direction);
	return result;
}

LPDISPATCH IMath2D::Bezier(BOOL Closed, BOOL AllPoints, const VARIANT& Points)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Closed, AllPoints, &Points);
	return result;
}

LPDISPATCH IMath2D::Nurbs(BOOL Closed, long Degree, const VARIANT& Points, const VARIANT& Weights, const VARIANT& Knots)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Closed, Degree, &Points, &Weights, &Knots);
	return result;
}

BOOL IMath2D::Symmetry(double* X, double* Y, LPDISPATCH Curve)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Curve);
	return result;
}

BOOL IMath2D::Rotate(double* X, double* Y, double Xc, double Yc, double Angle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Xc, Yc, Angle);
	return result;
}

BOOL IMath2D::MovePoint(double* X, double* Y, double Angle, double Len)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_R8 VTS_R8;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, Len);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICurve2D properties

/////////////////////////////////////////////////////////////////////////////
// ICurve2D operations

LPDISPATCH ICurve2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICurve2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICurve2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICurve2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT ICurve2D::Intersect(LPDISPATCH Curve2)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Curve2);
	return result;
}

BOOL ICurve2D::Tangent(LPDISPATCH Curve2, VARIANT* Curve1Points, VARIANT* Curve2Points)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Curve2, Curve1Points, Curve2Points);
	return result;
}

VARIANT ICurve2D::TangentLinePoint(double X, double Y)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		X, Y);
	return result;
}

VARIANT ICurve2D::CouplingCurvCurv(LPDISPATCH Curve2, double Radius)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Curve2, Radius);
	return result;
}

BOOL ICurve2D::PointProjection(double X, double Y, double* Kx, double* Ky, double* T, double* Angle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Kx, Ky, T, Angle);
	return result;
}

VARIANT ICurve2D::CalculatePolygonByStep(double Step)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Step);
	return result;
}

BOOL ICurve2D::MovePoint(double* X, double* Y, double Lenght, BOOL Direction)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Lenght, Direction);
	return result;
}

double ICurve2D::GetLength()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double ICurve2D::GetDistancePointPoint(double X1, double Y1, double X2, double Y2)
{
	double result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		X1, Y1, X2, Y2);
	return result;
}

double ICurve2D::GetDistanceToPoint(double X, double Y)
{
	double result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		X, Y);
	return result;
}

BOOL ICurve2D::PointOn(double T, double* X, double* Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		T, X, Y);
	return result;
}

double ICurve2D::GetMetricLength(double T1, double T2)
{
	double result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		T1, T2);
	return result;
}

double ICurve2D::GetParamMin()
{
	double result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double ICurve2D::GetParamMax()
{
	double result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL ICurve2D::GetIsClosed()
{
	BOOL result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICurve2D::GetNurbsParams(BOOL Closed, VARIANT* Points, VARIANT* Weights, VARIANT* Knots, double* TMin, double* TMax)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PR8 VTS_PR8;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Closed, Points, Weights, Knots, TMin, TMax);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPrintJob properties

/////////////////////////////////////////////////////////////////////////////
// IPrintJob operations

LPDISPATCH IPrintJob::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPrintJob::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPrintJob::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPrintJob::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob::Clear()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob::ShowPreviewWindow()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob::Load(LPCTSTR FileName, VARIANT* Errors)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_PVARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Errors);
	return result;
}

BOOL IPrintJob::Save(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL IPrintJob::Execute(LPCTSTR OutputFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OutputFileName);
	return result;
}

BOOL IPrintJob::AddSheets(LPCTSTR FileName, const VARIANT& Sheets, long Range)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, &Sheets, Range);
	return result;
}

long IPrintJob::GetSheetsCount()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPrintJob::GetSheet(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

BOOL IPrintJob::RemoveSheets(const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index);
	return result;
}

long IPrintJob::GetPagesCount()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob::GetPageGabarites(double* Width, double* Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Width, Height);
	return result;
}

BOOL IPrintJob::GetPagesMapGabarites(long* WPageCount, long* HPageCount)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		WPageCount, HPageCount);
	return result;
}

BOOL IPrintJob::GetPagePrintableFlag(long WPage, long HPage)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		WPage, HPage);
	return result;
}

void IPrintJob::SetPagePrintableFlag(long WPage, long HPage, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 WPage, HPage, bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IPrintJob_Sheet properties

/////////////////////////////////////////////////////////////////////////////
// IPrintJob_Sheet operations

LPDISPATCH IPrintJob_Sheet::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPrintJob_Sheet::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPrintJob_Sheet::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPrintJob_Sheet::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IPrintJob_Sheet::GetDocumentName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPrintJob_Sheet::GetNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob_Sheet::GetGabarites(double* Width, double* Height)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Width, Height);
	return result;
}

long IPrintJob_Sheet::GetOrientation()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_Sheet::SetOrientation(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IPrintJob_Sheet::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPrintJob_Sheet::GetX()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPrintJob_Sheet::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPrintJob_Sheet::GetY()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPrintJob_Sheet::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPrintJob_Sheet::GetScale()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob_Sheet::GetClipFlag()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_Sheet::SetClipFlag(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_Sheet::GetClipFrameGabarites(double* Left, double* Bottom, double* Right, double* Top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Left, Bottom, Right, Top);
	return result;
}

BOOL IPrintJob_Sheet::SetClipFrameGabarites(double Left, double Bottom, double Right, double Top)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Left, Bottom, Right, Top);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasDocument2D properties

/////////////////////////////////////////////////////////////////////////////
// IKompasDocument2D operations

LPDISPATCH IKompasDocument2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IKompasDocument2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument2D::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument2D::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IKompasDocument2D::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IKompasDocument2D::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IKompasDocument2D::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IKompasDocument2D::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IKompasDocument2D::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument2D::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument2D::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument2D::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument2D::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument2D::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument2D::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetViewsAndLayersManager()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D::GetDrawingObjectNotifyResult()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IViewsAndLayersManager properties

/////////////////////////////////////////////////////////////////////////////
// IViewsAndLayersManager operations

LPDISPATCH IViewsAndLayersManager::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewsAndLayersManager::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IViewsAndLayersManager::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IViewsAndLayersManager::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewsAndLayersManager::GetViews()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewsAndLayersManager::GetLayerGroups()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IViews properties

/////////////////////////////////////////////////////////////////////////////
// IViews operations

LPDISPATCH IViews::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViews::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IViews::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IViews::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IViews::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IViews::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViews::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IViews::GetView(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IViews::GetViewByNumber(long Numb)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Numb);
	return result;
}

LPDISPATCH IViews::Add(long ViewType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		ViewType);
	return result;
}

LPDISPATCH IViews::GetActiveView()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IViews::AddStandartViews(LPCTSTR FileName, LPCTSTR ProjectionName, const VARIANT& ProjectionsTypes, double X, double Y, double Scale, double DX, double DY)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_VARIANT VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, ProjectionName, &ProjectionsTypes, X, Y, Scale, DX, DY);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingObjects properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingObjects operations

LPDISPATCH IDrawingObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDrawingObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDrawingObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingObject properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingObject operations

LPDISPATCH IDrawingObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingObject::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingObject::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingObject::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDrawingObject::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IDrawingObject::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingObject::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IView properties

/////////////////////////////////////////////////////////////////////////////
// IView operations

LPDISPATCH IView::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IView::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IView::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IView::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IView::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IView::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IView::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IView::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IView::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IView::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IView::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IView::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IView::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IView::SetNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IView::GetNumber()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IView::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IView::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IView::SetBackground(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IView::GetBackground()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IView::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IView::GetVisible()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IView::SetCurrent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IView::GetCurrent()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IView::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IView::GetColor()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IView::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IView::GetComment()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IView::GetObjectCount()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IView::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IView::GetX()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IView::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IView::GetY()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IView::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IView::GetScale()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IView::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IView::GetAngle()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IView::GetViewType()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IView::GetLayers()
{
	LPDISPATCH result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IView::GetVariables()
{
	VARIANT result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IView::GetVariable(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

long IView::GetVariablesCount()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayers properties

/////////////////////////////////////////////////////////////////////////////
// ILayers operations

LPDISPATCH ILayers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILayers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILayers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILayers::GetLayer(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILayers::GetLayerByNumber(long Number)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Number);
	return result;
}

LPDISPATCH ILayers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ILayers::Attach(LPDISPATCH PVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PVal);
	return result;
}

BOOL ILayers::Detach(LPDISPATCH PVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PVal);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayer properties

/////////////////////////////////////////////////////////////////////////////
// ILayer operations

LPDISPATCH ILayer::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayer::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayer::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayer::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayer::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayer::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayer::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ILayer::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILayer::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILayer::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILayer::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ILayer::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayer::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void ILayer::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILayer::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILayer::SetBackground(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILayer::GetBackground()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILayer::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILayer::GetVisible()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILayer::SetCurrent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILayer::GetCurrent()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILayer::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILayer::GetColor()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayer::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILayer::GetComment()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long ILayer::GetObjectCount()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVariable7 properties

/////////////////////////////////////////////////////////////////////////////
// IVariable7 operations

LPDISPATCH IVariable7::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVariable7::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVariable7::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVariable7::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IVariable7::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IVariable7::SetNote(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IVariable7::GetNote()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IVariable7::SetValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVariable7::GetValue()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVariable7::SetExternal(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVariable7::GetExternal()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IVariable7::SetInformation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVariable7::GetInformation()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IVariable7::SetExpression(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IVariable7::GetExpression()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IVariable7::GetParameterNote()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IVariable7::GetDisplayName()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IVariable7::GetLinkVariableName()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IVariable7::GetLinkDocumentName()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IVariable7::SetLink(LPCTSTR DocumentName, LPCTSTR VariableName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DocumentName, VariableName);
	return result;
}

BOOL IVariable7::Delete()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IVariable7::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVariable7::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayerGroups properties

/////////////////////////////////////////////////////////////////////////////
// ILayerGroups operations

LPDISPATCH ILayerGroups::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroups::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayerGroups::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayerGroups::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILayerGroups::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILayerGroups::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroups::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILayerGroups::Add(LPDISPATCH Owner, BOOL Dinamic)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Owner, Dinamic);
	return result;
}

BOOL ILayerGroups::Attach(LPDISPATCH PGroup)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PGroup);
	return result;
}

BOOL ILayerGroups::Detach(LPDISPATCH PGroup)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PGroup);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayerGroup properties

/////////////////////////////////////////////////////////////////////////////
// ILayerGroup operations

LPDISPATCH ILayerGroup::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroup::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayerGroup::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayerGroup::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroup::GetOwnerGroup()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroup::GetLayerGroups()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroup::GetLayers()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILayerGroup::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILayerGroup::GetName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroup::GetLayerFilterConditions()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ILayerGroup::GetLayerStates(const VARIANT& LayerIndex, BOOL* Visible, BOOL* Background, BOOL* Curent, long* Color)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_PBOOL VTS_PBOOL VTS_PBOOL VTS_PI4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&LayerIndex, Visible, Background, Curent, Color);
	return result;
}

BOOL ILayerGroup::SetLayerStates(const VARIANT& LayerIndex, BOOL Visible, BOOL Background, BOOL Curent, long Color)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL VTS_BOOL VTS_BOOL VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&LayerIndex, Visible, Background, Curent, Color);
	return result;
}

void ILayerGroup::SetCurrent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILayerGroup::GetCurrent()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILayerGroup::Delete()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerGroup::GetOwnerView()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILayerGroup::SetOwnerView(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILayerGroup::GetUniqueId()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayerFilterConditions properties

/////////////////////////////////////////////////////////////////////////////
// ILayerFilterConditions operations

LPDISPATCH ILayerFilterConditions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerFilterConditions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayerFilterConditions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayerFilterConditions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILayerFilterConditions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILayerFilterConditions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerFilterConditions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILayerFilterConditions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILayerFilterCondition properties

/////////////////////////////////////////////////////////////////////////////
// ILayerFilterCondition operations

LPDISPATCH ILayerFilterCondition::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILayerFilterCondition::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILayerFilterCondition::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILayerFilterCondition::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetNumber(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILayerFilterCondition::GetNumber()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILayerFilterCondition::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetBackground(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILayerFilterCondition::GetBackground()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetVisible(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILayerFilterCondition::GetVisible()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetHaveObjects(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILayerFilterCondition::GetHaveObjects()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILayerFilterCondition::GetColor()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILayerFilterCondition::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILayerFilterCondition::GetComment()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasDocument3D properties

/////////////////////////////////////////////////////////////////////////////
// IKompasDocument3D operations

LPDISPATCH IKompasDocument3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IKompasDocument3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument3D::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument3D::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IKompasDocument3D::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IKompasDocument3D::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IKompasDocument3D::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IKompasDocument3D::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IKompasDocument3D::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument3D::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument3D::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetTopPart()
{
	LPDISPATCH result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllPlanes(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllPlanes()
{
	BOOL result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllAxis(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllAxis()
{
	BOOL result;
	InvokeHelper(0x138c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllSketches(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllSketches()
{
	BOOL result;
	InvokeHelper(0x138d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllPlaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllPlaces()
{
	BOOL result;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllSurfaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllSurfaces()
{
	BOOL result;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllThreads(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1390, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllThreads()
{
	BOOL result;
	InvokeHelper(0x1390, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllCurves(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1391, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllCurves()
{
	BOOL result;
	InvokeHelper(0x1391, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllControlPoints(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1392, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllControlPoints()
{
	BOOL result;
	InvokeHelper(0x1392, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetPerspective(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1393, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetPerspective()
{
	BOOL result;
	InvokeHelper(0x1393, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetDrawMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1394, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IKompasDocument3D::GetDrawMode()
{
	long result;
	InvokeHelper(0x1394, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetShadedWireframe(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1395, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetShadedWireframe()
{
	BOOL result;
	InvokeHelper(0x1395, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetCreateObjectsInCurrentLocalCS(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1396, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetCreateObjectsInCurrentLocalCS()
{
	BOOL result;
	InvokeHelper(0x1396, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllDimensions(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1397, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllDimensions()
{
	BOOL result;
	InvokeHelper(0x1397, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllDesignations(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1398, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllDesignations()
{
	BOOL result;
	InvokeHelper(0x1398, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideAllAuxiliaryGeom(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideAllAuxiliaryGeom()
{
	BOOL result;
	InvokeHelper(0x1399, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetHideInComponentsMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x139a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetHideInComponentsMode()
{
	BOOL result;
	InvokeHelper(0x139a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetSelectionManager()
{
	LPDISPATCH result;
	InvokeHelper(0x139b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::GetChooseManager()
{
	LPDISPATCH result;
	InvokeHelper(0x139c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3D::CreateAttrEx(double AttrID, LPCTSTR Libname, const VARIANT& Objects, LPDISPATCH SourcePart)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_BSTR VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x139d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		AttrID, Libname, &Objects, SourcePart);
	return result;
}

VARIANT IKompasDocument3D::GetAttributesEx(long Key1, long Key2, long Key3, long Key4, double Numb, const VARIANT& Objects, LPDISPATCH SourcePart)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_R8 VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x139e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Key1, Key2, Key3, Key4, Numb, &Objects, SourcePart);
	return result;
}

BOOL IKompasDocument3D::RebuildDocument()
{
	BOOL result;
	InvokeHelper(0x139f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetEnableUndo(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetEnableUndo()
{
	BOOL result;
	InvokeHelper(0x13a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IKompasDocument3D::SetUndoContainer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IKompasDocument3D::GetUndoContainer()
{
	BOOL result;
	InvokeHelper(0x13a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPart7 properties

/////////////////////////////////////////////////////////////////////////////
// IPart7 operations

LPDISPATCH IPart7::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPart7::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPart7::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPart7::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IPart7::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPart7::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IPart7::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPart7::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPart7::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPart7::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPart7::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPart7::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPart7::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IPart7::GetMarking()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPart7::SetMarking(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPart7::GetFileName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPart7::SetFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IPart7::SetStandard(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPart7::GetStandard()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPart7::SetFixed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPart7::GetFixed()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPart7::GetDetail()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

double IPart7::GetMass()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IPart7::GetDensity()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

CString IPart7::GetMaterial()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IPart7::SetMaterial(LPCTSTR Name, double Density)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Density);
	return result;
}

LPDISPATCH IPart7::GetParts()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPart7::GetVariableTable()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IPart7::GetPartsEx(const VARIANT& PartCollectionType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&PartCollectionType);
	return result;
}

long IPart7::GetInstanceCount(LPDISPATCH Part)
{
	long result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Part);
	return result;
}

VARIANT IPart7::SelectByPoint(const VARIANT& Objects, double X, double Y, double Z)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Objects, X, Y, Z);
	return result;
}

BOOL IPart7::TransferObjects(const VARIANT& Objects, LPDISPATCH Lcs, BOOL holdPosition)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects, Lcs, holdPosition);
	return result;
}

BOOL IPart7::Load(BOOL Full)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Full);
	return result;
}

BOOL IPart7::Unload(BOOL Full)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Full);
	return result;
}

long IPart7::GetLoadState()
{
	long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPart7::GetDefaultObject(long Type)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Type);
	return result;
}

BOOL IPart7::IsVariableNameValid(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

LPDISPATCH IPart7::AddVariable(LPCTSTR Name, double Value, LPCTSTR Note)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8 VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Name, Value, Note);
	return result;
}

BOOL IPart7::RebuildModel(BOOL Redraw)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Redraw);
	return result;
}

long IPart7::GetReadOnly()
{
	long result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPart7::SetReadOnly(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IPart7::GetStaffVisible()
{
	BOOL result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPart7::SetStaffVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPart7::SaveAs(LPCTSTR PathName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathName);
	return result;
}

LPDISPATCH IPart7::FindObject(LPDISPATCH Obj, LPDISPATCH SourcePart)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_DISPATCH;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Obj, SourcePart);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IModelObject properties

/////////////////////////////////////////////////////////////////////////////
// IModelObject operations

LPDISPATCH IModelObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IModelObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IModelObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IModelObject::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IModelObject::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IModelObject::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IModelObject::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IModelObject::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IModelObject::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelObject::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IModelObject::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelObject::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFeature7 properties

/////////////////////////////////////////////////////////////////////////////
// IFeature7 operations

CString IFeature7::GetName()
{
	CString result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IFeature7::GetUpdateStamp()
{
	long result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeature7::GetOwnerFeature()
{
	LPDISPATCH result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IFeature7::GetValid()
{
	BOOL result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFeature7::SetExcluded(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFeature7::GetExcluded()
{
	BOOL result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT IFeature7::GetModelObjects(const VARIANT& ObjType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&ObjType);
	return result;
}

long IFeature7::GetFeatureType()
{
	long result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IFeature7::Delete()
{
	BOOL result;
	InvokeHelper(0x7d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT IFeature7::GetSubFeatures(long TreeType, BOOL Through, BOOL LibObject)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		TreeType, Through, LibObject);
	return result;
}

VARIANT IFeature7::GetResultBodies()
{
	VARIANT result;
	InvokeHelper(0x7da, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IFeature7::GetVariables(BOOL ExternalOnly, BOOL InSource)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x7db, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		ExternalOnly, InSource);
	return result;
}

LPDISPATCH IFeature7::GetVariable(BOOL External, BOOL InSource, const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x7dc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		External, InSource, &Index);
	return result;
}

long IFeature7::GetVariablesCount(BOOL External, BOOL InSource)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x7dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		External, InSource);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IParts7 properties

/////////////////////////////////////////////////////////////////////////////
// IParts7 operations

LPDISPATCH IParts7::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IParts7::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IParts7::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IParts7::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IParts7::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IParts7::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IParts7::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IParts7::GetPart(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IParts7::AddFromFile(LPCTSTR FileName, BOOL ExternalFile, BOOL Redraw)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		FileName, ExternalFile, Redraw);
	return result;
}

LPDISPATCH IParts7::Add(LPCTSTR FileName, LPDISPATCH Plane)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		FileName, Plane);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IModelObjects properties

/////////////////////////////////////////////////////////////////////////////
// IModelObjects operations

LPDISPATCH IModelObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IModelObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IModelObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IModelObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IModelObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVariableTable properties

/////////////////////////////////////////////////////////////////////////////
// IVariableTable operations

LPDISPATCH IVariableTable::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVariableTable::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVariableTable::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVariableTable::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVariableTable::GetRowsCount()
{
	long result;
	InvokeHelper(0x1b59, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVariableTable::GetColumnsCount()
{
	long result;
	InvokeHelper(0x1b5a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IVariableTable::GetVarName(long Column)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b5b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Column);
	return result;
}

void IVariableTable::SetVarName(long Column, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1b5b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Column, lpszNewValue);
}

VARIANT IVariableTable::GetVarNames()
{
	VARIANT result;
	InvokeHelper(0x1b5c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IVariableTable::SetVarNames(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1b5c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

CString IVariableTable::GetComment(long Val)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b5d, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Val);
	return result;
}

void IVariableTable::SetComment(long Val, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1b5d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Val, lpszNewValue);
}

VARIANT IVariableTable::GetTableRow(const VARIANT& Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1b5e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&Index);
	return result;
}

void IVariableTable::SetTableRow(const VARIANT& Index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1b5e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &Index, &newValue);
}

double IVariableTable::GetCell(long RowIndexVal, long ColIndex)
{
	double result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1b5f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		RowIndexVal, ColIndex);
	return result;
}

void IVariableTable::SetCell(long RowIndexVal, long ColIndex, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8;
	InvokeHelper(0x1b5f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 RowIndexVal, ColIndex, newValue);
}

BOOL IVariableTable::ApplyVars(const VARIANT& Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1b60, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index);
	return result;
}

long IVariableTable::GetVisualTable(long WinVal, BOOL Select)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1b61, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		WinVal, Select);
	return result;
}

long IVariableTable::AddColumn(LPCTSTR Val)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1b62, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

BOOL IVariableTable::DeleteColumn(const VARIANT& ColVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1b63, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&ColVal);
	return result;
}

long IVariableTable::AddRow(LPCTSTR Val)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1b64, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

BOOL IVariableTable::DeleteRow(const VARIANT& RowVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1b65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&RowVal);
	return result;
}

BOOL IVariableTable::Clear()
{
	BOOL result;
	InvokeHelper(0x1b66, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IVariableTable::FindColumnIndex(LPCTSTR Val)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1b67, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Val);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystem properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystem operations

LPDISPATCH ILocalCoordinateSystem::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystem::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystem::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILocalCoordinateSystem::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ILocalCoordinateSystem::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILocalCoordinateSystem::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystem::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCoordinateSystem::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCoordinateSystem::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetZ(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCoordinateSystem::GetZ()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem::SetAssociationObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetAssociationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetSymbol(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILocalCoordinateSystem::GetSymbol()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetParameterType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILocalCoordinateSystem::GetParameterType()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem::SetDisplacementByAxis(long Axis, double NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xbb9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Axis, NewVal);
	return result;
}

void ILocalCoordinateSystem::SetOrientationType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILocalCoordinateSystem::GetOrientationType()
{
	long result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem::ReadFromFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL ILocalCoordinateSystem::WriteToFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL ILocalCoordinateSystem::SetStartingOrientation()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem::GetVector(long Axis, double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xbbe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Axis, X, Y, Z);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetLocalCSParameters()
{
	LPDISPATCH result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem::SetCurrent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILocalCoordinateSystem::GetCurrent()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetDefaultObject(long Val)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Val);
	return result;
}

BOOL ILocalCoordinateSystem::InitByMatrix3D(const VARIANT& mtr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xbc2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&mtr);
	return result;
}

LPDISPATCH ILocalCoordinateSystem::GetVector3D(long Axis)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Axis);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3D properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3D operations

LPDISPATCH IPoint3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IPoint3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPoint3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IPoint3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPoint3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPoint3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPoint3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3D::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3D::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3D::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3D::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3D::SetZ(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3D::GetZ()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IPoint3D::SetAssociationObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3D::GetAssociationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3D::SetSymbol(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPoint3D::GetSymbol()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint3D::SetParameterType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPoint3D::GetParameterType()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3D::GetParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3D properties

/////////////////////////////////////////////////////////////////////////////
// IVector3D operations

LPDISPATCH IVector3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3D::SetParametersType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IVector3D::GetParametersType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3D::GetParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISelectionManager properties

/////////////////////////////////////////////////////////////////////////////
// ISelectionManager operations

LPDISPATCH ISelectionManager::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISelectionManager::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISelectionManager::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISelectionManager::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ISelectionManager::Select(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ISelectionManager::Unselect(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ISelectionManager::UnselectAll()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISelectionManager::IsSelected(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

VARIANT ISelectionManager::GetSelectedObjects()
{
	VARIANT result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IChooseManager properties

/////////////////////////////////////////////////////////////////////////////
// IChooseManager operations

LPDISPATCH IChooseManager::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IChooseManager::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IChooseManager::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IChooseManager::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IChooseManager::Choose(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IChooseManager::Unchoose(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IChooseManager::UnchooseAll()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IChooseManager::IsChoosen(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

VARIANT IChooseManager::GetChoosenObjects()
{
	VARIANT result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long IChooseManager::GetCurrentManagerType()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IChooseManager::SetCurrentManagerType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IChooseManager::GetManagerIndex(LPDISPATCH Object)
{
	long result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Object);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAttribute properties

/////////////////////////////////////////////////////////////////////////////
// IAttribute operations

LPDISPATCH IAttribute::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAttribute::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAttribute::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAttribute::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAttribute::SetObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IAttribute::GetObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IAttribute::GetValue(long RowNumb, long ColumnNumb)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		RowNumb, ColumnNumb);
	return result;
}

BOOL IAttribute::SetValue(LPCTSTR Password, long RowNumb, long ColumnNumb, const VARIANT& Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, RowNumb, ColumnNumb, &Value);
	return result;
}

VARIANT IAttribute::GetValues()
{
	VARIANT result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IAttribute::SetValues(LPCTSTR Password, const VARIANT& Values)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, &Values);
	return result;
}

VARIANT IAttribute::GetFlagVisible()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IAttribute::SetFlagVisible(LPCTSTR Password, const VARIANT& Values)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, &Values);
	return result;
}

VARIANT IAttribute::GetColumnKey()
{
	VARIANT result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IAttribute::SetColumnKey(LPCTSTR Password, const VARIANT& Keys)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, &Keys);
	return result;
}

BOOL IAttribute::SetPassword(LPCTSTR OldPassword, LPCTSTR NewPassword)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OldPassword, NewPassword);
	return result;
}

BOOL IAttribute::AddRow(LPCTSTR Password, long RowNumb)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, RowNumb);
	return result;
}

BOOL IAttribute::DeleteRow(LPCTSTR Password, long RowNumb)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, RowNumb);
	return result;
}

BOOL IAttribute::GetKeysInfo(long* Key1, long* Key2, long* Key3, long* Key4, double* Numb)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PR8;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Key1, Key2, Key3, Key4, Numb);
	return result;
}

BOOL IAttribute::SetKeysInfo(LPCTSTR Password, long Key1, long Key2, long Key3, long Key4)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, Key1, Key2, Key3, Key4);
	return result;
}

LPDISPATCH IAttribute::GetAttributeType()
{
	LPDISPATCH result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAttribute::GetRowsCount()
{
	long result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAttribute::GetColumnsCount()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IAttribute::Delete(LPCTSTR Password, const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, &Objects);
	return result;
}

BOOL IAttribute::ViewEdit(long Parent, LPCTSTR Password, BOOL ReadOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Parent, Password, ReadOnly);
	return result;
}

VARIANT IAttribute::GetRecordFlagVisible(long ColumnNumb)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		ColumnNumb);
	return result;
}

BOOL IAttribute::SetRecordFlagVisible(LPCTSTR Password, long ColumnNumb, const VARIANT& Values)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password, ColumnNumb, &Values);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAttributeType properties

/////////////////////////////////////////////////////////////////////////////
// IAttributeType operations

LPDISPATCH IAttributeType::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAttributeType::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAttributeType::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAttributeType::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAttributeType::SetTypeName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IAttributeType::GetTypeName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAttributeType::SetAttrType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IAttributeType::GetAttrType()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IAttributeType::GetKeysInfo(long* Key1, long* Key2, long* Key3, long* Key4)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Key1, Key2, Key3, Key4);
	return result;
}

BOOL IAttributeType::SetKeysInfo(long Key1, long Key2, long Key3, long Key4)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Key1, Key2, Key3, Key4);
	return result;
}

double IAttributeType::GetUniqueNumb()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IAttributeType::SetPassword(LPCTSTR OldPassword, LPCTSTR NewPassword)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OldPassword, NewPassword);
	return result;
}

LPDISPATCH IAttributeType::GetColumnInfo(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAttributeType::AddColumn(long Index, long Type, LPCTSTR Name)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index, Type, Name);
	return result;
}

BOOL IAttributeType::Update(LPCTSTR Password)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password);
	return result;
}

BOOL IAttributeType::Delete(LPCTSTR Password)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Password);
	return result;
}

BOOL IAttributeType::ViewEdit(long Parent, LPCTSTR Password, BOOL ReadOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Parent, Password, ReadOnly);
	return result;
}

void IAttributeType::SetRowsCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IAttributeType::GetRowsCount()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IAttributeType::GetFileName()
{
	CString result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IAttributeType::GetColumnsCount()
{
	long result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IColumnInfo properties

/////////////////////////////////////////////////////////////////////////////
// IColumnInfo operations

LPDISPATCH IColumnInfo::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IColumnInfo::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IColumnInfo::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IColumnInfo::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetCaption(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IColumnInfo::GetCaption()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetColType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColumnInfo::GetColType()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetKey(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColumnInfo::GetKey()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetDefValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IColumnInfo::GetDefValue()
{
	VARIANT result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetListValue(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IColumnInfo::GetListValue()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetSortListValue(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IColumnInfo::GetSortListValue()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IColumnInfo::SetRange(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IColumnInfo::GetRange()
{
	VARIANT result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IColumnInfo::GetRecordColumnInfo(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IColumnInfo::AddRecordColumn(long Index, long Type, LPCTSTR Name)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index, Type, Name);
	return result;
}

BOOL IColumnInfo::Delete()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IColumnInfo::GetRecordColumnsCount()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingObject1 properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingObject1 operations

VARIANT IDrawingObject1::GetConstraints()
{
	VARIANT result;
	InvokeHelper(0x1771, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingObject1::NewConstraint()
{
	LPDISPATCH result;
	InvokeHelper(0x1772, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject1::Associate()
{
	BOOL result;
	InvokeHelper(0x1773, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject1::DeleteConstraints()
{
	BOOL result;
	InvokeHelper(0x1774, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject1::GetTransparentBackground()
{
	BOOL result;
	InvokeHelper(0x1775, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingObject1::SetTransparentBackground(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1775, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingObject1::GetAutoTransparentBackground()
{
	BOOL result;
	InvokeHelper(0x1776, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingObject1::SetAutoTransparentBackground(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1776, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingObject1::GetIsGeometryObject()
{
	BOOL result;
	InvokeHelper(0x1777, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject1::GetIsAnnotativeObject()
{
	BOOL result;
	InvokeHelper(0x1778, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingObject1::GetIsCurve()
{
	BOOL result;
	InvokeHelper(0x1779, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString IDrawingObject1::GetHyperLinkParam(long* Type, LPDISPATCH* LinkObject, long* Level)
{
	CString result;
	static BYTE parms[] =
		VTS_PI4 VTS_PDISPATCH VTS_PI4;
	InvokeHelper(0x177a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		Type, LinkObject, Level);
	return result;
}

BOOL IDrawingObject1::DeleteHyperLink()
{
	BOOL result;
	InvokeHelper(0x177b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IParametriticConstraint properties

/////////////////////////////////////////////////////////////////////////////
// IParametriticConstraint operations

LPDISPATCH IParametriticConstraint::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IParametriticConstraint::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IParametriticConstraint::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IParametriticConstraint::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetConstraintType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IParametriticConstraint::GetConstraintType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IParametriticConstraint::GetIndex()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetPartner(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IParametriticConstraint::GetPartner()
{
	VARIANT result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetPartnerIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IParametriticConstraint::GetPartnerIndex()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IParametriticConstraint::GetValue()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetExpression(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IParametriticConstraint::GetExpression()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IParametriticConstraint::GetComment()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetVariable(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IParametriticConstraint::GetVariable()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetDegrees(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IParametriticConstraint::GetDegrees()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetMinutes(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IParametriticConstraint::GetMinutes()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetSeconds(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IParametriticConstraint::GetSeconds()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IParametriticConstraint::Delete()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IParametriticConstraint::Create()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IParametriticConstraint::GetValid()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IParametriticConstraint::GetAxis()
{
	LPDISPATCH result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IParametriticConstraint::SetAxis(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IParametriticConstraint::SetBisectorVariant(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IParametriticConstraint::GetBisectorVariant()
{
	long result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasDocument1 properties

/////////////////////////////////////////////////////////////////////////////
// IKompasDocument1 operations

BOOL IKompasDocument1::Delete(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2711, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

VARIANT IKompasDocument1::GetAttributes(long Key1, long Key2, long Key3, long Key4, double Numb, const VARIANT& Objects)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_R8 VTS_VARIANT;
	InvokeHelper(0x2712, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Key1, Key2, Key3, Key4, Numb, &Objects);
	return result;
}

VARIANT IKompasDocument1::GetObjectsByAttr(long Key1, long Key2, long Key3, long Key4, double Numb, const VARIANT& ObjectType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_R8 VTS_VARIANT;
	InvokeHelper(0x2713, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Key1, Key2, Key3, Key4, Numb, &ObjectType);
	return result;
}

LPDISPATCH IKompasDocument1::CreateAttr(double AttrID, LPCTSTR Libname, const VARIANT& Objects)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x2714, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		AttrID, Libname, &Objects);
	return result;
}

BOOL IKompasDocument1::ViewEditAttr(long HWnd, const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2715, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		HWnd, &Objects);
	return result;
}

LPDISPATCH IKompasDocument1::GetInterface(long Type)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2716, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type);
	return result;
}

VARIANT IKompasDocument1::GetExternalFilesNames(BOOL allFiles)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2717, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		allFiles);
	return result;
}

BOOL IKompasDocument1::SaveAsEx(LPCTSTR PathName, long saveMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2718, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PathName, saveMode);
	return result;
}

double IKompasDocument1::GetCreationDate()
{
	double result;
	InvokeHelper(0x2719, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IKompasDocument1::GetLastChangeDate()
{
	double result;
	InvokeHelper(0x271a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasDocument2D1 properties

/////////////////////////////////////////////////////////////////////////////
// IKompasDocument2D1 operations

LPDISPATCH IKompasDocument2D1::GetEditMacroObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2af9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetDrawingGroups()
{
	LPDISPATCH result;
	InvokeHelper(0x2afa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetNamedGroups()
{
	LPDISPATCH result;
	InvokeHelper(0x2afb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetCurrentGroup()
{
	LPDISPATCH result;
	InvokeHelper(0x2afc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetSelectionManager()
{
	LPDISPATCH result;
	InvokeHelper(0x2afd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetChooseManager()
{
	LPDISPATCH result;
	InvokeHelper(0x2afe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IKompasDocument2D1::CopyObjects(const VARIANT& Objects, LPDISPATCH Params)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x2aff, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Objects, Params);
	return result;
}

VARIANT IKompasDocument2D1::GetVariables(BOOL ExternalOnly)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2b00, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		ExternalOnly);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetVariable(BOOL External, const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x2b01, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		External, &Index);
	return result;
}

long IKompasDocument2D1::GetVariablesCount(BOOL External)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2b02, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		External);
	return result;
}

BOOL IKompasDocument2D1::UpdateVariables()
{
	BOOL result;
	InvokeHelper(0x2b03, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument2D1::GetVariableTable()
{
	LPDISPATCH result;
	InvokeHelper(0x2b04, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument2D1::IsVariableNameValid(LPCTSTR Name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2b05, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name);
	return result;
}

LPDISPATCH IKompasDocument2D1::AddVariable(LPCTSTR Name, double Value, LPCTSTR Note)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8 VTS_BSTR;
	InvokeHelper(0x2b06, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Name, Value, Note);
	return result;
}

BOOL IKompasDocument2D1::RebuildDocument()
{
	BOOL result;
	InvokeHelper(0x2b07, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IKompasDocument2D1::CreateHyperLink(const VARIANT& Objects, long Type, LPCTSTR Text, LPDISPATCH LinkObject, long Level)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_I4 VTS_BSTR VTS_DISPATCH VTS_I4;
	InvokeHelper(0x2b08, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects, Type, Text, LinkObject, Level);
	return result;
}

VARIANT IKompasDocument2D1::GetHyperLinkObjects(long Type, LPDISPATCH LinkObject, long Level, LPCTSTR Text)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH VTS_I4 VTS_BSTR;
	InvokeHelper(0x2b09, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Type, LinkObject, Level, Text);
	return result;
}

BOOL IKompasDocument2D1::DeleteHyperLinks(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2b0a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IKompasDocument2D1::GetEditMacroVisibleRegime()
{
	BOOL result;
	InvokeHelper(0x2b0b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMacroObject properties

/////////////////////////////////////////////////////////////////////////////
// IMacroObject operations

LPDISPATCH IMacroObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMacroObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMacroObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMacroObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMacroObject::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMacroObject::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMacroObject::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMacroObject::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMacroObject::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMacroObject::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMacroObject::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IMacroObject::SetLibraryFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IMacroObject::GetLibraryFileName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetLibraryName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IMacroObject::GetLibraryName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetCommand(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMacroObject::GetCommand()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetDoubleClickEditable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMacroObject::GetDoubleClickEditable()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetHotPointsEditable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMacroObject::GetHotPointsEditable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetExternalEditable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMacroObject::GetExternalEditable()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMacroObject::SetUserParams(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IMacroObject::GetUserParams()
{
	VARIANT result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IMacroObject::AddObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IMacroObject::GetPlacement(double* X, double* Y, double* Angle, BOOL* MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

BOOL IMacroObject::SetPlacement(double X, double Y, double Angle, BOOL* MirrorSymmetry, BOOL Relative)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_PBOOL VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry, Relative);
	return result;
}

void IMacroObject::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IMacroObject::GetName()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMacroObject::GetAttachedLeaders()
{
	LPDISPATCH result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IMacroObject::DeleteAttachedLeaders()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMacroObject::AddDefaultHotPoint(double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y);
	return result;
}

BOOL IMacroObject::DeleteDefaultHotPoint()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILeaders properties

/////////////////////////////////////////////////////////////////////////////
// ILeaders operations

LPDISPATCH ILeaders::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeaders::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILeaders::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILeaders::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILeaders::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILeaders::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeaders::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILeaders::GetLeader(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILeaders::Add(long DimType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		DimType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBaseLeader properties

/////////////////////////////////////////////////////////////////////////////
// IBaseLeader operations

LPDISPATCH IBaseLeader::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLeader::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBaseLeader::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBaseLeader::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBaseLeader::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBaseLeader::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBaseLeader::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBaseLeader::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLeader::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLeader::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLeader::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBaseLeader::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBaseLeader::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IBaseLeader::GetArrowType()
{
	long result;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBaseLeader::SetArrowType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingGroups properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingGroups operations

LPDISPATCH IDrawingGroups::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingGroups::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingGroups::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingGroups::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDrawingGroups::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDrawingGroups::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingGroups::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingGroups::Add(BOOL Temp, LPCTSTR Name)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Temp, Name);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingGroup properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingGroup operations

LPDISPATCH IDrawingGroup::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingGroup::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingGroup::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingGroup::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingGroup::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IDrawingGroup::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT IDrawingGroup::GetObjects(const VARIANT& Type)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&Type);
	return result;
}

BOOL IDrawingGroup::AddObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IDrawingGroup::DetachObjects(const VARIANT& Objects, BOOL DeleteTmp)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects, DeleteTmp);
	return result;
}

BOOL IDrawingGroup::Clear(BOOL DeleteTmp)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DeleteTmp);
	return result;
}

BOOL IDrawingGroup::Store()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IDrawingGroup::GetObjectsCount()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IDrawingGroup::ExistObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IDrawingGroup::Delete()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingGroup::AddRegion(long RegionType, double XMin, double YMin, double XMax, double YMax)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		RegionType, XMin, YMin, XMax, YMax);
	return result;
}

BOOL IDrawingGroup::ReadFragment(LPCTSTR FileName, BOOL CurentLayer, double XBase, double YBase, double Scale, double Angle, BOOL ScaleProjLinesSize)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, CurentLayer, XBase, YBase, Scale, Angle, ScaleProjLinesSize);
	return result;
}

BOOL IDrawingGroup::WriteFragment(LPCTSTR FileName, LPCTSTR Comment, double XBase, double YBase)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_R8 VTS_R8;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Comment, XBase, YBase);
	return result;
}

BOOL IDrawingGroup::WriteToClip(BOOL AttrCopy, BOOL SpcObjCopy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		AttrCopy, SpcObjCopy);
	return result;
}

BOOL IDrawingGroup::ReadFromClip(BOOL AttrCopy, BOOL SpcObjCopy)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		AttrCopy, SpcObjCopy);
	return result;
}

BOOL IDrawingGroup::Draw(long HWnd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		HWnd);
	return result;
}

BOOL IDrawingGroup::Open()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingGroup::Close()
{
	BOOL result;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingGroup::GetCurrent()
{
	BOOL result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICopyObjectParam properties

/////////////////////////////////////////////////////////////////////////////
// ICopyObjectParam operations

LPDISPATCH ICopyObjectParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICopyObjectParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICopyObjectParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICopyObjectParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetXOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICopyObjectParam::GetXOld()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetYOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICopyObjectParam::GetYOld()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetXNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICopyObjectParam::GetXNew()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetYNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICopyObjectParam::GetYNew()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICopyObjectParam::GetScale()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICopyObjectParam::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetAttributeCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICopyObjectParam::GetAttributeCopy()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICopyObjectParam::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam::SetSpecificationObjectCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICopyObjectParam::GetSpecificationObjectCopy()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingDocument properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingDocument operations

LPDISPATCH IDrawingDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IDrawingDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IDrawingDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IDrawingDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IDrawingDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IDrawingDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IDrawingDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IDrawingDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetViewsAndLayersManager()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetDrawingObjectNotifyResult()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetChangeListDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetSpecRough()
{
	LPDISPATCH result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingDocument::GetTechnicalDemand()
{
	LPDISPATCH result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecRough properties

/////////////////////////////////////////////////////////////////////////////
// ISpecRough operations

LPDISPATCH ISpecRough::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecRough::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecRough::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecRough::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

double ISpecRough::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISpecRough::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISpecRough::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISpecRough::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void ISpecRough::SetAutoPlacement(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecRough::GetAutoPlacement()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ISpecRough::GetSignType()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISpecRough::SetSignType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString ISpecRough::GetText()
{
	CString result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISpecRough::SetText(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

double ISpecRough::GetDistance()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISpecRough::SetDistance(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ISpecRough::GetAddSign()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecRough::SetAddSign(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecRough::Update()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecRough::Delete()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecRough::GetIsCreated()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITechnicalDemand properties

/////////////////////////////////////////////////////////////////////////////
// ITechnicalDemand operations

LPDISPATCH ITechnicalDemand::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITechnicalDemand::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITechnicalDemand::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITechnicalDemand::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITechnicalDemand::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ITechnicalDemand::GetBlocksGabarits()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ITechnicalDemand::SetBlocksGabarits(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void ITechnicalDemand::SetAutoPlacement(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITechnicalDemand::GetAutoPlacement()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITechnicalDemand::Update()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITechnicalDemand::Delete()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITechnicalDemand::GetIsCreated()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT ITechnicalDemand::GetBlocksStartLineNumbers()
{
	VARIANT result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFragmentDocument properties

/////////////////////////////////////////////////////////////////////////////
// IFragmentDocument operations

LPDISPATCH IFragmentDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFragmentDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFragmentDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFragmentDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IFragmentDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IFragmentDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IFragmentDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IFragmentDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IFragmentDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IFragmentDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IFragmentDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFragmentDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFragmentDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFragmentDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFragmentDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFragmentDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetViewsAndLayersManager()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFragmentDocument::GetDrawingObjectNotifyResult()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IFragmentDocument::GetIsSketch()
{
	BOOL result;
	InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpecificationDocument properties

/////////////////////////////////////////////////////////////////////////////
// ISpecificationDocument operations

LPDISPATCH ISpecificationDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpecificationDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpecificationDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void ISpecificationDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void ISpecificationDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString ISpecificationDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString ISpecificationDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString ISpecificationDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpecificationDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpecificationDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpecificationDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpecificationDocument::GetAttachedDocuments()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITextDocument properties

/////////////////////////////////////////////////////////////////////////////
// ITextDocument operations

LPDISPATCH ITextDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITextDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITextDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ITextDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void ITextDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void ITextDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString ITextDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString ITextDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString ITextDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL ITextDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITextDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITextDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITextDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITextDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPartDocument properties

/////////////////////////////////////////////////////////////////////////////
// IPartDocument operations

LPDISPATCH IPartDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPartDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPartDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPartDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPartDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IPartDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IPartDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IPartDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IPartDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IPartDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IPartDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPartDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetTopPart()
{
	LPDISPATCH result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllPlanes(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllPlanes()
{
	BOOL result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllAxis(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllAxis()
{
	BOOL result;
	InvokeHelper(0x138c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllSketches(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllSketches()
{
	BOOL result;
	InvokeHelper(0x138d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllPlaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllPlaces()
{
	BOOL result;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllSurfaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllSurfaces()
{
	BOOL result;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllThreads(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1390, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllThreads()
{
	BOOL result;
	InvokeHelper(0x1390, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllCurves(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1391, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllCurves()
{
	BOOL result;
	InvokeHelper(0x1391, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllControlPoints(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1392, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllControlPoints()
{
	BOOL result;
	InvokeHelper(0x1392, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetPerspective(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1393, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetPerspective()
{
	BOOL result;
	InvokeHelper(0x1393, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetDrawMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1394, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPartDocument::GetDrawMode()
{
	long result;
	InvokeHelper(0x1394, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetShadedWireframe(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1395, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetShadedWireframe()
{
	BOOL result;
	InvokeHelper(0x1395, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetCreateObjectsInCurrentLocalCS(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1396, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetCreateObjectsInCurrentLocalCS()
{
	BOOL result;
	InvokeHelper(0x1396, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllDimensions(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1397, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllDimensions()
{
	BOOL result;
	InvokeHelper(0x1397, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllDesignations(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1398, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllDesignations()
{
	BOOL result;
	InvokeHelper(0x1398, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideAllAuxiliaryGeom(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideAllAuxiliaryGeom()
{
	BOOL result;
	InvokeHelper(0x1399, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetHideInComponentsMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x139a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetHideInComponentsMode()
{
	BOOL result;
	InvokeHelper(0x139a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetSelectionManager()
{
	LPDISPATCH result;
	InvokeHelper(0x139b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::GetChooseManager()
{
	LPDISPATCH result;
	InvokeHelper(0x139c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPartDocument::CreateAttrEx(double AttrID, LPCTSTR Libname, const VARIANT& Objects, LPDISPATCH SourcePart)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_BSTR VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x139d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		AttrID, Libname, &Objects, SourcePart);
	return result;
}

VARIANT IPartDocument::GetAttributesEx(long Key1, long Key2, long Key3, long Key4, double Numb, const VARIANT& Objects, LPDISPATCH SourcePart)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_R8 VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x139e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Key1, Key2, Key3, Key4, Numb, &Objects, SourcePart);
	return result;
}

BOOL IPartDocument::RebuildDocument()
{
	BOOL result;
	InvokeHelper(0x139f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetEnableUndo(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetEnableUndo()
{
	BOOL result;
	InvokeHelper(0x13a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPartDocument::SetUndoContainer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPartDocument::GetUndoContainer()
{
	BOOL result;
	InvokeHelper(0x13a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAssemblyDocument properties

/////////////////////////////////////////////////////////////////////////////
// IAssemblyDocument operations

LPDISPATCH IAssemblyDocument::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAssemblyDocument::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAssemblyDocument::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAssemblyDocument::GetDocumentType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetDocumentFrames()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IAssemblyDocument::Close(long closeOptions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		closeOptions);
	return result;
}

void IAssemblyDocument::Save()
{
	InvokeHelper(0xbbb, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IAssemblyDocument::SaveAs(LPCTSTR PathName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PathName);
}

CString IAssemblyDocument::GetName()
{
	CString result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IAssemblyDocument::GetPathName()
{
	CString result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IAssemblyDocument::GetPath()
{
	CString result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IAssemblyDocument::GetVisible()
{
	BOOL result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAssemblyDocument::GetActive()
{
	BOOL result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetActive(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetChanged()
{
	BOOL result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetDocumentSettings()
{
	LPDISPATCH result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetSpecificationDescriptions()
{
	LPDISPATCH result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetLayoutSheets()
{
	LPDISPATCH result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetUserDataStoragesMng()
{
	LPDISPATCH result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetTopPart()
{
	LPDISPATCH result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllPlanes(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllPlanes()
{
	BOOL result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllAxis(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllAxis()
{
	BOOL result;
	InvokeHelper(0x138c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllSketches(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllSketches()
{
	BOOL result;
	InvokeHelper(0x138d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllPlaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllPlaces()
{
	BOOL result;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllSurfaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllSurfaces()
{
	BOOL result;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllThreads(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1390, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllThreads()
{
	BOOL result;
	InvokeHelper(0x1390, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllCurves(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1391, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllCurves()
{
	BOOL result;
	InvokeHelper(0x1391, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllControlPoints(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1392, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllControlPoints()
{
	BOOL result;
	InvokeHelper(0x1392, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetPerspective(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1393, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetPerspective()
{
	BOOL result;
	InvokeHelper(0x1393, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetDrawMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1394, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IAssemblyDocument::GetDrawMode()
{
	long result;
	InvokeHelper(0x1394, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetShadedWireframe(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1395, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetShadedWireframe()
{
	BOOL result;
	InvokeHelper(0x1395, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetCreateObjectsInCurrentLocalCS(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1396, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetCreateObjectsInCurrentLocalCS()
{
	BOOL result;
	InvokeHelper(0x1396, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllDimensions(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1397, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllDimensions()
{
	BOOL result;
	InvokeHelper(0x1397, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllDesignations(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1398, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllDesignations()
{
	BOOL result;
	InvokeHelper(0x1398, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideAllAuxiliaryGeom(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1399, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideAllAuxiliaryGeom()
{
	BOOL result;
	InvokeHelper(0x1399, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetHideInComponentsMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x139a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetHideInComponentsMode()
{
	BOOL result;
	InvokeHelper(0x139a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetSelectionManager()
{
	LPDISPATCH result;
	InvokeHelper(0x139b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::GetChooseManager()
{
	LPDISPATCH result;
	InvokeHelper(0x139c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssemblyDocument::CreateAttrEx(double AttrID, LPCTSTR Libname, const VARIANT& Objects, LPDISPATCH SourcePart)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_BSTR VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x139d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		AttrID, Libname, &Objects, SourcePart);
	return result;
}

VARIANT IAssemblyDocument::GetAttributesEx(long Key1, long Key2, long Key3, long Key4, double Numb, const VARIANT& Objects, LPDISPATCH SourcePart)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_R8 VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x139e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Key1, Key2, Key3, Key4, Numb, &Objects, SourcePart);
	return result;
}

BOOL IAssemblyDocument::RebuildDocument()
{
	BOOL result;
	InvokeHelper(0x139f, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetEnableUndo(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13a0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetEnableUndo()
{
	BOOL result;
	InvokeHelper(0x13a0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssemblyDocument::SetUndoContainer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x13a1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssemblyDocument::GetUndoContainer()
{
	BOOL result;
	InvokeHelper(0x13a1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDimensionText properties

/////////////////////////////////////////////////////////////////////////////
// IDimensionText operations

long IDimensionText::GetStyle()
{
	long result;
	InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1389, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionText::GetSign()
{
	long result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetSign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString IDimensionText::GetSignFont()
{
	CString result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetSignFont(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x138b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

double IDimensionText::GetNominalValue()
{
	double result;
	InvokeHelper(0x138c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetNominalValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x138c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IDimensionText::GetAutoNominalValue()
{
	BOOL result;
	InvokeHelper(0x138d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetAutoNominalValue(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDimensionText::GetToleranceOn()
{
	BOOL result;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetToleranceOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDimensionText::GetDeviationOn()
{
	BOOL result;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetDeviationOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x138f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IDimensionText::GetDeviationType()
{
	long result;
	InvokeHelper(0x1390, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetDeviationType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1390, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDimensionText::GetRectangle()
{
	BOOL result;
	InvokeHelper(0x1391, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetRectangle(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1391, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDimensionText::GetUnderline()
{
	BOOL result;
	InvokeHelper(0x1392, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetUnderline(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1392, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IDimensionText::GetBrackets()
{
	long result;
	InvokeHelper(0x1393, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetBrackets(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1393, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionText::GetTextAlign()
{
	long result;
	InvokeHelper(0x1394, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetTextAlign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1394, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IDimensionText::GetPrefix()
{
	LPDISPATCH result;
	InvokeHelper(0x1395, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDimensionText::GetNominalText()
{
	LPDISPATCH result;
	InvokeHelper(0x1396, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IDimensionText::GetTolerance()
{
	CString result;
	InvokeHelper(0x1397, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetTolerance(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1397, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

LPDISPATCH IDimensionText::GetHighDeviation()
{
	LPDISPATCH result;
	InvokeHelper(0x1398, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDimensionText::GetLowDeviation()
{
	LPDISPATCH result;
	InvokeHelper(0x1399, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDimensionText::GetUnit()
{
	LPDISPATCH result;
	InvokeHelper(0x139a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDimensionText::GetSuffix()
{
	LPDISPATCH result;
	InvokeHelper(0x139b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDimensionText::GetTextUnder()
{
	LPDISPATCH result;
	InvokeHelper(0x139c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDimensionText::GetTextFormat()
{
	long result;
	InvokeHelper(0x139d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionText::SetTextFormat(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x139d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IDimensionParams properties

/////////////////////////////////////////////////////////////////////////////
// IDimensionParams operations

BOOL IDimensionParams::GetRemoteLine1()
{
	BOOL result;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetRemoteLine1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDimensionParams::GetRemoteLine2()
{
	BOOL result;
	InvokeHelper(0xfa2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetRemoteLine2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IDimensionParams::GetArrowType1()
{
	long result;
	InvokeHelper(0xfa3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetArrowType1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetArrowType2()
{
	long result;
	InvokeHelper(0xfa4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetArrowType2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetArrowPos()
{
	long result;
	InvokeHelper(0xfa5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetArrowPos(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetTextPos()
{
	long result;
	InvokeHelper(0xfa6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetTextPos(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetTextType()
{
	long result;
	InvokeHelper(0xfa7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetTextType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetTextOnLine()
{
	long result;
	InvokeHelper(0xfa8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetTextOnLine(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetTextBase()
{
	long result;
	InvokeHelper(0xfa9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetTextBase(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfa9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDimensionParams::GetShelfDirection()
{
	long result;
	InvokeHelper(0xfaa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfaa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IDimensionParams::GetShelfAngle()
{
	double result;
	InvokeHelper(0xfab, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetShelfAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xfab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDimensionParams::GetShelfLength()
{
	double result;
	InvokeHelper(0xfac, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetShelfLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xfac, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IDimensionParams::GetGap()
{
	BOOL result;
	InvokeHelper(0xfad, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetGap(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfad, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IDimensionParams::GetGapValue()
{
	long result;
	InvokeHelper(0xfae, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDimensionParams::SetGapValue(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xfae, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ILoadCombination properties

/////////////////////////////////////////////////////////////////////////////
// ILoadCombination operations

BOOL ILoadCombination::GetCompletelyLoaded()
{
	BOOL result;
	InvokeHelper(0x1771, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT ILoadCombination::GetLoadCombinations()
{
	VARIANT result;
	InvokeHelper(0x1772, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long ILoadCombination::GetCurrentIndex()
{
	long result;
	InvokeHelper(0x1773, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILoadCombination::Create(LPCTSTR CombinationName)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1774, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		CombinationName);
	return result;
}

BOOL ILoadCombination::Delete(const VARIANT& LoadCombinationIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1775, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&LoadCombinationIndex);
	return result;
}

BOOL ILoadCombination::Apply(const VARIANT& LoadCombinationIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1776, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&LoadCombinationIndex);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFrameTreesManager properties

/////////////////////////////////////////////////////////////////////////////
// IFrameTreesManager operations

LPDISPATCH IFrameTreesManager::AddTab(LPCTSTR TabCaption, LPCTSTR OcxClassID)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3e9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		TabCaption, OcxClassID);
	return result;
}

BOOL IFrameTreesManager::RemoveTab(LPDISPATCH Ocx)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3ea, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Ocx);
	return result;
}

LPDISPATCH IFrameTreesManager::GetActiveTab()
{
	LPDISPATCH result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IFrameTreesManager::SetActiveTab(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IFrameTreesManager::GetTabsVisible()
{
	BOOL result;
	InvokeHelper(0x3ec, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFrameTreesManager::SetTabsVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3ec, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString IFrameTreesManager::GetTreeCaption(LPDISPATCH Ocx)
{
	CString result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3ed, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Ocx);
	return result;
}

void IFrameTreesManager::SetTreeCaption(LPDISPATCH Ocx, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BSTR;
	InvokeHelper(0x3ed, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Ocx, lpszNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IAttrTypeMng properties

/////////////////////////////////////////////////////////////////////////////
// IAttrTypeMng operations

LPDISPATCH IAttrTypeMng::CreateAttrType(const VARIANT& Libname)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1f4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		&Libname);
	return result;
}

LPDISPATCH IAttrTypeMng::GetAttrType(double AttrID, const VARIANT& Libname)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_VARIANT;
	InvokeHelper(0x1f5, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		AttrID, &Libname);
	return result;
}

LPDISPATCH IAttrTypeMng::ChoiceAttrTypes(long HWnd, const VARIANT& Libname)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x1f6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		HWnd, &Libname);
	return result;
}

VARIANT IAttrTypeMng::GetAttrTypes(const VARIANT& Libname)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Libname);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPrintJob_OutputParameters properties

/////////////////////////////////////////////////////////////////////////////
// IPrintJob_OutputParameters operations

void IPrintJob_OutputParameters::SetNumberOfCopies(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_OutputParameters::GetNumberOfCopies()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetCollateCopies(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetCollateCopies()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetPlotToFile(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetPlotToFile()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_OutputParameters::GetColor()
{
	long result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetOnlyThinLines(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetOnlyThinLines()
{
	BOOL result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetAlternativeFillingOutput(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetAlternativeFillingOutput()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetAccuracyModelOutput(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_OutputParameters::GetAccuracyModelOutput()
{
	long result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetPageOutputOrder(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_OutputParameters::GetPageOutputOrder()
{
	long result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetDefaultScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPrintJob_OutputParameters::GetDefaultScale()
{
	double result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetAutoScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetAutoScale()
{
	BOOL result;
	InvokeHelper(0x7da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetUseCatchSpacing(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetUseCatchSpacing()
{
	BOOL result;
	InvokeHelper(0x7db, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetCatchSpacing(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_OutputParameters::GetCatchSpacing()
{
	long result;
	InvokeHelper(0x7dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetUseHooking(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_OutputParameters::GetUseHooking()
{
	BOOL result;
	InvokeHelper(0x7dd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_OutputParameters::SetHooking(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_OutputParameters::GetHooking()
{
	long result;
	InvokeHelper(0x7de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProperty properties

/////////////////////////////////////////////////////////////////////////////
// IProperty operations

LPDISPATCH IProperty::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IProperty::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IProperty::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IProperty::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProperty::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProperty::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

double IProperty::GetId()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IProperty::SetDataType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IProperty::GetDataType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT IProperty::GetMinValue()
{
	VARIANT result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IProperty::GetMaxValue()
{
	VARIANT result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IProperty::SetValueRange(const VARIANT& MinVal, const VARIANT& MaxVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&MinVal, &MaxVal);
	return result;
}

BOOL IProperty::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProperty::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IProperty::GetSignificantDigitsCount()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IProperty::SetSignificantDigitsCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString IProperty::GetSourceName()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IProperty::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProperty::GetComment()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IProperty::SetPropertyTypeId(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProperty::GetPropertyTypeId()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IProperty::SetUnitId(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProperty::GetUnitId()
{
	CString result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IProperty::ViewEdit(long Parent, BOOL ReadOnly)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Parent, ReadOnly);
	return result;
}

BOOL IProperty::Delete()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IProperty::Update()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IProperty::GetUseListVal()
{
	BOOL result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProperty::SetUseListVal(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

VARIANT IProperty::GetListVal()
{
	VARIANT result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IProperty::SetListVal(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyMng properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyMng operations

long IPropertyMng::GetPropertyCount(const VARIANT& Libname)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		&Libname);
	return result;
}

LPDISPATCH IPropertyMng::GetProperty_(const VARIANT& Libname, const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x5dd, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		&Libname, &Index);
	return result;
}

VARIANT IPropertyMng::GetProperties(const VARIANT& Libname)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5de, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Libname);
	return result;
}

LPDISPATCH IPropertyMng::AddProperty(const VARIANT& Libname, const VARIANT& Val)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x5df, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		&Libname, &Val);
	return result;
}

BOOL IPropertyMng::RemoveProperty(const VARIANT& Libname, const VARIANT& Val)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x5e0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Libname, &Val);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyKeeper properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyKeeper operations

BOOL IPropertyKeeper::GetPropertyValue(LPDISPATCH Property_, VARIANT* Value, BOOL BaseUnit, BOOL* FromSource)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_PVARIANT VTS_BOOL VTS_PBOOL;
	InvokeHelper(0x3e80, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Property_, Value, BaseUnit, FromSource);
	return result;
}

BOOL IPropertyKeeper::SetPropertyValue(LPDISPATCH Property_, const VARIANT& Value, BOOL BaseUnit)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x3e81, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Property_, &Value, BaseUnit);
	return result;
}

LPDISPATCH IPropertyKeeper::GetPropertyAdditionalStorage(LPDISPATCH Property_, BOOL Create, BOOL* FromSource)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL VTS_PBOOL;
	InvokeHelper(0x3e82, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Property_, Create, FromSource);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IReportProcess properties

/////////////////////////////////////////////////////////////////////////////
// IReportProcess operations

LPDISPATCH IReportProcess::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IReportProcess::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IReportProcess::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IReportProcess::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IReportProcess::GetStylesCount()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IReportProcess::SetActiveStyleIndex(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IReportProcess::GetActiveStyleIndex()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IReportProcess::GetReportFilter()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IReportProcess::SetReportFilterUse(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IReportProcess::GetReportFilterUse()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IReportFilter properties

/////////////////////////////////////////////////////////////////////////////
// IReportFilter operations

long IReportFilter::GetConditionCount()
{
	long result;
	InvokeHelper(0x64, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IReportFilter::GetCondition(long Index, VARIANT* UniqId, long* Type, VARIANT* Val)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT VTS_PI4 VTS_PVARIANT;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, UniqId, Type, Val);
	return result;
}

BOOL IReportFilter::SetCondition(long Index, const VARIANT& UniqId, long Type, const VARIANT& Val)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4 VTS_VARIANT;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, &UniqId, Type, &Val);
	return result;
}

BOOL IReportFilter::RemoveCondition(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL IReportFilter::Clear()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPrintJob_PrinterSettings properties

/////////////////////////////////////////////////////////////////////////////
// IPrintJob_PrinterSettings operations

BOOL IPrintJob_PrinterSettings::InitPrinterSettings(LPCTSTR DeviceName, BOOL IsPortraitPage, long PaperSize, long PaperLength, long PaperWidth, long PaperSource)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DeviceName, IsPortraitPage, PaperSize, PaperLength, PaperWidth, PaperSource);
	return result;
}

CString IPrintJob_PrinterSettings::GetDeviceName()
{
	CString result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IPrintJob_PrinterSettings::GetPort()
{
	CString result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IPrintJob_PrinterSettings::LoadPrinterConfig(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL IPrintJob_PrinterSettings::SavePrinterConfig(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

void IPrintJob_PrinterSettings::SetIsPortraitPage(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPrintJob_PrinterSettings::GetIsPortraitPage()
{
	BOOL result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPrintJob_PrinterSettings::SetPaperSize(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_PrinterSettings::GetPaperSize()
{
	long result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_PrinterSettings::SetPaperSource(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_PrinterSettings::GetPaperSource()
{
	long result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_PrinterSettings::SetPaperLength(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_PrinterSettings::GetPaperLength()
{
	long result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPrintJob_PrinterSettings::SetPaperWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPrintJob_PrinterSettings::GetPaperWidth()
{
	long result;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyControl1 properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyControl1 operations

void IPropertyControl1::SetPredefineNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyControl1::GetPredefineNumber()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyControl1::SetUserMenu(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyControl1::GetUserMenu()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyEdit properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyEdit operations

LPDISPATCH IPropertyEdit::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyEdit::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyEdit::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyEdit::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEdit::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyEdit::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyEdit::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyEdit::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEdit::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyEdit::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyEdit::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyEdit::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyEdit::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT IPropertyEdit::GetMinValue()
{
	VARIANT result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IPropertyEdit::GetMaxValue()
{
	VARIANT result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPropertyEdit::SetValueRange(const VARIANT& MinVal, const VARIANT& MaxVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&MinVal, &MaxVal);
	return result;
}

void IPropertyEdit::SetWithCheck(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEdit::GetWithCheck()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetCheckState(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyEdit::GetCheckState()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEdit::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEdit::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyEdit::GetWidth()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertySeparator properties

/////////////////////////////////////////////////////////////////////////////
// IPropertySeparator operations

LPDISPATCH IPropertySeparator::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertySeparator::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertySeparator::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertySeparator::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySeparator::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySeparator::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertySeparator::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySeparator::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySeparator::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertySeparator::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySeparator::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySeparator::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySeparator::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertySeparator::SetSeparatorType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySeparator::GetSeparatorType()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPropertySeparator::SetImage(const VARIANT& IdBmp, const VARIANT& HInstance)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&IdBmp, &HInstance);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyList properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyList operations

LPDISPATCH IPropertyList::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyList::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyList::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyList::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyList::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyList::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyList::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyList::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyList::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyList::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyList::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyList::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyList::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT IPropertyList::GetMinValue()
{
	VARIANT result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IPropertyList::GetMaxValue()
{
	VARIANT result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPropertyList::SetValueRange(const VARIANT& MinVal, const VARIANT& MaxVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&MinVal, &MaxVal);
	return result;
}

void IPropertyList::SetWithCheck(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyList::GetWithCheck()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetCheckState(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyList::GetCheckState()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyList::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyList::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyList::GetWidth()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyList::ClearList()
{
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IPropertyList::Add(const VARIANT& NewVal)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &NewVal);
}

void IPropertyList::SetSort(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyList::GetSort()
{
	BOOL result;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPropertyList::Find(const VARIANT& Val)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&Val);
	return result;
}

BOOL IPropertyList::SetCurrentByIndex(long Val)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Val);
	return result;
}

void IPropertyList::SetPrecision(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x71, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPropertyList::GetPrecision()
{
	double result;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IPropertyList::GetCount()
{
	long result;
	InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyCheckBox properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyCheckBox operations

LPDISPATCH IPropertyCheckBox::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyCheckBox::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyCheckBox::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyCheckBox::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyCheckBox::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyCheckBox::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyCheckBox::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyCheckBox::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyCheckBox::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyCheckBox::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyCheckBox::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyCheckBox::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyCheckBox::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyCheckBox::SetCustomBitmaps(const VARIANT& IdUnchecked, const VARIANT& IdChecked, const VARIANT& IdIndeterminate, const VARIANT& HInstance)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &IdUnchecked, &IdChecked, &IdIndeterminate, &HInstance);
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyMultiButton properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyMultiButton operations

LPDISPATCH IPropertyMultiButton::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyMultiButton::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyMultiButton::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyMultiButton::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyMultiButton::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyMultiButton::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyMultiButton::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyMultiButton::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyMultiButton::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyMultiButton::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyMultiButton::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyMultiButton::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyMultiButton::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetButtonsType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyMultiButton::GetButtonsType()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetButtonChecked(long BtnID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, bNewValue);
}

BOOL IPropertyMultiButton::GetButtonChecked(long BtnID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyMultiButton::SetButtonEnable(long BtnID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, bNewValue);
}

BOOL IPropertyMultiButton::GetButtonEnable(long BtnID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyMultiButton::AddButton(long BtnID, const VARIANT& Bmp, long InsertAt)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 BtnID, &Bmp, InsertAt);
}

void IPropertyMultiButton::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyMultiButton::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyMultiButton::SetButtonTips(long BtnID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, lpszNewValue);
}

CString IPropertyMultiButton::GetButtonTips(long BtnID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyMultiButton::SetButtonHint(long BtnID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, lpszNewValue);
}

CString IPropertyMultiButton::GetButtonHint(long BtnID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyMultiButton::SetNextCommand(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyMultiButton::GetNextCommand()
{
	BOOL result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertySlideBox properties

/////////////////////////////////////////////////////////////////////////////
// IPropertySlideBox operations

LPDISPATCH IPropertySlideBox::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertySlideBox::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertySlideBox::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertySlideBox::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySlideBox::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySlideBox::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertySlideBox::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySlideBox::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySlideBox::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertySlideBox::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySlideBox::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySlideBox::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySlideBox::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertySlideBox::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetSlideType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySlideBox::GetSlideType()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetDrawingSlide(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertySlideBox::GetDrawingSlide()
{
	VARIANT result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySlideBox::GetWidth()
{
	long result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySlideBox::GetHeight()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::SetCheckBoxVisibility(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySlideBox::GetCheckBoxVisibility()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySlideBox::UpdateParam()
{
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyUserControl properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyUserControl operations

LPDISPATCH IPropertyUserControl::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyUserControl::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyUserControl::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyUserControl::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyUserControl::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyUserControl::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyUserControl::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyUserControl::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyUserControl::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyUserControl::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyUserControl::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyUserControl::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyUserControl::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyUserControl::GetWidth()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyUserControl::GetHeight()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetOCXControl(LPCTSTR ProgID)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ProgID);
}

void IPropertyUserControl::SetFixHeight(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyUserControl::GetFixHeight()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyUserControl::SetFixWidth(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyUserControl::GetFixWidth()
{
	BOOL result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyGrid properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyGrid operations

LPDISPATCH IPropertyGrid::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyGrid::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyGrid::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyGrid::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyGrid::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyGrid::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyGrid::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyGrid::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyGrid::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyGrid::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyGrid::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetColumnCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetColumnCount()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetRowCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetRowCount()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetFixedColumnCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetFixedColumnCount()
{
	long result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetFixedRowCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetFixedRowCount()
{
	long result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetColumnWidth(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}

long IPropertyGrid::GetColumnWidth(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void IPropertyGrid::SetRowHeight(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}

long IPropertyGrid::GetRowHeight(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void IPropertyGrid::SetEnableEdit(long NRow, long NCol, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 NRow, NCol, bNewValue);
}

BOOL IPropertyGrid::GetEnableEdit(long NRow, long NCol)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		NRow, NCol);
	return result;
}

void IPropertyGrid::SetCellText(long NRow, long NCol, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR;
	InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 NRow, NCol, lpszNewValue);
}

CString IPropertyGrid::GetCellText(long NRow, long NCol)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		NRow, NCol);
	return result;
}

void IPropertyGrid::SetCellFormat(long NRow, long NCol, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 NRow, NCol, nNewValue);
}

long IPropertyGrid::GetCellFormat(long NRow, long NCol)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		NRow, NCol);
	return result;
}

void IPropertyGrid::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetWidth()
{
	long result;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetHeight(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetHeight()
{
	long result;
	InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x70, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyGrid::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetAutoSizeColumns(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x71, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyGrid::GetAutoSizeColumns()
{
	BOOL result;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::UpdateParam()
{
	InvokeHelper(0x72, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IPropertyGrid::SetCurrentColumn(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x73, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetCurrentColumn()
{
	long result;
	InvokeHelper(0x73, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyGrid::SetCurrentRow(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x74, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyGrid::GetCurrentRow()
{
	long result;
	InvokeHelper(0x74, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyTextButton properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyTextButton operations

LPDISPATCH IPropertyTextButton::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyTextButton::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyTextButton::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyTextButton::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyTextButton::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyTextButton::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyTextButton::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyTextButton::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyTextButton::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyTextButton::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyTextButton::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyTextButton::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyTextButton::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyTextButton::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertySpinEdit properties

/////////////////////////////////////////////////////////////////////////////
// IPropertySpinEdit operations

LPDISPATCH IPropertySpinEdit::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertySpinEdit::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertySpinEdit::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertySpinEdit::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySpinEdit::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySpinEdit::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertySpinEdit::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySpinEdit::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySpinEdit::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertySpinEdit::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySpinEdit::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySpinEdit::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertySpinEdit::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT IPropertySpinEdit::GetMinValue()
{
	VARIANT result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IPropertySpinEdit::GetMaxValue()
{
	VARIANT result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPropertySpinEdit::SetValueRange(const VARIANT& MinVal, const VARIANT& MaxVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&MinVal, &MaxVal);
	return result;
}

void IPropertySpinEdit::SetWithCheck(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySpinEdit::GetWithCheck()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetCheckState(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySpinEdit::GetCheckState()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertySpinEdit::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertySpinEdit::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertySpinEdit::GetWidth()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyFileName properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyFileName operations

LPDISPATCH IPropertyFileName::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyFileName::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyFileName::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyFileName::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyFileName::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyFileName::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyFileName::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyFileName::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyFileName::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyFileName::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyFileName::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyFileName::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyFileName::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetCreateOpenButton(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyFileName::GetCreateOpenButton()
{
	BOOL result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetBitmap(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void IPropertyFileName::SetExtension(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyFileName::GetExtension()
{
	CString result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetFilter(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyFileName::GetFilter()
{
	CString result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyFileName::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyFileName::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyFileName::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyFileName::GetWidth()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyColor properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyColor operations

LPDISPATCH IPropertyColor::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyColor::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyColor::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyColor::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyColor::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyColor::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyColor::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyColor::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyColor::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyColor::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyColor::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyColor::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyColor::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetWidth(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyColor::GetWidth()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetEnableDefaultButton(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyColor::GetEnableDefaultButton()
{
	BOOL result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetDefaultColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyColor::GetDefaultColor()
{
	long result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyColor::SetDefaultButtonName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyColor::GetDefaultButtonName()
{
	CString result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyEditList properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyEditList operations

LPDISPATCH IPropertyEditList::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyEditList::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyEditList::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyEditList::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEditList::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyEditList::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyEditList::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyEditList::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEditList::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyEditList::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyEditList::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyEditList::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyEditList::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyEditList::GetListType()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetListType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IPropertyEditList::GetItemChecked(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void IPropertyEditList::SetItemChecked(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

BOOL IPropertyEditList::GetMultySelect()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetMultySelect(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEditList::GetItemSelected(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void IPropertyEditList::SetItemSelected(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

BOOL IPropertyEditList::GetSort()
{
	BOOL result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetSort(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void IPropertyEditList::ClearList()
{
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void IPropertyEditList::Add(LPCTSTR NewVal)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NewVal);
}

void IPropertyEditList::Delete(const VARIANT& Index)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &Index);
}

long IPropertyEditList::GetItemsCount()
{
	long result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyEditList::SetItemValue(const VARIANT& Index, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_BSTR;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &Index, lpszNewValue);
}

CString IPropertyEditList::GetItemValue(const VARIANT& Index)
{
	CString result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		&Index);
	return result;
}

long IPropertyEditList::Find(const VARIANT& Val)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&Val);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyToolBar properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyToolBar operations

void IPropertyToolBar::SetButtonChecked(long BtnID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, bNewValue);
}

BOOL IPropertyToolBar::GetButtonChecked(long BtnID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyToolBar::SetButtonEnable(long BtnID, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, bNewValue);
}

BOOL IPropertyToolBar::GetButtonEnable(long BtnID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyToolBar::AddButton(long BtnID, const VARIANT& Bmp, long InsertAt)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 BtnID, &Bmp, InsertAt);
}

void IPropertyToolBar::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyToolBar::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyToolBar::SetButtonTips(long BtnID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, lpszNewValue);
}

CString IPropertyToolBar::GetButtonTips(long BtnID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyToolBar::SetButtonHint(long BtnID, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, lpszNewValue);
}

CString IPropertyToolBar::GetButtonHint(long BtnID)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		BtnID);
	return result;
}

void IPropertyToolBar::SetButtonType(long BtnID, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 BtnID, nNewValue);
}

long IPropertyToolBar::GetButtonType(long BtnID)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		BtnID);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyBmpList properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyBmpList operations

LPDISPATCH IPropertyBmpList::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyBmpList::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyBmpList::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyBmpList::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyBmpList::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyBmpList::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyBmpList::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyBmpList::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyBmpList::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyBmpList::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyBmpList::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyBmpList::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyBmpList::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::Add(LPCTSTR NewStr, const VARIANT& NewBmp)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 NewStr, &NewBmp);
}

long IPropertyBmpList::GetCount()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::ClearList()
{
	InvokeHelper(0x67, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long IPropertyBmpList::Find(LPCTSTR Val)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

void IPropertyBmpList::SetCurrentIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyBmpList::GetCurrentIndex()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyBmpList::SetResModule(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyBmpList::GetResModule()
{
	VARIANT result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IProcessInfoWindow properties

/////////////////////////////////////////////////////////////////////////////
// IProcessInfoWindow operations

void IProcessInfoWindow::SetCreateWindow(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IProcessInfoWindow::GetCreateWindow()
{
	BOOL result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProcessInfoWindow::SetWindowCaption(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProcessInfoWindow::GetWindowCaption()
{
	CString result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IProcessInfoWindow::SetCloseProcess(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IProcessInfoWindow::GetCloseProcess()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProcessInfoWindow::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IProcessInfoWindow::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IProcessInfoWindow::SetText(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IProcessInfoWindow::GetText()
{
	CString result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IProcessInfoWindow::SetHelpId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IProcessInfoWindow::GetHelpId()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyLibExplorer properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyLibExplorer operations

LPDISPATCH IPropertyLibExplorer::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyLibExplorer::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyLibExplorer::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyLibExplorer::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyLibExplorer::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyLibExplorer::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyLibExplorer::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyLibExplorer::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyLibExplorer::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyLibExplorer::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyLibExplorer::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyLibExplorer::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyLibExplorer::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyLibExplorer::GetFileName()
{
	CString result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyLibExplorer::SetRootName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyLibExplorer::GetRootName()
{
	CString result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IPropertyLibExplorer::GetFileValue()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyStyleList properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyStyleList operations

LPDISPATCH IPropertyStyleList::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyStyleList::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyStyleList::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyStyleList::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyStyleList::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyStyleList::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyStyleList::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyStyleList::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyStyleList::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyStyleList::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyStyleList::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyStyleList::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyStyleList::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IPropertyStyleList::Add(const VARIANT& Styles)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Styles);
	return result;
}

long IPropertyStyleList::GetCount()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPropertyStyleList::ClearList()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPropertyStyleList::Find(long Val)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Val);
	return result;
}

void IPropertyStyleList::SetCurrentIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyStyleList::GetCurrentIndex()
{
	long result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyStyleList::SetAnotherStyleBtnEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyStyleList::GetAnotherStyleBtnEnable()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAssociationView properties

/////////////////////////////////////////////////////////////////////////////
// IAssociationView operations

LPDISPATCH IAssociationView::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssociationView::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAssociationView::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAssociationView::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAssociationView::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAssociationView::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IAssociationView::SetNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IAssociationView::GetNumber()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IAssociationView::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBackground(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetBackground()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetVisible()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetCurrent(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetCurrent()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IAssociationView::GetColor()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IAssociationView::GetComment()
{
	CString result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetObjectCount()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAssociationView::GetX()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAssociationView::GetY()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAssociationView::GetScale()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAssociationView::GetAngle()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IAssociationView::GetViewType()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssociationView::GetLayers()
{
	LPDISPATCH result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IAssociationView::GetVariables()
{
	VARIANT result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAssociationView::GetVariable(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

long IAssociationView::GetVariablesCount()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IAssociationView::GetSourceFileName()
{
	CString result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetSourceFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IAssociationView::GetProjectionName()
{
	CString result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetProjectionName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL IAssociationView::GetExplodedView()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetExplodedView(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void IAssociationView::SetDimensionLayoutScaling(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetProjectionLink()
{
	BOOL result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetProjectionLink(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetSection()
{
	BOOL result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetSection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetUnfold()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetUnfold(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IAssociationView::GetVisibleLinesStyle()
{
	long result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetVisibleLinesStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAssociationView::GetHiddenLines()
{
	BOOL result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetHiddenLines(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::GetHiddenLinesVisible()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetHiddenLinesVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IAssociationView::GetHiddenLinesStyle()
{
	long result;
	InvokeHelper(0x7da, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetHiddenLinesStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAssociationView::GetBreakLinesVisible()
{
	BOOL result;
	InvokeHelper(0x7db, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBreakLinesVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7db, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IAssociationView::GetBreakLinesStyle()
{
	long result;
	InvokeHelper(0x7dc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBreakLinesStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7dc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAssociationView::GetBendLinesVisible()
{
	BOOL result;
	InvokeHelper(0x7dd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBendLinesVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IAssociationView::GetBendLinesStyle()
{
	long result;
	InvokeHelper(0x7de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBendLinesStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IAssociationView::GetBaseView()
{
	LPDISPATCH result;
	InvokeHelper(0x7df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBaseView(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IAssociationView::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x7e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IAssociationView::GetLocal()
{
	BOOL result;
	InvokeHelper(0x7e1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetLocal(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationView::CreateLocalView(LPDISPATCH Contour)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7e2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Contour);
	return result;
}

BOOL IAssociationView::GetSameHatch()
{
	BOOL result;
	InvokeHelper(0x7e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationView::SetSameHatch(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IViewDesignation properties

/////////////////////////////////////////////////////////////////////////////
// IViewDesignation operations

BOOL IViewDesignation::GetShowName()
{
	BOOL result;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowName(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewDesignation::GetShowUnfold()
{
	BOOL result;
	InvokeHelper(0xfa2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowUnfold(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewDesignation::GetShowScale()
{
	BOOL result;
	InvokeHelper(0xfa3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewDesignation::GetShowTurn()
{
	BOOL result;
	InvokeHelper(0xfa4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowTurn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewDesignation::GetShowAngle()
{
	BOOL result;
	InvokeHelper(0xfa5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowAngle(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewDesignation::GetShowPage()
{
	BOOL result;
	InvokeHelper(0xfa6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowPage(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewDesignation::GetShowZone()
{
	BOOL result;
	InvokeHelper(0xfa7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetShowZone(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xfa7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

CString IViewDesignation::GetDesignation()
{
	CString result;
	InvokeHelper(0xfa8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

VARIANT IViewDesignation::GetRefObject()
{
	VARIANT result;
	InvokeHelper(0xfa9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IViewDesignation::SetRefObject(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xfa9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IAssociationViewElements properties

/////////////////////////////////////////////////////////////////////////////
// IAssociationViewElements operations

BOOL IAssociationViewElements::GetProjectBodies()
{
	BOOL result;
	InvokeHelper(0x9c4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectBodies(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectSurfaces()
{
	BOOL result;
	InvokeHelper(0x9c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectSurfaces(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetHiddenObjectsVisible()
{
	BOOL result;
	InvokeHelper(0x9c6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetHiddenObjectsVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectThreads()
{
	BOOL result;
	InvokeHelper(0x9c7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectThreads(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectDimensions()
{
	BOOL result;
	InvokeHelper(0x9c8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectDimensions(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectRoughs()
{
	BOOL result;
	InvokeHelper(0x9c9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectRoughs(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectBases()
{
	BOOL result;
	InvokeHelper(0x9ca, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectBases(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9ca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectTolerances()
{
	BOOL result;
	InvokeHelper(0x9cb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectTolerances(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9cb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectPositions()
{
	BOOL result;
	InvokeHelper(0x9cc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectPositions(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9cc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectLeaders()
{
	BOOL result;
	InvokeHelper(0x9cd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectLeaders(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9cd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectMarkLeaders()
{
	BOOL result;
	InvokeHelper(0x9ce, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectMarkLeaders(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9ce, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectBrandLeaders()
{
	BOOL result;
	InvokeHelper(0x9cf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectBrandLeaders(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9cf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectHiddenComponents()
{
	BOOL result;
	InvokeHelper(0x9d0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectHiddenComponents(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9d0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectStandartElements()
{
	BOOL result;
	InvokeHelper(0x9d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectStandartElements(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectCurves()
{
	BOOL result;
	InvokeHelper(0x9d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectCurves(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectPoints()
{
	BOOL result;
	InvokeHelper(0x9d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectPoints(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectAllObjects()
{
	BOOL result;
	InvokeHelper(0x9d4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectAllObjects(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAssociationViewElements::GetProjectAllDesignations()
{
	BOOL result;
	InvokeHelper(0x9d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAssociationViewElements::SetProjectAllDesignations(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IBreakViewParam properties

/////////////////////////////////////////////////////////////////////////////
// IBreakViewParam operations

long IBreakViewParam::AddBreakLine(double X1, double Y1, double X2, double Y2, double Angle)
{
	long result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x1194, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		X1, Y1, X2, Y2, Angle);
	return result;
}

BOOL IBreakViewParam::DeleteBreakLine(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1195, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL IBreakViewParam::DeleteAllBreakLines()
{
	BOOL result;
	InvokeHelper(0x1196, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakViewParam::SetBreakLinePosition(long Index, double X1, double Y1, double X2, double Y2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x1197, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X1, Y1, X2, Y2);
	return result;
}

BOOL IBreakViewParam::GetBreakLinePosition(long Index, double* X1, double* Y1, double* X2, double* Y2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x1198, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X1, Y1, X2, Y2);
	return result;
}

BOOL IBreakViewParam::SetBreakLineParams(long Index, double Angle, double Clearance, long BreakLineType, double Amplitude, double MaxAmplitude)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x1199, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Angle, Clearance, BreakLineType, Amplitude, MaxAmplitude);
	return result;
}

BOOL IBreakViewParam::GetBreakLineParams(long Index, double* Angle, double* Clearance, long* BreakLineType, double* Amplitude, double* MaxAmplitude)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PI4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x119a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Angle, Clearance, BreakLineType, Amplitude, MaxAmplitude);
	return result;
}

long IBreakViewParam::GetBreaksCount()
{
	long result;
	InvokeHelper(0x119b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IBreakViewParam::GetBreaksVisible()
{
	BOOL result;
	InvokeHelper(0x119c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBreakViewParam::SetBreaksVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x119c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ICutViewParam properties

/////////////////////////////////////////////////////////////////////////////
// ICutViewParam operations

long ICutViewParam::AddCut(LPCTSTR Name, long Number, double X, double Y, BOOL ModelCut, LPDISPATCH Contour, LPDISPATCH View)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_R8 VTS_R8 VTS_BOOL VTS_DISPATCH VTS_DISPATCH;
	InvokeHelper(0xdac, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Name, Number, X, Y, ModelCut, Contour, View);
	return result;
}

BOOL ICutViewParam::DeleteCut(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdad, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL ICutViewParam::DeleteAllCuts()
{
	BOOL result;
	InvokeHelper(0xdae, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutViewParam::SetCutPlanePosition(long Index, double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0xdaf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y);
	return result;
}

BOOL ICutViewParam::GetCutPlanePosition(long Index, double* X, double* Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8;
	InvokeHelper(0xdb0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y);
	return result;
}

BOOL ICutViewParam::SetCutParams(long Index, LPCTSTR Name, long Number, BOOL ModelCut)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_BOOL;
	InvokeHelper(0xdb1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Name, Number, ModelCut);
	return result;
}

LPDISPATCH ICutViewParam::GetCutParams(long Index, BSTR* Name, long* Number, BOOL* ModelCut)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_PBSTR VTS_PI4 VTS_PBOOL;
	InvokeHelper(0xdb2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index, Name, Number, ModelCut);
	return result;
}

long ICutViewParam::GetCutsCount()
{
	long result;
	InvokeHelper(0xdb3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ICutViewParam::GetLocalCut(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdb4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void ICutViewParam::SetLocalCut(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xdb4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

LPDISPATCH ICutViewParam::GetHatchParam(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xdb5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IHatchParam properties

/////////////////////////////////////////////////////////////////////////////
// IHatchParam operations

long IHatchParam::GetStyle()
{
	long result;
	InvokeHelper(0x1964, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1964, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IHatchParam::GetColor()
{
	long result;
	InvokeHelper(0x1965, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1965, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IHatchParam::GetStep()
{
	double result;
	InvokeHelper(0x1966, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetStep(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1966, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHatchParam::GetHatchAngle()
{
	double result;
	InvokeHelper(0x1967, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetHatchAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1967, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IHatchParam::GetHatchType()
{
	BOOL result;
	InvokeHelper(0x1968, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetHatchType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1968, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double IHatchParam::GetWidth()
{
	double result;
	InvokeHelper(0x1969, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1969, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IHatchParam::GetIsSheetAngle()
{
	BOOL result;
	InvokeHelper(0x196a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IHatchParam::SetIsSheetAngle(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x196a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystem2D properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystem2D operations

LPDISPATCH ILocalCoordinateSystem2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystem2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystem2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystem2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem2D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILocalCoordinateSystem2D::GetName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem2D::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCoordinateSystem2D::GetX()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem2D::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCoordinateSystem2D::GetY()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem2D::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCoordinateSystem2D::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem2D::SetAxisXLabel(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILocalCoordinateSystem2D::GetAxisXLabel()
{
	CString result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystem2D::SetAxisYLabel(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ILocalCoordinateSystem2D::GetAxisYLabel()
{
	CString result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystem2D::Delete()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystems2D properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystems2D operations

LPDISPATCH ILocalCoordinateSystems2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystems2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystems2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystems2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILocalCoordinateSystems2D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystems2D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystems2D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILocalCoordinateSystems2D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILocalCoordinateSystems2D::SetCurrent(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILocalCoordinateSystems2D::GetCurrent()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IView1 properties

/////////////////////////////////////////////////////////////////////////////
// IView1 operations

LPDISPATCH IView1::GetLocalCoordinateSystems2D()
{
	LPDISPATCH result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IView1::GetEditMacroVisibleRegime()
{
	BOOL result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IView1::SetNumerator(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IView1::GetNumerator()
{
	double result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDocument2DSettings properties

/////////////////////////////////////////////////////////////////////////////
// IDocument2DSettings operations

LPDISPATCH IDocument2DSettings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDocument2DSettings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDocument2DSettings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDocument2DSettings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDocument2DSettings::SetLayersGroupWay(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDocument2DSettings::GetLayersGroupWay()
{
	long result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDocument2DSettings::SetCompositionInherit(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDocument2DSettings::GetCompositionInherit()
{
	BOOL result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingDocumentSettings properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingDocumentSettings operations

void IDrawingDocumentSettings::SetSheetAutoNumber(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingDocumentSettings::GetSheetAutoNumber()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingDocumentSettings::SetSheetFirstNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDrawingDocumentSettings::GetSheetFirstNumber()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingDocumentSettings::SetSheetAutoCount(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingDocumentSettings::GetSheetAutoCount()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingDocumentSettings::SetSheetsCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDrawingDocumentSettings::GetSheetsCount()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFragmentDocumentSettings properties

/////////////////////////////////////////////////////////////////////////////
// IFragmentDocumentSettings operations


/////////////////////////////////////////////////////////////////////////////
// ILibItemSettings properties

/////////////////////////////////////////////////////////////////////////////
// ILibItemSettings operations

long ILibItemSettings::GetItemCount()
{
	long result;
	InvokeHelper(0x1f4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

double ILibItemSettings::GetItem(const VARIANT& Index, BOOL* Use)
{
	double result;
	static BYTE parms[] =
		VTS_VARIANT VTS_PBOOL;
	InvokeHelper(0x1f5, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		&Index, Use);
	return result;
}

BOOL ILibItemSettings::SetItem(const VARIANT& Index, BOOL Use)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Index, Use);
	return result;
}

BOOL ILibItemSettings::GetItems(VARIANT* UniqIds, VARIANT* Uses)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UniqIds, Uses);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionParameters properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionParameters operations

LPDISPATCH IInsertionParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertionParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IInsertionParameters::GetFileName()
{
	CString result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

double IInsertionParameters::GetSourceHeight()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IInsertionParameters::GetSourceWidth()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IInsertionParameters::GetHeight()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IInsertionParameters::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IInsertionParameters::GetWidth()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IInsertionParameters::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IInsertionParameters::GetScale()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IInsertionParameters::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IInsertionParameters::AutoScale(BOOL ByHeight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ByHeight);
	return result;
}

long IInsertionParameters::GetAngle()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionParameters::SetAngle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IInsertionParameters::GetInsertionDefinition()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IInsertionParameters::SetInsertionDefinition(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IInsertionParameters::GetImageResolution()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IInsertionParameters::SetImageResolution(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IInsertionParameters::GetPalette()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionDefinition properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionDefinition operations

LPDISPATCH IInsertionDefinition::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionDefinition::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertionDefinition::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionDefinition::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionDefinition::GetInsertionType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionDefinition::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IInsertionDefinition::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IInsertionDefinition::SetFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IInsertionDefinition::GetFileName()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionDefinition::Open(BOOL Visible, BOOL ReadOnly)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Visible, ReadOnly);
	return result;
}

long IInsertionDefinition::GetInsertionObjectsCount()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITableCell properties

/////////////////////////////////////////////////////////////////////////////
// ITableCell operations

LPDISPATCH ITableCell::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITableCell::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITableCell::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITableCell::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITableCell::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITableCell::GetCellID()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITableCell::GetRow()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITableCell::GetColumn()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITable properties

/////////////////////////////////////////////////////////////////////////////
// ITable operations

long ITable::GetRowsCount()
{
	long result;
	InvokeHelper(0x9c5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITable::GetColumnsCount()
{
	long result;
	InvokeHelper(0x9c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITable::GetCell(long RowN, long ColN)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x9c7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		RowN, ColN);
	return result;
}

LPDISPATCH ITable::GetCellById(long CellID)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9c8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		CellID);
	return result;
}

BOOL ITable::AddColumn(long ColN, BOOL Right)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x9c9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColN, Right);
	return result;
}

BOOL ITable::DeleteColumn(long ColN)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9ca, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColN);
	return result;
}

BOOL ITable::AddRow(long RowN, BOOL Down)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x9cb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		RowN, Down);
	return result;
}

BOOL ITable::DeleteRow(long RowN)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9cc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		RowN);
	return result;
}

BOOL ITable::Clear()
{
	BOOL result;
	InvokeHelper(0x9cd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITable::GetRange(long BeginRow, long BeginColumn, long EndRow, long EndColumn)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x9ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		BeginRow, BeginColumn, EndRow, EndColumn);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITableRange properties

/////////////////////////////////////////////////////////////////////////////
// ITableRange operations

BOOL ITableRange::CombineCells()
{
	BOOL result;
	InvokeHelper(0xdad, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITableRange::DivideCells(long ColumnCount, long RowCount, BOOL PrepareCombine)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xdae, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ColumnCount, RowCount, PrepareCombine);
	return result;
}

BOOL ITableRange::ClearCells()
{
	BOOL result;
	InvokeHelper(0xdaf, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT ITableRange::GetCells()
{
	VARIANT result;
	InvokeHelper(0xdb0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITableRange::GetCellsFormat()
{
	LPDISPATCH result;
	InvokeHelper(0xdb1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITableRange::GetCellsBoundaries()
{
	LPDISPATCH result;
	InvokeHelper(0xdb2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ITableRange::GetTexts()
{
	VARIANT result;
	InvokeHelper(0xdb3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ITableRange::SetTexts(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xdb3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// ICellFormat properties

/////////////////////////////////////////////////////////////////////////////
// ICellFormat operations

long ICellFormat::GetTextStyle()
{
	long result;
	InvokeHelper(0x1195, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetTextStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1195, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICellFormat::GetReadOnly()
{
	BOOL result;
	InvokeHelper(0x1196, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetReadOnly(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1196, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICellFormat::GetOneLine()
{
	BOOL result;
	InvokeHelper(0x1197, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetOneLine(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1197, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double ICellFormat::GetLeftEdge()
{
	double result;
	InvokeHelper(0x1198, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetLeftEdge(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1198, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICellFormat::GetRightEdge()
{
	double result;
	InvokeHelper(0x1199, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetRightEdge(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1199, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICellFormat::GetSpaceBefore()
{
	double result;
	InvokeHelper(0x119a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetSpaceBefore(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x119a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICellFormat::GetSpaceAfter()
{
	double result;
	InvokeHelper(0x119b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetSpaceAfter(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x119b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICellFormat::GetWidth()
{
	double result;
	InvokeHelper(0x119c, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x119c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICellFormat::GetHeight()
{
	double result;
	InvokeHelper(0x119d, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x119d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long ICellFormat::GetHFormat()
{
	long result;
	InvokeHelper(0x119e, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetHFormat(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x119e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICellFormat::GetVFormat()
{
	BOOL result;
	InvokeHelper(0x119f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICellFormat::SetVFormat(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x119f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ICellBoundaries properties

/////////////////////////////////////////////////////////////////////////////
// ICellBoundaries operations

long ICellBoundaries::GetLineStyle(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x157d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void ICellBoundaries::SetLineStyle(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x157d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}

BOOL ICellBoundaries::GetLineVisible(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x157e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void ICellBoundaries::SetLineVisible(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x157e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ksPropertyManagerNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksPropertyManagerNotify operations

BOOL ksPropertyManagerNotify::ButtonClick(long ButtonID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ButtonID);
	return result;
}

BOOL ksPropertyManagerNotify::ChangeControlValue(LPDISPATCH Control)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Control);
	return result;
}

BOOL ksPropertyManagerNotify::ControlCommand(LPDISPATCH Control, long ButtonID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Control, ButtonID);
	return result;
}

BOOL ksPropertyManagerNotify::ButtonUpdate(long ButtonID, long* Check, BOOL* Enable)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PBOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ButtonID, Check, Enable);
	return result;
}

BOOL ksPropertyManagerNotify::ProcessActivate()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksPropertyManagerNotify::ProcessDeactivate()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksPropertyManagerNotify::CommandHelp(long Id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Id);
	return result;
}

BOOL ksPropertyManagerNotify::SelectItem(LPDISPATCH Control, long Index, BOOL Select)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4 VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Control, Index, Select);
	return result;
}

BOOL ksPropertyManagerNotify::CheckItem(LPDISPATCH Control, long Index, BOOL Check)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4 VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Control, Index, Check);
	return result;
}

BOOL ksPropertyManagerNotify::ChangeActiveTab(long TabIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		TabIndex);
	return result;
}

BOOL ksPropertyManagerNotify::EditFocus(LPDISPATCH Control, BOOL Set)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Control, Set);
	return result;
}

BOOL ksPropertyManagerNotify::UserMenuCommand(LPDISPATCH Control, long MenuID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Control, MenuID);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksPropertyUserControlNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksPropertyUserControlNotify operations

BOOL ksPropertyUserControlNotify::CreateOCX(LPDISPATCH IOcx)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		IOcx);
	return result;
}

BOOL ksPropertyUserControlNotify::DestroyOCX()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksDocumentFrameNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksDocumentFrameNotify operations

BOOL ksDocumentFrameNotify::BeginPaint(LPDISPATCH PaintObj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PaintObj);
	return result;
}

BOOL ksDocumentFrameNotify::ClosePaint(LPDISPATCH PaintObj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PaintObj);
	return result;
}

BOOL ksDocumentFrameNotify::MouseDown(short NButton, short NShiftState, long X, long Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NButton, NShiftState, X, Y);
	return result;
}

BOOL ksDocumentFrameNotify::MouseUp(short NButton, short NShiftState, long X, long Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NButton, NShiftState, X, Y);
	return result;
}

BOOL ksDocumentFrameNotify::MouseDblClick(short NButton, short NShiftState, long X, long Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NButton, NShiftState, X, Y);
	return result;
}

BOOL ksDocumentFrameNotify::BeginPaintGL(LPDISPATCH GlObj, long DrawMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GlObj, DrawMode);
	return result;
}

BOOL ksDocumentFrameNotify::ClosePaintGL(LPDISPATCH GlObj, long DrawMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GlObj, DrawMode);
	return result;
}

BOOL ksDocumentFrameNotify::AddGabarit(LPDISPATCH GabObj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		GabObj);
	return result;
}

BOOL ksDocumentFrameNotify::Activate()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocumentFrameNotify::Deactivate()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocumentFrameNotify::CloseFrame()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocumentFrameNotify::MouseMove(short NShiftState, long X, long Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NShiftState, X, Y);
	return result;
}

BOOL ksDocumentFrameNotify::ShowOcxTree(LPDISPATCH Ocx, BOOL show)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Ocx, show);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPaintObject properties

/////////////////////////////////////////////////////////////////////////////
// IPaintObject operations

long IPaintObject::GetHWND()
{
	long result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void IPaintObject::GetTransformMatrix(double* A11, double* A12, double* A13, double* A14, double* A21, double* A22, double* A23, double* A24)
{
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 A11, A12, A13, A14, A21, A22, A23, A24);
}

CString IPaintObject::GetDIBForOutput()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksGLObject properties

/////////////////////////////////////////////////////////////////////////////
// ksGLObject operations

BOOL ksGLObject::glBegin(long Mode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Mode);
	return result;
}

BOOL ksGLObject::glEnd()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksGLObject::glEnable(long Cap)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Cap);
	return result;
}

BOOL ksGLObject::glDisable(long Cap)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Cap);
	return result;
}

BOOL ksGLObject::glColor3d(double R, double G, double B)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		R, G, B);
	return result;
}

BOOL ksGLObject::glLineWidth(double W)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		W);
	return result;
}

BOOL ksGLObject::glLineStipple(long Factor, short Pattern)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Factor, Pattern);
	return result;
}

BOOL ksGLObject::glPointSize(double W)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		W);
	return result;
}

BOOL ksGLObject::glPolygonMode(long Face, long Mode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Face, Mode);
	return result;
}

BOOL ksGLObject::glVertex2d(double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y);
	return result;
}

BOOL ksGLObject::glVertex2dv(double* PData, long CountDouble)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_I4;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PData, CountDouble);
	return result;
}

BOOL ksGLObject::glVertex3d(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL ksGLObject::glVertex3dv(double* PData, long CountDouble)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_I4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PData, CountDouble);
	return result;
}

BOOL ksGLObject::glVertex4d(double X, double Y, double Z, double W)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, W);
	return result;
}

BOOL ksGLObject::glVertex4dv(double* PData, long CountDouble)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PData, CountDouble);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IGabaritObject properties

/////////////////////////////////////////////////////////////////////////////
// IGabaritObject operations

BOOL IGabaritObject::GetCurrentGabarit(long NPage, double* P1X, double* P1Y, double* P1Z, double* P2X, double* P2Y, double* P2Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NPage, P1X, P1Y, P1Z, P2X, P2Y, P2Z);
	return result;
}

BOOL IGabaritObject::AddGabarit(double X1, double Y1, double Z1, double X2, double Y2, double Z2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X1, Y1, Z1, X2, Y2, Z2);
	return result;
}

BOOL IGabaritObject::GetGabaritModifying()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksDrawingObjectNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksDrawingObjectNotify operations

BOOL ksDrawingObjectNotify::ChangeActive(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksDrawingObjectNotify::BeginDelete(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Delete(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginMove(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Move(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginRotate(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Rotate(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginScale(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Scale(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginTransform(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Transform(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginCopy(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Copy(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginSymmetry(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::Symmetry(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginProcess(long PType, const VARIANT& ObjRef)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PType, &ObjRef);
	return result;
}

BOOL ksDrawingObjectNotify::EndProcess(long PType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PType);
	return result;
}

BOOL ksDrawingObjectNotify::CreateObject(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::UpdateObject(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::BeginDestroyObject(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ksDrawingObjectNotify::DestroyObject(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksViewsAndLayersManagerNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksViewsAndLayersManagerNotify operations

BOOL ksViewsAndLayersManagerNotify::BeginEdit()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksViewsAndLayersManagerNotify::EndEdit(BOOL IsOk)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		IsOk);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksLibraryManagerNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksLibraryManagerNotify operations

BOOL ksLibraryManagerNotify::BeginAttach(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::Attach(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::BeginDetach(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::Detach(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::BeginExecute(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::EndExecute(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::SystemControlStop(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::SystemControlStart(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::AddLibraryDescription(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::DeleteLibraryDescription(LPDISPATCH PLibrary)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary);
	return result;
}

BOOL ksLibraryManagerNotify::AddInsert(LPDISPATCH PInsert, BOOL Create)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PInsert, Create);
	return result;
}

BOOL ksLibraryManagerNotify::DeleteInsert(LPDISPATCH PInsert)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PInsert);
	return result;
}

BOOL ksLibraryManagerNotify::EditInsert(LPDISPATCH PLibrary, LPDISPATCH PDoc, BOOL NewFrw)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLibrary, PDoc, NewFrw);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksSpecificationDescriptionNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksSpecificationDescriptionNotify operations

BOOL ksSpecificationDescriptionNotify::TuningSpcStyleBeginChange(LPDISPATCH Descr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr);
	return result;
}

BOOL ksSpecificationDescriptionNotify::TuningSpcStyleChange(LPDISPATCH Descr, BOOL IsOk)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr, IsOk);
	return result;
}

BOOL ksSpecificationDescriptionNotify::ChangeCurrentSpcDescription(LPDISPATCH Descr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr);
	return result;
}

BOOL ksSpecificationDescriptionNotify::SpcDescriptionAdd(LPDISPATCH Descr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr);
	return result;
}

BOOL ksSpecificationDescriptionNotify::SpcDescriptionRemove(LPDISPATCH Descr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr);
	return result;
}

BOOL ksSpecificationDescriptionNotify::SpcDescriptionBeginEdit(LPDISPATCH Descr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr);
	return result;
}

BOOL ksSpecificationDescriptionNotify::SpcDescriptionEdit(LPDISPATCH Descr, BOOL IsOk)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Descr, IsOk);
	return result;
}

BOOL ksSpecificationDescriptionNotify::SynchronizationBegin()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksSpecificationDescriptionNotify::Synchronization()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksSpecificationDescriptionNotify::BeginCalcPositions()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksSpecificationDescriptionNotify::CalcPositions()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksSpecificationDescriptionNotify::BeginCreateObject(long TypeObj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		TypeObj);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksSpecificationObjectNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksSpecificationObjectNotify operations

BOOL ksSpecificationObjectNotify::BeginDelete(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::Delete(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::CellDblClick(LPDISPATCH Obj, long Number)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj, Number);
	return result;
}

BOOL ksSpecificationObjectNotify::CellBeginEdit(LPDISPATCH Obj, long Number)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj, Number);
	return result;
}

BOOL ksSpecificationObjectNotify::ChangeCurrent(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::DocumentBeginAdd(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::DocumentAdd(LPDISPATCH Obj, LPCTSTR DocName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj, DocName);
	return result;
}

BOOL ksSpecificationObjectNotify::DocumentRemove(LPDISPATCH Obj, LPCTSTR DocName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj, DocName);
	return result;
}

BOOL ksSpecificationObjectNotify::BeginGeomChange(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::GeomChange(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::BeginProcess(long PType, LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PType, Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::EndProcess(long PType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PType);
	return result;
}

BOOL ksSpecificationObjectNotify::CreateObject(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}

BOOL ksSpecificationObjectNotify::UpdateObject(LPDISPATCH Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksLayoutSheetsNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksLayoutSheetsNotify operations

BOOL ksLayoutSheetsNotify::Add(LPDISPATCH PSheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PSheet);
	return result;
}

BOOL ksLayoutSheetsNotify::Delete(LPDISPATCH PSheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PSheet);
	return result;
}

BOOL ksLayoutSheetsNotify::Update(LPDISPATCH PSheet)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PSheet);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksModelObjectNotify properties

/////////////////////////////////////////////////////////////////////////////
// ksModelObjectNotify operations

BOOL ksModelObjectNotify::BeginDelete(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::Delete(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::Excluded(const VARIANT& Obj, BOOL Excluded)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj, Excluded);
	return result;
}

BOOL ksModelObjectNotify::Hidden(const VARIANT& Obj, BOOL _Hidden)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj, _Hidden);
	return result;
}

BOOL ksModelObjectNotify::BeginPropertyChanged(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::PropertyChanged(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::BeginPlacementChanged(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::PlacementChanged(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::BeginProcess(long PType, const VARIANT& Pbj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PType, &Pbj);
	return result;
}

BOOL ksModelObjectNotify::EndProcess(long PType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PType);
	return result;
}

BOOL ksModelObjectNotify::CreateObject(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}

BOOL ksModelObjectNotify::UpdateObject(const VARIANT& Obj)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Obj);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ksDocument3DNotify7 properties

/////////////////////////////////////////////////////////////////////////////
// ksDocument3DNotify7 operations

BOOL ksDocument3DNotify7::BeginRebuild()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocument3DNotify7::Rebuild()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocument3DNotify7::BeginChoiceMaterial()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocument3DNotify7::ChoiceMaterial(LPCTSTR Material, double Density)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Material, Density);
	return result;
}

BOOL ksDocument3DNotify7::BeginChoiceMarking()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocument3DNotify7::ChoiceMarking(LPCTSTR Marking)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Marking);
	return result;
}

BOOL ksDocument3DNotify7::BeginSetPartFromFile()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ksDocument3DNotify7::BeginCreatePartFromFile(BOOL TypeDoc, LPDISPATCH Plane)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		TypeDoc, Plane);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IModelObjectNotifyResult properties

/////////////////////////////////////////////////////////////////////////////
// IModelObjectNotifyResult operations

long IModelObjectNotifyResult::GetNotifyType()
{
	long result;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT IModelObjectNotifyResult::GetNotifyObjects()
{
	VARIANT result;
	InvokeHelper(0xfa2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

long IModelObjectNotifyResult::GetProcessType()
{
	long result;
	InvokeHelper(0xfa3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IKompasDocument3DNotifyResult properties

/////////////////////////////////////////////////////////////////////////////
// IKompasDocument3DNotifyResult operations

long IKompasDocument3DNotifyResult::GetNotifyType()
{
	long result;
	InvokeHelper(0xfa1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IKompasDocument3DNotifyResult::GetNotifyObjectType()
{
	long result;
	InvokeHelper(0xfa2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IKompasDocument3DNotifyResult::GetNotifyObject()
{
	LPDISPATCH result;
	InvokeHelper(0xfa3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IModelContainer properties

/////////////////////////////////////////////////////////////////////////////
// IModelContainer operations

VARIANT IModelContainer::GetObjects(const VARIANT& ObjType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2711, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&ObjType);
	return result;
}

LPDISPATCH IModelContainer::GetSketchs()
{
	LPDISPATCH result;
	InvokeHelper(0x2712, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelContainer::GetExtrusions()
{
	LPDISPATCH result;
	InvokeHelper(0x2713, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelContainer::GetPoints3D()
{
	LPDISPATCH result;
	InvokeHelper(0x2714, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelContainer::GetFeaturePatterns()
{
	LPDISPATCH result;
	InvokeHelper(0x2715, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelContainer::GetSurfaceThickenings()
{
	LPDISPATCH result;
	InvokeHelper(0x2716, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelContainer::GetRotateds()
{
	LPDISPATCH result;
	InvokeHelper(0x2717, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IModelContainer::GetScalings3D()
{
	LPDISPATCH result;
	InvokeHelper(0x2718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISketchs properties

/////////////////////////////////////////////////////////////////////////////
// ISketchs operations

LPDISPATCH ISketchs::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISketchs::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISketchs::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISketchs::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISketchs::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISketchs::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISketchs::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISketchs::GetSketch(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISketchs::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISketch properties

/////////////////////////////////////////////////////////////////////////////
// ISketch operations

LPDISPATCH ISketch::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISketch::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISketch::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISketch::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISketch::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISketch::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISketch::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISketch::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISketch::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISketch::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISketch::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISketch::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISketch::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISketch::SetPlane(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISketch::GetPlane()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISketch::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISketch::GetAngle()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL ISketch::GetLocation(double* X, double* Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y);
	return result;
}

BOOL ISketch::SetLocation(double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y);
	return result;
}

BOOL ISketch::GetLoftPoint(double* X, double* Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y);
	return result;
}

BOOL ISketch::SetLoftPoint(double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y);
	return result;
}

LPDISPATCH ISketch::BeginEdit()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISketch::EndEdit()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISketch::BeginEditEx(BOOL ReadOnly)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		ReadOnly);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExtrusions properties

/////////////////////////////////////////////////////////////////////////////
// IExtrusions operations

LPDISPATCH IExtrusions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtrusions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExtrusions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IExtrusions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IExtrusions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IExtrusions::GetExtrusion(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IExtrusions::Add(long ExtrusionType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		ExtrusionType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExtrusion properties

/////////////////////////////////////////////////////////////////////////////
// IExtrusion operations

LPDISPATCH IExtrusion::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusion::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtrusion::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExtrusion::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IExtrusion::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IExtrusion::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IExtrusion::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IExtrusion::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExtrusion::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExtrusion::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusion::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtrusion::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusion::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtrusion::SetSketch(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IExtrusion::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtrusion::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IExtrusion::GetDirection()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IExtrusion::SetExtrusionType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long IExtrusion::GetExtrusionType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusion::SetDepth(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IExtrusion::GetDepth(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusion::SetDraftValue(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IExtrusion::GetDraftValue(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusion::SetDraftOutward(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL IExtrusion::GetDraftOutward(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusion::SetDepthObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH IExtrusion::GetDepthObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

BOOL IExtrusion::GetSideParameters(BOOL Normal, long* ExtrusionType, double* Depth, double* DraftValue, BOOL* DraftOutward, LPDISPATCH* DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PI4 VTS_PR8 VTS_PR8 VTS_PBOOL VTS_PDISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject);
	return result;
}

BOOL IExtrusion::SetSideParameters(BOOL Normal, long ExtrusionType, double Depth, double DraftValue, BOOL DraftOutward, LPDISPATCH DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_R8 VTS_R8 VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoints3D properties

/////////////////////////////////////////////////////////////////////////////
// IPoints3D operations

LPDISPATCH IPoints3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoints3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoints3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoints3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IPoints3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IPoints3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoints3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPoints3D::GetPoint3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPoints3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFeaturePatterns properties

/////////////////////////////////////////////////////////////////////////////
// IFeaturePatterns operations

LPDISPATCH IFeaturePatterns::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeaturePatterns::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFeaturePatterns::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFeaturePatterns::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IFeaturePatterns::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IFeaturePatterns::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeaturePatterns::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IFeaturePatterns::GetFeaturePattern(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IFeaturePatterns::Add(long Type)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFeaturePattern properties

/////////////////////////////////////////////////////////////////////////////
// IFeaturePattern operations

LPDISPATCH IFeaturePattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeaturePattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFeaturePattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFeaturePattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IFeaturePattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IFeaturePattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IFeaturePattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFeaturePattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFeaturePattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFeaturePattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeaturePattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFeaturePattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeaturePattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IFeaturePattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IFeaturePattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IFeaturePattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IFeaturePattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IFeaturePattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFeaturePattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IFeaturePattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IFeaturePattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFeaturePattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void IFeaturePattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFeaturePattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFeaturePattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IFeaturePattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IFeaturePattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IFeaturePattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFeaturePattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL IFeaturePattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfaceThickenings properties

/////////////////////////////////////////////////////////////////////////////
// ISurfaceThickenings operations

LPDISPATCH ISurfaceThickenings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceThickenings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfaceThickenings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfaceThickenings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISurfaceThickenings::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISurfaceThickenings::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceThickenings::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfaceThickenings::GetSurfaceThickening(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfaceThickenings::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfaceThickening properties

/////////////////////////////////////////////////////////////////////////////
// ISurfaceThickening operations

LPDISPATCH ISurfaceThickening::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceThickening::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfaceThickening::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfaceThickening::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISurfaceThickening::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISurfaceThickening::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISurfaceThickening::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISurfaceThickening::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfaceThickening::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfaceThickening::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceThickening::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfaceThickening::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceThickening::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISurfaceThickening::SetFaces(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ISurfaceThickening::GetFaces()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRotateds properties

/////////////////////////////////////////////////////////////////////////////
// IRotateds operations

LPDISPATCH IRotateds::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotateds::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRotateds::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRotateds::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRotateds::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRotateds::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotateds::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRotateds::GetRotated(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRotateds::Add(long RotatedType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		RotatedType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRotated properties

/////////////////////////////////////////////////////////////////////////////
// IRotated operations

LPDISPATCH IRotated::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotated::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRotated::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRotated::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IRotated::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IRotated::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IRotated::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRotated::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRotated::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRotated::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotated::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRotated::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotated::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRotated::SetProfile(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IRotated::GetProfile()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRotated::SetAxis(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IRotated::GetAxis()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRotated::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IRotated::GetDirection()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRotated::SetToroidShapeType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRotated::GetToroidShapeType()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRotated::SetRotatedType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long IRotated::GetRotatedType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void IRotated::SetAngle(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IRotated::GetAngle(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void IRotated::SetAngleObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH IRotated::GetAngleObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

void IRotated::SetCutOffByPoint(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL IRotated::GetCutOffByPoint(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IScalings3D properties

/////////////////////////////////////////////////////////////////////////////
// IScalings3D operations

LPDISPATCH IScalings3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IScalings3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IScalings3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IScalings3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IScalings3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IScalings3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IScalings3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IScalings3D::GetScaling3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IScalings3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IScaling3D properties

/////////////////////////////////////////////////////////////////////////////
// IScaling3D operations

LPDISPATCH IScaling3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IScaling3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IScaling3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IScaling3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IScaling3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IScaling3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IScaling3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IScaling3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IScaling3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IScaling3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IScaling3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IScaling3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IScaling3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IScaling3D::SetShell(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IScaling3D::GetShell()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IScaling3D::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IScaling3D::GetScale()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IScaling3D::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IScaling3D::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMassInertiaParam7 properties

/////////////////////////////////////////////////////////////////////////////
// IMassInertiaParam7 operations

void IMassInertiaParam7::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMassInertiaParam7::GetXc()
{
	double result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xbba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMassInertiaParam7::GetYc()
{
	double result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetZc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMassInertiaParam7::GetZc()
{
	double result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetManualMassCentre(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbbc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMassInertiaParam7::GetManualMassCentre()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetLengthUnits(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMassInertiaParam7::GetLengthUnits()
{
	long result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetMassUnits(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMassInertiaParam7::GetMassUnits()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetManualMass(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMassInertiaParam7::GetCalculateMass()
{
	double result;
	InvokeHelper(0xbc0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetMassSettingMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMassInertiaParam7::GetMassSettingMode()
{
	long result;
	InvokeHelper(0xbc1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetManualDensity(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xbc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMassInertiaParam7::GetHandBookDensity()
{
	double result;
	InvokeHelper(0xbc3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetDensityMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMassInertiaParam7::GetDensityMode()
{
	BOOL result;
	InvokeHelper(0xbc4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetVolume()
{
	double result;
	InvokeHelper(0xbc5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetArea()
{
	double result;
	InvokeHelper(0xbc6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMassInertiaParam7::SetSourceData(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMassInertiaParam7::GetSourceData()
{
	BOOL result;
	InvokeHelper(0xbc7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMassInertiaParam7::GetActual()
{
	BOOL result;
	InvokeHelper(0xbc8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMassInertiaParam7::Calculate()
{
	BOOL result;
	InvokeHelper(0xbc9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetLx()
{
	double result;
	InvokeHelper(0xbca, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetLy()
{
	double result;
	InvokeHelper(0xbcb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetLz()
{
	double result;
	InvokeHelper(0xbcc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetLxy()
{
	double result;
	InvokeHelper(0xbcd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetLxz()
{
	double result;
	InvokeHelper(0xbce, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetLyz()
{
	double result;
	InvokeHelper(0xbcf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJx()
{
	double result;
	InvokeHelper(0xbd0, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJy()
{
	double result;
	InvokeHelper(0xbd1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJz()
{
	double result;
	InvokeHelper(0xbd2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJxy()
{
	double result;
	InvokeHelper(0xbd3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJxz()
{
	double result;
	InvokeHelper(0xbd4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJyz()
{
	double result;
	InvokeHelper(0xbd5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJx0()
{
	double result;
	InvokeHelper(0xbd6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJy0()
{
	double result;
	InvokeHelper(0xbd7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetJz0()
{
	double result;
	InvokeHelper(0xbd8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IMassInertiaParam7::GetAxisX(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xbd9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IMassInertiaParam7::GetAxisY(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xbda, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IMassInertiaParam7::GetAxisZ(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xbdb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

double IMassInertiaParam7::GetMass()
{
	double result;
	InvokeHelper(0xbdc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IMassInertiaParam7::GetDensity()
{
	double result;
	InvokeHelper(0xbdd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

CString IMassInertiaParam7::GetMaterial()
{
	CString result;
	InvokeHelper(0xbde, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

BOOL IMassInertiaParam7::SetMaterial(LPCTSTR Name, double Density)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_R8;
	InvokeHelper(0xbdf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Name, Density);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExtrusion1 properties

/////////////////////////////////////////////////////////////////////////////
// IExtrusion1 operations

void IExtrusion1::SetProfile(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IExtrusion1::GetProfile()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtrusion1::SetDirectionObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IExtrusion1::GetDirectionObject()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusion1::GetVector3D()
{
	LPDISPATCH result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtrusion1::SetCutOffByPoint(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL IExtrusion1::GetCutOffByPoint(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IThinParameters properties

/////////////////////////////////////////////////////////////////////////////
// IThinParameters operations

void IThinParameters::SetThin(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IThinParameters::GetThin()
{
	BOOL result;
	InvokeHelper(0x9c5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IThinParameters::SetThinType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9c6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IThinParameters::GetThinType()
{
	long result;
	InvokeHelper(0x9c6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IThinParameters::SetThickness(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x9c7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IThinParameters::GetThickness(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9c7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

BOOL IThinParameters::GetThinParameters(BOOL* Thin, long* ThinType, double* ThicknessNormal, double* ThicknessReverse)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBOOL VTS_PI4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x9c8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Thin, ThinType, ThicknessNormal, ThicknessReverse);
	return result;
}

BOOL IThinParameters::SetThinParameters(BOOL Thin, long ThinType, double ThicknessNormal, double ThicknessReverse)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x9c9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Thin, ThinType, ThicknessNormal, ThicknessReverse);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICutExtrusion properties

/////////////////////////////////////////////////////////////////////////////
// ICutExtrusion operations

LPDISPATCH ICutExtrusion::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutExtrusion::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutExtrusion::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutExtrusion::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ICutExtrusion::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ICutExtrusion::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ICutExtrusion::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutExtrusion::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutExtrusion::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutExtrusion::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutExtrusion::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutExtrusion::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutExtrusion::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICutExtrusion::SetSketch(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICutExtrusion::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICutExtrusion::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICutExtrusion::GetDirection()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutExtrusion::SetExtrusionType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long ICutExtrusion::GetExtrusionType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void ICutExtrusion::SetDepth(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double ICutExtrusion::GetDepth(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void ICutExtrusion::SetDraftValue(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double ICutExtrusion::GetDraftValue(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void ICutExtrusion::SetDraftOutward(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL ICutExtrusion::GetDraftOutward(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}

void ICutExtrusion::SetDepthObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH ICutExtrusion::GetDepthObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

BOOL ICutExtrusion::GetSideParameters(BOOL Normal, long* ExtrusionType, double* Depth, double* DraftValue, BOOL* DraftOutward, LPDISPATCH* DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PI4 VTS_PR8 VTS_PR8 VTS_PBOOL VTS_PDISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject);
	return result;
}

BOOL ICutExtrusion::SetSideParameters(BOOL Normal, long ExtrusionType, double Depth, double DraftValue, BOOL DraftOutward, LPDISPATCH DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_R8 VTS_R8 VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject);
	return result;
}

void ICutExtrusion::SetCut(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutExtrusion::GetCut()
{
	BOOL result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IChooseBodies7 properties

/////////////////////////////////////////////////////////////////////////////
// IChooseBodies7 operations

void IChooseBodies7::SetChooseBodiesType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IChooseBodies7::GetChooseBodiesType()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IChooseBodies7::SetBodies(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xbba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IChooseBodies7::GetBodies()
{
	VARIANT result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBody7 properties

/////////////////////////////////////////////////////////////////////////////
// IBody7 operations

LPDISPATCH IBody7::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBody7::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBody7::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBody7::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IBody7::GetGabarit(double* X1, double* Y1, double* Z1, double* X2, double* Y2, double* Z2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X1, Y1, Z1, X2, Y2, Z2);
	return result;
}

CString IBody7::GetMarking()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IBody7::SetMarking(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IBody7::GetName()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IBody7::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

BOOL IBody7::Update()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBody7::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBody7::GetHidden()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBodies properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBodies operations

LPDISPATCH ISheetMetalBodies::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBodies::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalBodies::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalBodies::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISheetMetalBodies::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISheetMetalBodies::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBodies::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalBodies::GetSheetMetalBody(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalBodies::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBody properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBody operations

LPDISPATCH ISheetMetalBody::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBody::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalBody::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalBody::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISheetMetalBody::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISheetMetalBody::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBody::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalBody::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalBody::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBody::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalBody::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBody::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetThicknessDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBody::GetThicknessDirection()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetThickness(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBody::GetThickness()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetStraighten(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBody::GetStraighten()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBody::GetRadius()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetUnfoldType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBody::GetUnfoldType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetBendCoefficient(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBody::GetBendCoefficient()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetBendValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBody::GetBendValue()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetBendReduction(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBody::GetBendReduction()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetBendTablePath(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ISheetMetalBody::GetBendTablePath()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetSketch(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalBody::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBody::GetDirection()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBody::SetExtrusionType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long ISheetMetalBody::GetExtrusionType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void ISheetMetalBody::SetDepth(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double ISheetMetalBody::GetDepth(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void ISheetMetalBody::SetDepthObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH ISheetMetalBody::GetDepthObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

BOOL ISheetMetalBody::GetSideParameters(BOOL Normal, long* ExtrusionType, double* Depth, LPDISPATCH* DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PI4 VTS_PR8 VTS_PDISPATCH;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DepthObject);
	return result;
}

BOOL ISheetMetalBody::SetSideParameters(BOOL Normal, long ExtrusionType, double Depth, LPDISPATCH DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_R8 VTS_DISPATCH;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DepthObject);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalContainer properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalContainer operations

LPDISPATCH ISheetMetalContainer::GetSheetMetalBodies()
{
	LPDISPATCH result;
	InvokeHelper(0x2af9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalContainer::GetSheetMetalBends()
{
	LPDISPATCH result;
	InvokeHelper(0x2afa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalContainer::GetSheetMetalLineBends()
{
	LPDISPATCH result;
	InvokeHelper(0x2afb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalContainer::GetSheetMetalHoles()
{
	LPDISPATCH result;
	InvokeHelper(0x2afc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalContainer::GetSheetMetalCuts()
{
	LPDISPATCH result;
	InvokeHelper(0x2afd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBends properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBends operations

LPDISPATCH ISheetMetalBends::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBends::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalBends::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalBends::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISheetMetalBends::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISheetMetalBends::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBends::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalBends::GetSheetMetalBend(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalBends::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBend properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalBend operations

LPDISPATCH ISheetMetalBend::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBend::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalBend::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalBend::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISheetMetalBend::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISheetMetalBend::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalBend::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalBend::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBend::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalBend::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalBend::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetDirection()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDisposal(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetDisposal()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetWidth()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetLengthType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetLengthType()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetInternalLength(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetInternalLength()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetLength()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetAngleType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetAngleType()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetAngle()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetOffsetType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetOffsetType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetOffset(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetOffset()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetStraighten(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetStraighten()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetLeftSideType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetLeftSideType()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDistanceLeftSide(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetDistanceLeftSide()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetLeftSideAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetLeftSideAngle()
{
	double result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDeviationLeftSide(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetDeviationLeftSide()
{
	double result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetWideningLeftSide(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetWideningLeftSide()
{
	double result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetRightSideType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetRightSideType()
{
	long result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDistanceRightSide(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetDistanceRightSide()
{
	double result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetRightSideAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetRightSideAngle()
{
	double result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDeviationRightSide(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetDeviationRightSide()
{
	double result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetWideningRightSide(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetWideningRightSide()
{
	double result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetWithoutAngleRelease(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetWithoutAngleRelease()
{
	BOOL result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetWithoutBendRelease(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetWithoutBendRelease()
{
	BOOL result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDismissalWithWidth(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetDismissalWithWidth()
{
	BOOL result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetBendRelease(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetBendRelease()
{
	long result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDismissalWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetDismissalWidth()
{
	double result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDismissalDepth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetDismissalDepth()
{
	double result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetDismissalAngleType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetDismissalAngleType()
{
	long result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetBendObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalBend::GetBendObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetInternalRadius(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalBend::GetInternalRadius()
{
	BOOL result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetRadius()
{
	double result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetUnfoldType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalBend::GetUnfoldType()
{
	long result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetBendCoefficient(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetBendCoefficient()
{
	double result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetBendValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetBendValue()
{
	double result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalBend::SetBendReduction(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalBend::GetBendReduction()
{
	double result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

CString ISheetMetalBend::GetBendTablePath()
{
	CString result;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalLineBends properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalLineBends operations

LPDISPATCH ISheetMetalLineBends::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalLineBends::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalLineBends::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalLineBends::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISheetMetalLineBends::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISheetMetalLineBends::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalLineBends::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalLineBends::GetSheetMetalLineBend(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalLineBends::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalLineBend properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalLineBend operations

LPDISPATCH ISheetMetalLineBend::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalLineBend::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalLineBend::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalLineBend::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISheetMetalLineBend::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISheetMetalLineBend::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalLineBend::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalLineBend::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalLineBend::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalLineBend::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalLineBend::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalLineBend::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalLineBend::GetDirection()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetBendLeftSideFixed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalLineBend::GetBendLeftSideFixed()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetAngleType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalLineBend::GetAngleType()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalLineBend::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetBendType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalLineBend::GetBendType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetStraighten(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalLineBend::GetStraighten()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetDismissalAngleType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalLineBend::GetDismissalAngleType()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetInternalRadius(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalLineBend::GetInternalRadius()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalLineBend::GetRadius()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetUnfoldType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalLineBend::GetUnfoldType()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetBendCoefficient(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalLineBend::GetBendCoefficient()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetBendValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalLineBend::GetBendValue()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetBendReduction(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalLineBend::GetBendReduction()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

CString ISheetMetalLineBend::GetBendTablePath()
{
	CString result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetFaces(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ISheetMetalLineBend::GetFaces()
{
	VARIANT result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISheetMetalLineBend::SetLine(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalLineBend::GetLine()
{
	LPDISPATCH result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalHoles properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalHoles operations

LPDISPATCH ISheetMetalHoles::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalHoles::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalHoles::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalHoles::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISheetMetalHoles::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISheetMetalHoles::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalHoles::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalHoles::GetSheetMetalHole(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalHoles::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalHole properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalHole operations

LPDISPATCH ISheetMetalHole::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalHole::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalHole::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalHole::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISheetMetalHole::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISheetMetalHole::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalHole::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalHole::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalHole::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalHole::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalHole::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalHole::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalHole::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalHole::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetCutType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalHole::GetCutType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetDiameter(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalHole::GetDiameter()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetDepth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalHole::GetDepth()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetBasePlane(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalHole::GetBasePlane()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetDepthObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalHole::GetDepthObject()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalHole::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalHole::SetBody(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalHole::GetBody()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalCuts properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalCuts operations

LPDISPATCH ISheetMetalCuts::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalCuts::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalCuts::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalCuts::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISheetMetalCuts::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISheetMetalCuts::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalCuts::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalCuts::GetSheetMetalCut(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISheetMetalCuts::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISheetMetalCut properties

/////////////////////////////////////////////////////////////////////////////
// ISheetMetalCut operations

LPDISPATCH ISheetMetalCut::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalCut::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalCut::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISheetMetalCut::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISheetMetalCut::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISheetMetalCut::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalCut::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalCut::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISheetMetalCut::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalCut::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISheetMetalCut::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISheetMetalCut::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetSketch(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalCut::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetCutType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISheetMetalCut::GetCutType()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetDepth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ISheetMetalCut::GetDepth()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetDepthObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalCut::GetDepthObject()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetCut(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISheetMetalCut::GetCut()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISheetMetalCut::SetBody(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISheetMetalCut::GetBody()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamDisplace properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamDisplace operations

LPDISPATCH IPoint3DParamDisplace::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamDisplace::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamDisplace::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamDisplace::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint3DParamDisplace::SetDx(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamDisplace::GetDx()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamDisplace::SetDy(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamDisplace::GetDy()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamDisplace::SetDz(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamDisplace::GetDz()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamDisplace::SetAssociationVertex(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamDisplace::GetAssociationVertex()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamDisplace::SetGuidingObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamDisplace::GetGuidingObject()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3DParamDisplace::SetDistance(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamDisplace::GetDistance()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamDisplace::GetVector3D()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamIntersect properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamIntersect operations

LPDISPATCH IPoint3DParamIntersect::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamIntersect::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamIntersect::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamIntersect::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamIntersect::SetCurveObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamIntersect::GetCurveObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamIntersect::SetSurfaceObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamIntersect::GetSurfaceObject()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IPoint3DParamIntersect::GetCartPointArray()
{
	VARIANT result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPoint3DParamIntersect::SetIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPoint3DParamIntersect::GetIndex()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamCenter properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamCenter operations

LPDISPATCH IPoint3DParamCenter::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamCenter::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamCenter::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamCenter::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamCenter::SetObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamCenter::GetObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamCurve properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamCurve operations

LPDISPATCH IPoint3DParamCurve::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamCurve::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamCurve::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamCurve::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamCurve::SetCurveObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamCurve::GetCurveObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3DParamCurve::SetOffsetType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPoint3DParamCurve::GetOffsetType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint3DParamCurve::SetOffset(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamCurve::GetOffset()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamCurve::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPoint3DParamCurve::GetDirection()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamSurface properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamSurface operations

LPDISPATCH IPoint3DParamSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamSurface::SetSurfaceObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamSurface::GetSurfaceObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3DParamSurface::SetOffsetType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPoint3DParamSurface::GetOffsetType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint3DParamSurface::SetOffset1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamSurface::GetOffset1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamSurface::SetOffset2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamSurface::GetOffset2()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamSurface::SetObject1(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamSurface::GetObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamSurface::SetObject2(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamSurface::GetObject2()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamProjection properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamProjection operations

LPDISPATCH IPoint3DParamProjection::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamProjection::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamProjection::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamProjection::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamProjection::SetAssociationVertex(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamProjection::GetAssociationVertex()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamProjection::SetSurfaceObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamProjection::GetSurfaceObject()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPoint3DParamProjection::SetGuidingObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IPoint3DParamProjection::GetGuidingObject()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamProjection::GetVector3D()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISourcePart7Params properties

/////////////////////////////////////////////////////////////////////////////
// ISourcePart7Params operations

CString ISourcePart7Params::GetSourceName()
{
	CString result;
	InvokeHelper(0x2ee1, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISourcePart7Params::SetSourceName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2ee1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ISourcePart7Params::GetSourceMarking()
{
	CString result;
	InvokeHelper(0x2ee2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISourcePart7Params::SetSourceMarking(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2ee2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ISourcePart7Params::GetDocumentAuthor()
{
	CString result;
	InvokeHelper(0x2ee3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISourcePart7Params::SetDocumentAuthor(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2ee3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

VARIANT ISourcePart7Params::GetDocumentComment()
{
	VARIANT result;
	InvokeHelper(0x2ee4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISourcePart7Params::SetDocumentComment(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2ee4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISymbols3DContainer properties

/////////////////////////////////////////////////////////////////////////////
// ISymbols3DContainer operations

LPDISPATCH ISymbols3DContainer::GetLineDimensions3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32c9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetRadialDimensions3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32ca, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetDiametralDimensions3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32cb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetAngleDimensions3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32cc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetLeaders3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32cd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetRoughs3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32ce, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetBases3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32cf, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols3DContainer::GetTolerances3D()
{
	LPDISPATCH result;
	InvokeHelper(0x32d0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILineDimensions3D properties

/////////////////////////////////////////////////////////////////////////////
// ILineDimensions3D operations

LPDISPATCH ILineDimensions3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimensions3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineDimensions3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineDimensions3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILineDimensions3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILineDimensions3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimensions3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILineDimensions3D::GetLineDimension3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILineDimensions3D::Add(long DimType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		DimType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBaseLineDimension3D properties

/////////////////////////////////////////////////////////////////////////////
// IBaseLineDimension3D operations

LPDISPATCH IBaseLineDimension3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLineDimension3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBaseLineDimension3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBaseLineDimension3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IBaseLineDimension3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IBaseLineDimension3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IBaseLineDimension3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBaseLineDimension3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLineDimension3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLineDimension3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLineDimension3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBaseLineDimension3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLineDimension3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

double IBaseLineDimension3D::GetLength()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBaseLineDimension3D::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IBaseLineDimension3D::GetObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBaseLineDimension3D::SetObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IBaseLineDimension3D::GetObject2()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBaseLineDimension3D::SetObject2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IRadialDimensions3D properties

/////////////////////////////////////////////////////////////////////////////
// IRadialDimensions3D operations

LPDISPATCH IRadialDimensions3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimensions3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRadialDimensions3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRadialDimensions3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRadialDimensions3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRadialDimensions3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimensions3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRadialDimensions3D::GetRadialDimension3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRadialDimensions3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRadialDimension3D properties

/////////////////////////////////////////////////////////////////////////////
// IRadialDimension3D operations

LPDISPATCH IRadialDimension3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimension3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRadialDimension3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRadialDimension3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IRadialDimension3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IRadialDimension3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IRadialDimension3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRadialDimension3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRadialDimension3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRadialDimension3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimension3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRadialDimension3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimension3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimension3D::GetObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRadialDimension3D::SetObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IRadialDimension3D::GetPlaneObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRadialDimension3D::SetPlaneObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IRadialDimension3D::GetDimensionType()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRadialDimension3D::SetDimensionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double IRadialDimension3D::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension3D::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IRadialDimension3D::GetSurfacePoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IRadialDimension3D::SetSurfacePoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IRadialDimension3D::GetCenterPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IRadialDimension3D::SetCenterPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDiametralDimensions3D properties

/////////////////////////////////////////////////////////////////////////////
// IDiametralDimensions3D operations

LPDISPATCH IDiametralDimensions3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimensions3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDiametralDimensions3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDiametralDimensions3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDiametralDimensions3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDiametralDimensions3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimensions3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDiametralDimensions3D::GetDiametralDimension3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDiametralDimensions3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDiametralDimension3D properties

/////////////////////////////////////////////////////////////////////////////
// IDiametralDimension3D operations

LPDISPATCH IDiametralDimension3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimension3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDiametralDimension3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDiametralDimension3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IDiametralDimension3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IDiametralDimension3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IDiametralDimension3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDiametralDimension3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDiametralDimension3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDiametralDimension3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimension3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDiametralDimension3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimension3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimension3D::GetObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IDiametralDimension3D::SetObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IDiametralDimension3D::GetPlaneObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IDiametralDimension3D::SetPlaneObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IDiametralDimension3D::GetDimensionType()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDiametralDimension3D::SetDimensionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double IDiametralDimension3D::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDiametralDimension3D::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IDiametralDimension3D::GetSurfacePoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IDiametralDimension3D::SetSurfacePoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IDiametralDimension3D::GetCenterPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IDiametralDimension3D::SetCenterPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAngleDimensions3D properties

/////////////////////////////////////////////////////////////////////////////
// IAngleDimensions3D operations

LPDISPATCH IAngleDimensions3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimensions3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAngleDimensions3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAngleDimensions3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAngleDimensions3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAngleDimensions3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimensions3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAngleDimensions3D::GetAngleDimension3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAngleDimensions3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAngleDimension3D properties

/////////////////////////////////////////////////////////////////////////////
// IAngleDimension3D operations

LPDISPATCH IAngleDimension3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimension3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAngleDimension3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAngleDimension3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IAngleDimension3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IAngleDimension3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IAngleDimension3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAngleDimension3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAngleDimension3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAngleDimension3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimension3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAngleDimension3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimension3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimension3D::GetObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAngleDimension3D::SetObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IAngleDimension3D::GetObject2()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAngleDimension3D::SetObject2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension3D::GetLength()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension3D::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IAngleDimension3D::GetDimensionType()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAngleDimension3D::SetDimensionType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAngleDimension3D::Inverse()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAngleDimension3D::GetCenterPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IAngleDimension3D::SetCenterPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILeaders3D properties

/////////////////////////////////////////////////////////////////////////////
// ILeaders3D operations

LPDISPATCH ILeaders3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeaders3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILeaders3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILeaders3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILeaders3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILeaders3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeaders3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILeaders3D::GetLeader3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILeaders3D::Add(long DimType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		DimType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBaseLeader3D properties

/////////////////////////////////////////////////////////////////////////////
// IBaseLeader3D operations

LPDISPATCH IBaseLeader3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLeader3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBaseLeader3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBaseLeader3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IBaseLeader3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IBaseLeader3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IBaseLeader3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBaseLeader3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLeader3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBaseLeader3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLeader3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBaseLeader3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBaseLeader3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBaseLeader3D::GetBasePlane()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBaseLeader3D::SetBasePlane(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IBaseLeader3D::GetPositionObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBaseLeader3D::SetPositionObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IBaseLeader3D::GetPosition(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IBaseLeader3D::SetPosition(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

long IBaseLeader3D::GetArrowType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBaseLeader3D::SetArrowType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IRoughs3D properties

/////////////////////////////////////////////////////////////////////////////
// IRoughs3D operations

LPDISPATCH IRoughs3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughs3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRoughs3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRoughs3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRoughs3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRoughs3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughs3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRoughs3D::GetRough3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRoughs3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRough3D properties

/////////////////////////////////////////////////////////////////////////////
// IRough3D operations

LPDISPATCH IRough3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRough3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRough3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRough3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IRough3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IRough3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IRough3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRough3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRough3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRough3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRough3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRough3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRough3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRough3D::GetBasePlane()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRough3D::SetBasePlane(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IRough3D::GetPositionObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRough3D::SetPositionObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IRough3D::GetPosition(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IRough3D::SetPosition(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

LPDISPATCH IRough3D::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IRough3D::GetBasePosition(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IRough3D::SetBasePosition(double X, double Y, double Z, LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, Object);
	return result;
}

BOOL IRough3D::GetShelfPosition(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IRough3D::SetShelfPosition(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBases3D properties

/////////////////////////////////////////////////////////////////////////////
// IBases3D operations

LPDISPATCH IBases3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBases3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBases3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBases3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBases3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBases3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBases3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBases3D::GetBase3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBases3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBase3D properties

/////////////////////////////////////////////////////////////////////////////
// IBase3D operations

LPDISPATCH IBase3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBase3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBase3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBase3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IBase3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IBase3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IBase3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBase3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBase3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBase3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBase3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBase3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBase3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBase3D::GetBasePlane()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBase3D::SetBasePlane(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IBase3D::GetPositionObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBase3D::SetPositionObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IBase3D::GetPosition(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IBase3D::SetPosition(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

LPDISPATCH IBase3D::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IBase3D::GetDrawType()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBase3D::SetDrawType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBase3D::GetAutoSorted()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBase3D::SetAutoSorted(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IBase3D::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IBase3D::GetBranchBeginPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IBase3D::SetBranchBeginPoint(double X, double Y, double Z, LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, Object);
	return result;
}

BOOL IBase3D::GetBranchEndPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IBase3D::SetBranchEndPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITolerances3D properties

/////////////////////////////////////////////////////////////////////////////
// ITolerances3D operations

LPDISPATCH ITolerances3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerances3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITolerances3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITolerances3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ITolerances3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ITolerances3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerances3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITolerances3D::GetTolerance3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITolerances3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITolerance3D properties

/////////////////////////////////////////////////////////////////////////////
// ITolerance3D operations

LPDISPATCH ITolerance3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerance3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITolerance3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITolerance3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ITolerance3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITolerance3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ITolerance3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITolerance3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITolerance3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITolerance3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerance3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITolerance3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerance3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITolerance3D::GetBasePlane()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITolerance3D::SetBasePlane(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH ITolerance3D::GetPositionObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITolerance3D::SetPositionObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ITolerance3D::GetPosition(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL ITolerance3D::SetPosition(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL ITolerance3D::GetArrowType(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void ITolerance3D::SetArrowType(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ILineDimension3D properties

/////////////////////////////////////////////////////////////////////////////
// ILineDimension3D operations

LPDISPATCH ILineDimension3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimension3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineDimension3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineDimension3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILineDimension3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILineDimension3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ILineDimension3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILineDimension3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineDimension3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineDimension3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimension3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineDimension3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimension3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

double ILineDimension3D::GetLength()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension3D::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILineDimension3D::GetObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILineDimension3D::SetObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILineDimension3D::GetObject2()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILineDimension3D::SetObject2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILineDimension3D::GetPlane()
{
	LPDISPATCH result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILineDimension3D::SetPlane(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// ICurveVertexParam properties

/////////////////////////////////////////////////////////////////////////////
// ICurveVertexParam operations

LPDISPATCH ICurveVertexParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICurveVertexParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICurveVertexParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICurveVertexParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICurveVertexParam::SetBuildingType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICurveVertexParam::GetBuildingType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICurveVertexParam::SetBuildingObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICurveVertexParam::GetBuildingObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICurveVertexParam::SetAssociationVertex(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICurveVertexParam::GetAssociationVertex()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICurveVertexParam::GetVertex()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICurveVertexParam::GetIndex()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICurveVertexParam::GetPointParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICurveVertexParam::SetPointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICurveVertexParam::GetPointType()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ICurveVertexParam::GetParamVertex(double* X, double* Y, double* Z, double* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, Value);
	return result;
}

BOOL ICurveVertexParam::SetParamVertex(double X, double Y, double Z, double Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, Value);
	return result;
}

BOOL ICurveVertexParam::SetParamByVertex(LPDISPATCH Obj, double Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_R8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Obj, Value);
	return result;
}

BOOL ICurveVertexParam::GetParamByDistance(double* Distance, double* Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Distance, Value);
	return result;
}

BOOL ICurveVertexParam::SetParamByDistance(double Distance, double Value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Distance, Value);
	return result;
}

LPDISPATCH ICurveVertexParam::GetVector3D()
{
	LPDISPATCH result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISplines3D properties

/////////////////////////////////////////////////////////////////////////////
// ISplines3D operations

LPDISPATCH ISplines3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplines3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISplines3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISplines3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISplines3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISplines3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplines3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISplines3D::GetSpline3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISplines3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ISplines3D::Convert(const VARIANT& Objects)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Objects);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISpline3D properties

/////////////////////////////////////////////////////////////////////////////
// ISpline3D operations

LPDISPATCH ISpline3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpline3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpline3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpline3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISpline3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISpline3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISpline3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpline3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpline3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpline3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpline3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISpline3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpline3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISpline3D::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpline3D::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpline3D::SetSplineOnPoles(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISpline3D::GetSplineOnPoles()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISpline3D::SetSplineOrder(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISpline3D::GetSplineOrder()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISpline3D::GetVertexCount()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISpline3D::GetVertexParams(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

LPDISPATCH ISpline3D::AddVertex(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

BOOL ISpline3D::DeleteVertex(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL ISpline3D::Flush()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISpline3D::ReadFromFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL ISpline3D::WriteToFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

VARIANT ISpline3D::GetVertexParamsArray()
{
	VARIANT result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL ISpline3D::GetVertexCoordinatesArray(VARIANT* Coordinates, VARIANT* Weights)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Coordinates, Weights);
	return result;
}

void ISpline3D::SetKnots(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ISpline3D::GetKnots()
{
	VARIANT result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystems properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCoordinateSystems operations

LPDISPATCH ILocalCoordinateSystems::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystems::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystems::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystems::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILocalCoordinateSystems::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILocalCoordinateSystems::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystems::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILocalCoordinateSystems::GetLocalCoordinateSystem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILocalCoordinateSystems::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCoordinateSystems::GetCurrent()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ILocalCoordinateSystems::SetCurrent(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAuxiliaryGeomContainer properties

/////////////////////////////////////////////////////////////////////////////
// IAuxiliaryGeomContainer operations

LPDISPATCH IAuxiliaryGeomContainer::GetLocalCoordinateSystems()
{
	LPDISPATCH result;
	InvokeHelper(0x36b1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetSplines3D()
{
	LPDISPATCH result;
	InvokeHelper(0x36b2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetPolyLines()
{
	LPDISPATCH result;
	InvokeHelper(0x36b3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetControlPoints()
{
	LPDISPATCH result;
	InvokeHelper(0x36b4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetConjunctivePoints()
{
	LPDISPATCH result;
	InvokeHelper(0x36b5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetSplitLines()
{
	LPDISPATCH result;
	InvokeHelper(0x36b6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetSurfacesIntersectionCurves()
{
	LPDISPATCH result;
	InvokeHelper(0x36b7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetEquidistants3D()
{
	LPDISPATCH result;
	InvokeHelper(0x36b8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetTrimmedCurves()
{
	LPDISPATCH result;
	InvokeHelper(0x36b9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetConnectCurves()
{
	LPDISPATCH result;
	InvokeHelper(0x36ba, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetFilletCurves()
{
	LPDISPATCH result;
	InvokeHelper(0x36bb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAuxiliaryGeomContainer::GetArcs3D()
{
	LPDISPATCH result;
	InvokeHelper(0x36bc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPolyLines properties

/////////////////////////////////////////////////////////////////////////////
// IPolyLines operations

LPDISPATCH IPolyLines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPolyLines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPolyLines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IPolyLines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IPolyLines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPolyLines::GetPolyLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPolyLines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPolyLine properties

/////////////////////////////////////////////////////////////////////////////
// IPolyLine operations

LPDISPATCH IPolyLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPolyLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPolyLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IPolyLine::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPolyLine::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IPolyLine::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPolyLine::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLine::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPolyLine::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLine::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPolyLine::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPolyLine::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPolyLine::SetVertexVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPolyLine::GetVertexVisible()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPolyLine::GetVertexCount()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT IPolyLine::GetEdges()
{
	VARIANT result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLine::GetVertexParams(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

BOOL IPolyLine::ReadFromFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL IPolyLine::WriteToFile(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

LPDISPATCH IPolyLine::AddVertex(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

BOOL IPolyLine::DeleteVertex(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL IPolyLine::Flush()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT IPolyLine::GetVertexParamsArray()
{
	VARIANT result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine::GetVertexCoordinatesArray(VARIANT* Coordinates, VARIANT* Radiuses)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Coordinates, Radiuses);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IControlPoints properties

/////////////////////////////////////////////////////////////////////////////
// IControlPoints operations

LPDISPATCH IControlPoints::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IControlPoints::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IControlPoints::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IControlPoints::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IControlPoints::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IControlPoints::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IControlPoints::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IControlPoints::GetControlPoint(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IControlPoints::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IControlPoint properties

/////////////////////////////////////////////////////////////////////////////
// IControlPoint operations

LPDISPATCH IControlPoint::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IControlPoint::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IControlPoint::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IControlPoint::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IControlPoint::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IControlPoint::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IControlPoint::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IControlPoint::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IControlPoint::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IControlPoint::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IControlPoint::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IControlPoint::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IControlPoint::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IControlPoint::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IControlPoint::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IControlPoint::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IControlPoint::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IControlPoint::SetZ(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IControlPoint::GetZ()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IControlPoint::SetAssociationObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IControlPoint::GetAssociationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IControlPoint::SetSymbol(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IControlPoint::GetSymbol()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IControlPoint::SetParameterType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IControlPoint::GetParameterType()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IControlPoint::GetParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IConjunctivePoints properties

/////////////////////////////////////////////////////////////////////////////
// IConjunctivePoints operations

LPDISPATCH IConjunctivePoints::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConjunctivePoints::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConjunctivePoints::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IConjunctivePoints::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IConjunctivePoints::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IConjunctivePoints::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConjunctivePoints::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IConjunctivePoints::GetConjunctivePoint(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IConjunctivePoints::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IConjunctivePoint properties

/////////////////////////////////////////////////////////////////////////////
// IConjunctivePoint operations

LPDISPATCH IConjunctivePoint::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConjunctivePoint::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConjunctivePoint::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IConjunctivePoint::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IConjunctivePoint::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IConjunctivePoint::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IConjunctivePoint::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IConjunctivePoint::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IConjunctivePoint::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConjunctivePoint::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConjunctivePoint::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConjunctivePoint::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IConjunctivePoint::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IConjunctivePoint::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetZ(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IConjunctivePoint::GetZ()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IConjunctivePoint::SetAssociationObject(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IConjunctivePoint::GetAssociationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetSymbol(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IConjunctivePoint::GetSymbol()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetParameterType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IConjunctivePoint::GetParameterType()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConjunctivePoint::GetParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IConjunctivePoint::SetDirectionObject1(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IConjunctivePoint::GetDirectionObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IConjunctivePoint::SetDirectionObject2(LPDISPATCH NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		NewVal);
	return result;
}

LPDISPATCH IConjunctivePoint::GetDirectionObject2()
{
	LPDISPATCH result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IConjunctivePoint::GetDirection1()
{
	BOOL result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetDirection1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IConjunctivePoint::GetDirection2()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IConjunctivePoint::SetDirection2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IConjunctivePoint::GetAxis(long Val)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Val);
	return result;
}

LPDISPATCH IConjunctivePoint::GetVector3D(BOOL First)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		First);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISplitLines properties

/////////////////////////////////////////////////////////////////////////////
// ISplitLines operations

LPDISPATCH ISplitLines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplitLines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISplitLines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISplitLines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISplitLines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISplitLines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplitLines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISplitLines::GetSplitLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISplitLines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISplitLine properties

/////////////////////////////////////////////////////////////////////////////
// ISplitLine operations

LPDISPATCH ISplitLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplitLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISplitLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISplitLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISplitLine::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISplitLine::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISplitLine::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISplitLine::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISplitLine::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISplitLine::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplitLine::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISplitLine::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISplitLine::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ISplitLine::SetSketch(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ISplitLine::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ISplitLine::GetFaces()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISplitLine::SetFaces(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void ISplitLine::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ISplitLine::GetDirection()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ISplitLine::SetCutObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ISplitLine::GetCutObjects()
{
	VARIANT result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfacesIntersectionCurves properties

/////////////////////////////////////////////////////////////////////////////
// ISurfacesIntersectionCurves operations

LPDISPATCH ISurfacesIntersectionCurves::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurves::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfacesIntersectionCurves::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfacesIntersectionCurves::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISurfacesIntersectionCurves::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISurfacesIntersectionCurves::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurves::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurves::GetSurfacesIntersectionCurve(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurves::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfacesIntersectionCurve properties

/////////////////////////////////////////////////////////////////////////////
// ISurfacesIntersectionCurve operations

LPDISPATCH ISurfacesIntersectionCurve::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurve::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfacesIntersectionCurve::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfacesIntersectionCurve::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISurfacesIntersectionCurve::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISurfacesIntersectionCurve::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISurfacesIntersectionCurve::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISurfacesIntersectionCurve::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfacesIntersectionCurve::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfacesIntersectionCurve::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurve::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfacesIntersectionCurve::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurve::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ISurfacesIntersectionCurve::SetObjects(const VARIANT& ObjectsArray1, const VARIANT& ObjectsArray2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&ObjectsArray1, &ObjectsArray2);
	return result;
}

BOOL ISurfacesIntersectionCurve::GetObjects(VARIANT* ObjectsArray1, VARIANT* ObjectsArray2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjectsArray1, ObjectsArray2);
	return result;
}

BOOL ISurfacesIntersectionCurve::AddObjects(BOOL ForArray1, const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ForArray1, &Objects);
	return result;
}

BOOL ISurfacesIntersectionCurve::Clear(BOOL ForArray1)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ForArray1);
	return result;
}

long ISurfacesIntersectionCurve::GetObjectsCount(BOOL ForArray1)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		ForArray1);
	return result;
}

LPDISPATCH ISurfacesIntersectionCurve::GetObject(BOOL ForArray1, long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		ForArray1, Index);
	return result;
}

BOOL ISurfacesIntersectionCurve::GetAutoCheck()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISurfacesIntersectionCurve::SetAutoCheck(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

VARIANT ISurfacesIntersectionCurve::GetEdgesChecks()
{
	VARIANT result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISurfacesIntersectionCurve::SetEdgesChecks(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

long ISurfacesIntersectionCurve::GetEdgesArraysCount()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT ISurfacesIntersectionCurve::GetEdges(long Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Index);
	return result;
}

BOOL ISurfacesIntersectionCurve::GetEdgesCheck(long EdgesArrayIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		EdgesArrayIndex);
	return result;
}

void ISurfacesIntersectionCurve::SetEdgesCheck(long EdgesArrayIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 EdgesArrayIndex, bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IEquidistants3D properties

/////////////////////////////////////////////////////////////////////////////
// IEquidistants3D operations

LPDISPATCH IEquidistants3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistants3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistants3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistants3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IEquidistants3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IEquidistants3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistants3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEquidistants3D::GetEquidistant3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEquidistants3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEquidistant3D properties

/////////////////////////////////////////////////////////////////////////////
// IEquidistant3D operations

LPDISPATCH IEquidistant3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistant3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistant3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistant3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IEquidistant3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IEquidistant3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistant3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistant3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistant3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistant3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistant3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistant3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IEquidistant3D::GetEdges()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetEdges(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void IEquidistant3D::SetOnFace(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistant3D::GetOnFace()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistant3D::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IEquidistant3D::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEquidistant3D::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetDistance(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEquidistant3D::GetDistance()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetCutMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IEquidistant3D::GetCutMode()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetKeepRadius(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistant3D::GetKeepRadius()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IEquidistant3D::SetDirFromBegin(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistant3D::GetDirFromBegin()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistant3D::GetVector3D()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITrimmedCurves properties

/////////////////////////////////////////////////////////////////////////////
// ITrimmedCurves operations

LPDISPATCH ITrimmedCurves::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedCurves::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITrimmedCurves::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITrimmedCurves::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ITrimmedCurves::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ITrimmedCurves::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedCurves::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITrimmedCurves::GetTrimmedCurve(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITrimmedCurves::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITrimmedCurve properties

/////////////////////////////////////////////////////////////////////////////
// ITrimmedCurve operations

LPDISPATCH ITrimmedCurve::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedCurve::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITrimmedCurve::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITrimmedCurve::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ITrimmedCurve::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ITrimmedCurve::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITrimmedCurve::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITrimmedCurve::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITrimmedCurve::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedCurve::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITrimmedCurve::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedCurve::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetCurve(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ITrimmedCurve::GetCurve()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetCutObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ITrimmedCurve::GetCutObject1()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetCutObject2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ITrimmedCurve::GetCutObject2()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetUseTwoCutObjecs(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITrimmedCurve::GetUseTwoCutObjecs()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetSense(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITrimmedCurve::GetSense()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetBeginParameter(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITrimmedCurve::GetBeginParameter()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ITrimmedCurve::SetEndParameter(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ITrimmedCurve::GetEndParameter()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL ITrimmedCurve::GetIntersectParameters(VARIANT* CutPoints1, VARIANT* CutPoints2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		CutPoints1, CutPoints2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IConnectCurves properties

/////////////////////////////////////////////////////////////////////////////
// IConnectCurves operations

LPDISPATCH IConnectCurves::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConnectCurves::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConnectCurves::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IConnectCurves::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IConnectCurves::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IConnectCurves::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConnectCurves::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IConnectCurves::GetConnectCurve(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IConnectCurves::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IConnectCurve properties

/////////////////////////////////////////////////////////////////////////////
// IConnectCurve operations

LPDISPATCH IConnectCurve::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConnectCurve::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConnectCurve::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IConnectCurve::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IConnectCurve::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IConnectCurve::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IConnectCurve::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IConnectCurve::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IConnectCurve::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConnectCurve::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IConnectCurve::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IConnectCurve::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetCurve1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IConnectCurve::GetCurve1()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetCurve2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IConnectCurve::GetCurve2()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetCurve1ConnectType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IConnectCurve::GetCurve1ConnectType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetCurve2ConnectType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IConnectCurve::GetCurve2ConnectType()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetCurve1ConnectVertex(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IConnectCurve::GetCurve1ConnectVertex()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetCurve2ConnectVertex(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IConnectCurve::GetCurve2ConnectVertex()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IConnectCurve::SetTension(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IConnectCurve::GetTension()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFilletCurves properties

/////////////////////////////////////////////////////////////////////////////
// IFilletCurves operations

LPDISPATCH IFilletCurves::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFilletCurves::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFilletCurves::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFilletCurves::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IFilletCurves::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IFilletCurves::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFilletCurves::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IFilletCurves::GetFilletCurve(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IFilletCurves::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFilletCurve properties

/////////////////////////////////////////////////////////////////////////////
// IFilletCurve operations

LPDISPATCH IFilletCurve::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFilletCurve::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFilletCurve::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFilletCurve::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IFilletCurve::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IFilletCurve::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IFilletCurve::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFilletCurve::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFilletCurve::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFilletCurve::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFilletCurve::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFilletCurve::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFilletCurve::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IFilletCurve::SetCurve1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IFilletCurve::GetCurve1()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IFilletCurve::SetCurve2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IFilletCurve::GetCurve2()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IFilletCurve::SetTrimCurve1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFilletCurve::GetTrimCurve1()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFilletCurve::SetTrimCurve2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFilletCurve::GetTrimCurve2()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFilletCurve::GetDirection()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IFilletCurve::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void IFilletCurve::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IFilletCurve::GetRadius()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IFilletCurve::GetCurve1CutPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IFilletCurve::SetCurve1CutPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IFilletCurve::GetCurve2CutPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IFilletCurve::SetCurve2CutPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IArcs3D properties

/////////////////////////////////////////////////////////////////////////////
// IArcs3D operations

LPDISPATCH IArcs3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcs3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArcs3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcs3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IArcs3D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IArcs3D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcs3D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IArcs3D::GetArc3D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IArcs3D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IArc3D properties

/////////////////////////////////////////////////////////////////////////////
// IArc3D operations

LPDISPATCH IArc3D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArc3D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArc3D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArc3D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IArc3D::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IArc3D::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IArc3D::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArc3D::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArc3D::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArc3D::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArc3D::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArc3D::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArc3D::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IArc3D::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArc3D::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IArc3D::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArc3D::GetDirection()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IArc3D::SetBuildingType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IArc3D::GetBuildingType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArc3D::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc3D::GetRadius()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc3D::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc3D::GetAngle1()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc3D::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc3D::GetAngle2()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IArc3D::GetPoint(long Index, double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Z);
	return result;
}

BOOL IArc3D::SetPoint(long Index, double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Z);
	return result;
}

void IArc3D::SetAssociationObject(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

LPDISPATCH IArc3D::GetAssociationObject(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

void IArc3D::SetBuildingObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IArc3D::GetBuildingObject()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArc3D::GetBuildingVectorParameters()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IArc3D::SetDirectionPointIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IArc3D::GetDirectionPointIndex()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArc3D::SetPointType(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}

long IArc3D::GetPointType(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

LPDISPATCH IArc3D::GetPointParameters(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCSAxesDirectionParam properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCSAxesDirectionParam operations

LPDISPATCH ILocalCSAxesDirectionParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCSAxesDirectionParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCSAxesDirectionParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCSAxesDirectionParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ILocalCSAxesDirectionParam::SetDirectingObject(long Axis, LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Axis, Object);
	return result;
}

LPDISPATCH ILocalCSAxesDirectionParam::GetDirectingObject(long Axis)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Axis);
	return result;
}

BOOL ILocalCSAxesDirectionParam::RotateAxis(long Axis)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Axis);
	return result;
}

void ILocalCSAxesDirectionParam::SetAngleByOwnAxis(long Axis, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Axis, newValue);
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCSEulerParam properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCSEulerParam operations

LPDISPATCH ILocalCSEulerParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCSEulerParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCSEulerParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCSEulerParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILocalCSEulerParam::SetNutationAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCSEulerParam::GetNutationAngle()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCSEulerParam::SetPrecessionAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCSEulerParam::GetPrecessionAngle()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILocalCSEulerParam::SetRotationAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILocalCSEulerParam::GetRotationAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRoughParams properties

/////////////////////////////////////////////////////////////////////////////
// IRoughParams operations

long IRoughParams::GetSignType()
{
	long result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetSignType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IRoughParams::GetRoughParamText()
{
	LPDISPATCH result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughParams::GetProcessText()
{
	LPDISPATCH result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughParams::GetBaseLengthText()
{
	LPDISPATCH result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughParams::GetTrendText()
{
	LPDISPATCH result;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IRoughParams::GetProcessingByContour()
{
	BOOL result;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetProcessingByContour(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IRoughParams::GetShelfDirection()
{
	long result;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IRoughParams::GetLeaderLength()
{
	double result;
	InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetLeaderLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRoughParams::GetLeaderAngle()
{
	double result;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetLeaderAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IRoughParams::GetArrowType()
{
	long result;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetArrowType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRoughParams::GetArrowInside()
{
	BOOL result;
	InvokeHelper(0x5e7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRoughParams::SetArrowInside(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IBranchs3D properties

/////////////////////////////////////////////////////////////////////////////
// IBranchs3D operations

long IBranchs3D::GetBranchCount()
{
	long result;
	InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IBranchs3D::GetBranchBeginPoint(double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x138a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IBranchs3D::SetBranchBeginPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x138b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IBranchs3D::GetBranchEndPoint(long Index, double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x138c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Z);
	return result;
}

BOOL IBranchs3D::SetBranchEndPoint(long Index, double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x138d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Z);
	return result;
}

void IBranchs3D::SetBranchPoints(long Index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x138e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, &newValue);
}

VARIANT IBranchs3D::GetBranchPoints(long Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Index);
	return result;
}

long IBranchs3D::GetBranchPointsCount(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

BOOL IBranchs3D::AddBranch(const VARIANT& Points, LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_DISPATCH;
	InvokeHelper(0x1390, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Points, Object);
	return result;
}

BOOL IBranchs3D::AddBranchByPoint(double X, double Y, double Z, LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_DISPATCH;
	InvokeHelper(0x1391, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z, Object);
	return result;
}

BOOL IBranchs3D::DeleteBranch(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1392, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

LPDISPATCH IBranchs3D::GetBranchObject(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1393, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

VARIANT IBranchs3D::GetBranchObjects()
{
	VARIANT result;
	InvokeHelper(0x1394, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

VARIANT IBranchs3D::GetBranchEndPoints()
{
	VARIANT result;
	InvokeHelper(0x1395, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCSOrientByObjectParam properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCSOrientByObjectParam operations

LPDISPATCH ILocalCSOrientByObjectParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCSOrientByObjectParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILocalCSOrientByObjectParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILocalCSOrientByObjectParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ILocalCSOrientByObjectParam::SetOrientationObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

LPDISPATCH ILocalCSOrientByObjectParam::GetOrientationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILocalCSObject properties

/////////////////////////////////////////////////////////////////////////////
// ILocalCSObject operations

void ILocalCSObject::SetModelObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x385, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILocalCSObject::GetModelObjectParamType()
{
	long result;
	InvokeHelper(0x385, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILocalCSObject::GetLocalCoordinateSystem()
{
	LPDISPATCH result;
	InvokeHelper(0x386, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfaceContainer properties

/////////////////////////////////////////////////////////////////////////////
// ISurfaceContainer operations

LPDISPATCH ISurfaceContainer::GetSurfacePatches()
{
	LPDISPATCH result;
	InvokeHelper(0x3a99, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetFaceRemovers()
{
	LPDISPATCH result;
	InvokeHelper(0x3a9a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetSurfaceSewers()
{
	LPDISPATCH result;
	InvokeHelper(0x3a9b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetNurbsSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3a9c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetRuledSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3a9d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetEquidistantSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3a9e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetTrimmedSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3a9f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetExtensionSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3aa0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetExtrusionSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3aa1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetRotatedSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3aa2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetMeshPointsSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3aa3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetCloudPointsSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3aa4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceContainer::GetImportedSurfaces()
{
	LPDISPATCH result;
	InvokeHelper(0x3aa5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfacePatches properties

/////////////////////////////////////////////////////////////////////////////
// ISurfacePatches operations

LPDISPATCH ISurfacePatches::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacePatches::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfacePatches::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfacePatches::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISurfacePatches::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISurfacePatches::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacePatches::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfacePatches::GetSurfacePatch(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfacePatches::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfacePatch properties

/////////////////////////////////////////////////////////////////////////////
// ISurfacePatch operations

LPDISPATCH ISurfacePatch::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacePatch::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfacePatch::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfacePatch::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISurfacePatch::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISurfacePatch::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISurfacePatch::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISurfacePatch::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfacePatch::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfacePatch::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacePatch::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfacePatch::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfacePatch::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ISurfacePatch::GetEdges()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISurfacePatch::SetEdges(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IFaceRemovers properties

/////////////////////////////////////////////////////////////////////////////
// IFaceRemovers operations

LPDISPATCH IFaceRemovers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFaceRemovers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFaceRemovers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFaceRemovers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IFaceRemovers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IFaceRemovers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFaceRemovers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IFaceRemovers::GetFaceRemover(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IFaceRemovers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IFaceRemover properties

/////////////////////////////////////////////////////////////////////////////
// IFaceRemover operations

LPDISPATCH IFaceRemover::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFaceRemover::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFaceRemover::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IFaceRemover::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IFaceRemover::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IFaceRemover::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IFaceRemover::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IFaceRemover::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFaceRemover::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IFaceRemover::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFaceRemover::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IFaceRemover::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IFaceRemover::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IFaceRemover::GetFaces()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IFaceRemover::SetFaces(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISurfaceSewers properties

/////////////////////////////////////////////////////////////////////////////
// ISurfaceSewers operations

LPDISPATCH ISurfaceSewers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceSewers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfaceSewers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfaceSewers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ISurfaceSewers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ISurfaceSewers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceSewers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfaceSewers::GetSurfaceSewer(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ISurfaceSewers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ISurfaceSewer properties

/////////////////////////////////////////////////////////////////////////////
// ISurfaceSewer operations

LPDISPATCH ISurfaceSewer::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceSewer::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfaceSewer::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ISurfaceSewer::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ISurfaceSewer::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ISurfaceSewer::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ISurfaceSewer::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ISurfaceSewer::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfaceSewer::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ISurfaceSewer::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceSewer::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ISurfaceSewer::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISurfaceSewer::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT ISurfaceSewer::GetShells()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ISurfaceSewer::SetShells(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

double ISurfaceSewer::GetPrecision()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ISurfaceSewer::SetPrecision(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ISurfaceSewer::GetCreateBody()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ISurfaceSewer::SetCreateBody(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// INurbsSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// INurbsSurfaces operations

LPDISPATCH INurbsSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbsSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long INurbsSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long INurbsSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN INurbsSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long INurbsSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbsSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH INurbsSurfaces::GetNurbsSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH INurbsSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// INurbsSurface properties

/////////////////////////////////////////////////////////////////////////////
// INurbsSurface operations

LPDISPATCH INurbsSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbsSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long INurbsSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long INurbsSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString INurbsSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void INurbsSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void INurbsSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL INurbsSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL INurbsSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL INurbsSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbsSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long INurbsSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbsSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL INurbsSurface::GetNurbsParams(BOOL ClosedV, BOOL ClosedU, long* DegreeV, long* DegreeU, long* NPV, long* NPU, VARIANT* Points, VARIANT* Weights, VARIANT* KnotsV, VARIANT* KnotsU)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ClosedV, ClosedU, DegreeV, DegreeU, NPV, NPU, Points, Weights, KnotsV, KnotsU);
	return result;
}

BOOL INurbsSurface::SetNurbsParams(BOOL ClosedV, BOOL ClosedU, long DegreeV, long DegreeU, long NPV, long NPU, const VARIANT& Points, const VARIANT& Weights, const VARIANT& KnotsV, const VARIANT& KnotsU)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ClosedV, ClosedU, DegreeV, DegreeU, NPV, NPU, &Points, &Weights, &KnotsV, &KnotsU);
	return result;
}

BOOL INurbsSurface::InitParamByFace(LPDISPATCH Face)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Face);
	return result;
}

BOOL INurbsSurface::GetClosedU()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void INurbsSurface::SetClosedU(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL INurbsSurface::GetClosedV()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void INurbsSurface::SetClosedV(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long INurbsSurface::GetBoundaryCount()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL INurbsSurface::AddBoundary(BOOL UV, BOOL Closed, long Degree, const VARIANT& Points, const VARIANT& Weights, const VARIANT& Knots, double TMin, double TMax)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_I4 VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_R8 VTS_R8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, Closed, Degree, &Points, &Weights, &Knots, TMin, TMax);
	return result;
}

BOOL INurbsSurface::GetBoundary(BOOL UV, BOOL Closed, long BoundaryIndex, long* Degree, VARIANT* Points, VARIANT* Weights, VARIANT* Knots, double* TMin, double* TMax)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_I4 VTS_PI4 VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PR8 VTS_PR8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, Closed, BoundaryIndex, Degree, Points, Weights, Knots, TMin, TMax);
	return result;
}

BOOL INurbsSurface::DeleteBoundary(long BoundaryIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		BoundaryIndex);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRuledSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// IRuledSurfaces operations

LPDISPATCH IRuledSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRuledSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRuledSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRuledSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRuledSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRuledSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRuledSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRuledSurfaces::GetRuledSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRuledSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRuledSurface properties

/////////////////////////////////////////////////////////////////////////////
// IRuledSurface operations

LPDISPATCH IRuledSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRuledSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRuledSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRuledSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IRuledSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IRuledSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IRuledSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRuledSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRuledSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRuledSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRuledSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRuledSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRuledSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRuledSurface::SetCurves1(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IRuledSurface::GetCurves1()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IRuledSurface::SetCurves2(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IRuledSurface::GetCurves2()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IRuledSurface::SetCheckSelfIntersection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRuledSurface::GetCheckSelfIntersection()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRuledSurface::SetAutoSegmentation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRuledSurface::GetAutoSegmentation()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRuledSurface::AddNewEdge(long IndexAt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		IndexAt);
	return result;
}

BOOL IRuledSurface::DeleteEdge(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

long IRuledSurface::GetEdgesCount()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IRuledSurface::SetEdgePointParam(long EdgeIndex, BOOL StartPoint, double X, double Y, double Z, double* T, LPDISPATCH Segment, LPDISPATCH AssociateVertex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_R8 VTS_R8 VTS_R8 VTS_PR8 VTS_DISPATCH VTS_DISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		EdgeIndex, StartPoint, X, Y, Z, T, Segment, AssociateVertex);
	return result;
}

BOOL IRuledSurface::GetEdgePointParam(long EdgeIndex, BOOL StartPoint, double* X, double* Y, double* Z, double* T, LPDISPATCH* Segment, LPDISPATCH* AssociateVertex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PDISPATCH VTS_PDISPATCH;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		EdgeIndex, StartPoint, X, Y, Z, T, Segment, AssociateVertex);
	return result;
}

BOOL IRuledSurface::GetEdgePointParams(VARIANT* Points1, VARIANT* T1, VARIANT* Segments1, VARIANT* AssociateVertexes1, VARIANT* Points2, VARIANT* T2, VARIANT* Segments2, VARIANT* AssociateVertexes2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Points1, T1, Segments1, AssociateVertexes1, Points2, T2, Segments2, AssociateVertexes2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEquidistantSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// IEquidistantSurfaces operations

LPDISPATCH IEquidistantSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistantSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistantSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistantSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IEquidistantSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IEquidistantSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistantSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEquidistantSurfaces::GetEquidistantSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEquidistantSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEquidistantSurface properties

/////////////////////////////////////////////////////////////////////////////
// IEquidistantSurface operations

LPDISPATCH IEquidistantSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistantSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistantSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistantSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IEquidistantSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IEquidistantSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IEquidistantSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistantSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistantSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistantSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistantSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistantSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistantSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IEquidistantSurface::SetBaseSurface(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IEquidistantSurface::GetBaseSurface()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IEquidistantSurface::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistantSurface::GetDirection()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IEquidistantSurface::SetDistance(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEquidistantSurface::GetDistance()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITrimmedSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// ITrimmedSurfaces operations

LPDISPATCH ITrimmedSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITrimmedSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITrimmedSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ITrimmedSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ITrimmedSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITrimmedSurfaces::GetTrimmedSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITrimmedSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITrimmedSurface properties

/////////////////////////////////////////////////////////////////////////////
// ITrimmedSurface operations

LPDISPATCH ITrimmedSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITrimmedSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITrimmedSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ITrimmedSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITrimmedSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ITrimmedSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITrimmedSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITrimmedSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITrimmedSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITrimmedSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITrimmedSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITrimmedSurface::SetSurface(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ITrimmedSurface::GetSurface()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ITrimmedSurface::SetCutObject(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ITrimmedSurface::GetCutObject()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ITrimmedSurface::SetSense(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITrimmedSurface::GetSense()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExtensionSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// IExtensionSurfaces operations

LPDISPATCH IExtensionSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtensionSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtensionSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExtensionSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IExtensionSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IExtensionSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtensionSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IExtensionSurfaces::GetExtensionSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IExtensionSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExtensionSurface properties

/////////////////////////////////////////////////////////////////////////////
// IExtensionSurface operations

LPDISPATCH IExtensionSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtensionSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtensionSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExtensionSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IExtensionSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IExtensionSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IExtensionSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExtensionSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExtensionSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtensionSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtensionSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtensionSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IExtensionSurface::GetEdges()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetEdges(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

void IExtensionSurface::SetExtensionType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IExtensionSurface::GetExtensionType()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetExtensionLimitType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IExtensionSurface::GetExtensionLimitType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IExtensionSurface::GetLength()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetSideEdges(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IExtensionSurface::GetSideEdges()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetDirObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IExtensionSurface::GetDirObject()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetTargetObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IExtensionSurface::GetTargetObject()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtensionSurface::SetSense(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IExtensionSurface::GetSense()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtensionSurface::GetBuildingVectorParameters()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMeshPointsSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// IMeshPointsSurfaces operations

LPDISPATCH IMeshPointsSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshPointsSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IMeshPointsSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshPointsSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMeshPointsSurfaces::GetMeshPointsSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMeshPointsSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshPointsSurfaces::Load(LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		FileName);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMeshPointsSurface properties

/////////////////////////////////////////////////////////////////////////////
// IMeshPointsSurface operations

LPDISPATCH IMeshPointsSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshPointsSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IMeshPointsSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IMeshPointsSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshPointsSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMeshPointsSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMeshPointsSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshPointsSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshPointsSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurface::GetBuildingType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetBuildingType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMeshPointsSurface::GetParams(BOOL* ClosedV, BOOL* ClosedU, long* DegreeV, long* DegreeU, long* PointsVCount, long* PointsUCount, VARIANT* Points, VARIANT* Weights)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBOOL VTS_PBOOL VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ClosedV, ClosedU, DegreeV, DegreeU, PointsVCount, PointsUCount, Points, Weights);
	return result;
}

BOOL IMeshPointsSurface::SetParams(BOOL ClosedV, BOOL ClosedU, long DegreeV, long DegreeU, long PointsVCount, long PointsUCount, const VARIANT& Points, const VARIANT& Weights)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ClosedV, ClosedU, DegreeV, DegreeU, PointsVCount, PointsUCount, &Points, &Weights);
	return result;
}

BOOL IMeshPointsSurface::InitParamByFace(LPDISPATCH Face)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Face);
	return result;
}

BOOL IMeshPointsSurface::GetClosedU()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetClosedU(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshPointsSurface::GetClosedV()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetClosedV(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IMeshPointsSurface::GetDegreeU()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetDegreeU(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMeshPointsSurface::GetDegreeV()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetDegreeV(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMeshPointsSurface::BeginPointsSeries(BOOL UV, long IndexAt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, IndexAt);
	return result;
}

LPDISPATCH IMeshPointsSurface::AddPoint(double X, double Y, double Z, double Weight, long PointType, LPDISPATCH AssociationObject)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_I4 VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Z, Weight, PointType, AssociationObject);
	return result;
}

BOOL IMeshPointsSurface::EndPointsSeries()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMeshPointsSurface::AddPointsSeries(BOOL UV, long IndexAt, const VARIANT& Points, const VARIANT& Weights)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, IndexAt, &Points, &Weights);
	return result;
}

BOOL IMeshPointsSurface::DeletePointsSeries(BOOL UV, long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, Index);
	return result;
}

BOOL IMeshPointsSurface::ClearPointsSeries()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurface::GetPointsVCount()
{
	long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMeshPointsSurface::GetPointsUCount()
{
	long result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetPointType(long UIndex, long VIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 UIndex, VIndex, nNewValue);
}

long IMeshPointsSurface::GetPointType(long UIndex, long VIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		UIndex, VIndex);
	return result;
}

LPDISPATCH IMeshPointsSurface::GetPointParameters(long UIndex, long VIndex)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		UIndex, VIndex);
	return result;
}

BOOL IMeshPointsSurface::GetPoint(long UIndex, long VIndex, double* X, double* Y, double* Z, double* Weight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UIndex, VIndex, X, Y, Z, Weight);
	return result;
}

BOOL IMeshPointsSurface::SetPoint(long UIndex, long VIndex, double X, double Y, double Z, double Weight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UIndex, VIndex, X, Y, Z, Weight);
	return result;
}

BOOL IMeshPointsSurface::GetCheckSelfIntersection()
{
	BOOL result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshPointsSurface::SetCheckSelfIntersection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void IMeshPointsSurface::SetAssociationObject(long UIndex, long VIndex, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 UIndex, VIndex, newValue);
}

LPDISPATCH IMeshPointsSurface::GetAssociationObject(long UIndex, long VIndex)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		UIndex, VIndex);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICloudPointsSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// ICloudPointsSurfaces operations

LPDISPATCH ICloudPointsSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICloudPointsSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ICloudPointsSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICloudPointsSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICloudPointsSurfaces::GetCloudPointsSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICloudPointsSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICloudPointsSurfaces::Load(LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		FileName);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICloudPointsSurface properties

/////////////////////////////////////////////////////////////////////////////
// ICloudPointsSurface operations

LPDISPATCH ICloudPointsSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICloudPointsSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ICloudPointsSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ICloudPointsSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICloudPointsSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICloudPointsSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICloudPointsSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICloudPointsSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICloudPointsSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICloudPointsSurface::GetBuildingType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetBuildingType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

VARIANT ICloudPointsSurface::GetPoints()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetPoints(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

long ICloudPointsSurface::GetDegree()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetDegree(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICloudPointsSurface::GetCloudType()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetCloudType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH ICloudPointsSurface::GetCloudLCS()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetCloudLCS(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL ICloudPointsSurface::GetFixedPosition()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetFixedPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ICloudPointsSurface::AddPoint(double X, double Y, double Z, long PVal, LPDISPATCH AssociationObject)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_I4 VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Z, PVal, AssociationObject);
	return result;
}

long ICloudPointsSurface::GetPointsCount()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetPointType(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}

long ICloudPointsSurface::GetPointType(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

LPDISPATCH ICloudPointsSurface::GetPointParameters(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

void ICloudPointsSurface::SetAssociationObject(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

LPDISPATCH ICloudPointsSurface::GetAssociationObject(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

BOOL ICloudPointsSurface::GetCheckSelfIntersection()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICloudPointsSurface::SetCheckSelfIntersection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICloudPointsSurface::ClearPoints()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICloudPointsSurface::AddPoints(const VARIANT& Points)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Points);
	return result;
}

BOOL ICloudPointsSurface::GetPoint(long Index, double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Z);
	return result;
}

BOOL ICloudPointsSurface::SetPoint(long Index, double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Z);
	return result;
}

BOOL ICloudPointsSurface::DeletePoint(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IImportedSurfaces properties

/////////////////////////////////////////////////////////////////////////////
// IImportedSurfaces operations

LPDISPATCH IImportedSurfaces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IImportedSurfaces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IImportedSurfaces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IImportedSurfaces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IImportedSurfaces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IImportedSurfaces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IImportedSurfaces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IImportedSurfaces::GetImportedSurface(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IImportedSurfaces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IImportedSurfaces::Load(LPCTSTR FileName, BOOL SewSurfaces)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		FileName, SewSurfaces);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IImportedSurface properties

/////////////////////////////////////////////////////////////////////////////
// IImportedSurface operations

LPDISPATCH IImportedSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IImportedSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IImportedSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IImportedSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IImportedSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IImportedSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IImportedSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IImportedSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IImportedSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IImportedSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IImportedSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IImportedSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IImportedSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

VARIANT IImportedSurface::GetPoints(long* UPCount, long* VPCount)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		UPCount, VPCount);
	return result;
}

BOOL IImportedSurface::SetPoints(long UPCount, long VPCount, const VARIANT& Points)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UPCount, VPCount, &Points);
	return result;
}

BOOL IImportedSurface::ClearPointsSeries()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IImportedSurface::BeginPointsSeries(BOOL UV, long IndexAt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, IndexAt);
	return result;
}

BOOL IImportedSurface::AddPoint(double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Z);
	return result;
}

BOOL IImportedSurface::EndPointsSeries()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IImportedSurface::AddPointsSeries(BOOL UV, long IndexAt, const VARIANT& arr)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, IndexAt, &arr);
	return result;
}

long IImportedSurface::GetPointsVCount()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IImportedSurface::GetPointsUCount()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IImportedSurface::GetPoint(long UIndex, long VIndex, double* X, double* Y, double* Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UIndex, VIndex, X, Y, Z);
	return result;
}

BOOL IImportedSurface::SetPoint(long UIndex, long VIndex, double X, double Y, double Z)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UIndex, VIndex, X, Y, Z);
	return result;
}

BOOL IImportedSurface::DeletePointsSeries(BOOL UV, long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		UV, Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IColorParam7 properties

/////////////////////////////////////////////////////////////////////////////
// IColorParam7 operations

long IColorParam7::GetUseColor()
{
	long result;
	InvokeHelper(0x1771, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetUseColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1771, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColorParam7::GetColor()
{
	long result;
	InvokeHelper(0x1772, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetColor(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1772, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IColorParam7::GetAmbient()
{
	double result;
	InvokeHelper(0x1773, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetAmbient(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1773, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColorParam7::GetDiffuse()
{
	double result;
	InvokeHelper(0x1774, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetDiffuse(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1774, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColorParam7::GetSpecularity()
{
	double result;
	InvokeHelper(0x1775, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetSpecularity(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1775, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColorParam7::GetShininess()
{
	double result;
	InvokeHelper(0x1776, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetShininess(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1776, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColorParam7::GetTransparency()
{
	double result;
	InvokeHelper(0x1777, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetTransparency(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1777, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColorParam7::GetEmission()
{
	double result;
	InvokeHelper(0x1778, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColorParam7::SetEmission(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1778, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IColorParam7::GetAdvancedColor(long* Color, double* Ambient, double* Diffuse, double* Specularity, double* Shininess, double* Transparency, double* Emission)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x1779, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Color, Ambient, Diffuse, Specularity, Shininess, Transparency, Emission);
	return result;
}

BOOL IColorParam7::SetAdvancedColor(long Color, double Ambient, double Diffuse, double Specularity, double Shininess, double Transparency, double Emission)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x177a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Color, Ambient, Diffuse, Specularity, Shininess, Transparency, Emission);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILinearPattern properties

/////////////////////////////////////////////////////////////////////////////
// ILinearPattern operations

LPDISPATCH ILinearPattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILinearPattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILinearPattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILinearPattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ILinearPattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ILinearPattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILinearPattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILinearPattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILinearPattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILinearPattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILinearPattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILinearPattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ILinearPattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ILinearPattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL ILinearPattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILinearPattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL ILinearPattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ILinearPattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILinearPattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void ILinearPattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILinearPattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILinearPattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILinearPattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILinearPattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL ILinearPattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void ILinearPattern::SetAxis1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILinearPattern::GetAxis1()
{
	LPDISPATCH result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILinearPattern::GetVector1()
{
	LPDISPATCH result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILinearPattern::GetAngle1()
{
	double result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetDirection1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILinearPattern::GetDirection1()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetStep1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILinearPattern::GetStep1()
{
	double result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetBoundaryInstancesStepFactor1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILinearPattern::GetBoundaryInstancesStepFactor1()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetCount1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILinearPattern::GetCount1()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetAxis2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ILinearPattern::GetAxis2()
{
	LPDISPATCH result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILinearPattern::GetVector2()
{
	LPDISPATCH result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILinearPattern::GetAngle2()
{
	double result;
	InvokeHelper(0x6e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetDirection2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILinearPattern::GetDirection2()
{
	BOOL result;
	InvokeHelper(0x6f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetStep2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x70, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILinearPattern::GetStep2()
{
	double result;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetBoundaryInstancesStepFactor2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x71, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ILinearPattern::GetBoundaryInstancesStepFactor2()
{
	BOOL result;
	InvokeHelper(0x71, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetCount2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x72, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILinearPattern::GetCount2()
{
	long result;
	InvokeHelper(0x72, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILinearPattern::SetBuildingType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x73, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILinearPattern::GetBuildingType()
{
	long result;
	InvokeHelper(0x73, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL ILinearPattern::SetBaseExemplarPlacement(long Index1, long Index2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL ILinearPattern::GetBaseExemplarPlacement(long* Index1, long* Index2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index1, Index2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPointDrivenPattern properties

/////////////////////////////////////////////////////////////////////////////
// IPointDrivenPattern operations

LPDISPATCH IPointDrivenPattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPointDrivenPattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPointDrivenPattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPointDrivenPattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IPointDrivenPattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPointDrivenPattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IPointDrivenPattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPointDrivenPattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPointDrivenPattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPointDrivenPattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPointDrivenPattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPointDrivenPattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPointDrivenPattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPointDrivenPattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPointDrivenPattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPointDrivenPattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPointDrivenPattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPointDrivenPattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPointDrivenPattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IPointDrivenPattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IPointDrivenPattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPointDrivenPattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void IPointDrivenPattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPointDrivenPattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPointDrivenPattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPointDrivenPattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPointDrivenPattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPointDrivenPattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPointDrivenPattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL IPointDrivenPattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void IPointDrivenPattern::SetDrivenObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPointDrivenPattern::GetDrivenObjects()
{
	VARIANT result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPointDrivenPattern::IsSuitableDrivenObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IPointDrivenPattern::ClearDrivenObjects()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPointDrivenPattern::SetProjectionPoints(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPointDrivenPattern::GetProjectionPoints()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICircularPattern properties

/////////////////////////////////////////////////////////////////////////////
// ICircularPattern operations

LPDISPATCH ICircularPattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircularPattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircularPattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircularPattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ICircularPattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ICircularPattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularPattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircularPattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircularPattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircularPattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircularPattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircularPattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ICircularPattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ICircularPattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL ICircularPattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircularPattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL ICircularPattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ICircularPattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircularPattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void ICircularPattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularPattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICircularPattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICircularPattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircularPattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL ICircularPattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void ICircularPattern::SetAxis(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICircularPattern::GetAxis()
{
	LPDISPATCH result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetStep1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularPattern::GetStep1()
{
	double result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetBoundaryInstancesStepFactor1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularPattern::GetBoundaryInstancesStepFactor1()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetCount1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICircularPattern::GetCount1()
{
	long result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetStep2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularPattern::GetStep2()
{
	double result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetBoundaryInstancesStepFactor2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularPattern::GetBoundaryInstancesStepFactor2()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetCount2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICircularPattern::GetCount2()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetSaveInitialOrientation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularPattern::GetSaveInitialOrientation()
{
	BOOL result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularPattern::SetReverseDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularPattern::GetReverseDirection()
{
	BOOL result;
	InvokeHelper(0x6d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircularPattern::SetBaseExemplarPlacement(long Index1, long Index2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL ICircularPattern::GetBaseExemplarPlacement(long* Index1, long* Index2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index1, Index2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPathPattern properties

/////////////////////////////////////////////////////////////////////////////
// IPathPattern operations

LPDISPATCH IPathPattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPathPattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPathPattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPathPattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IPathPattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IPathPattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPathPattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPathPattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPathPattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPathPattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPathPattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPathPattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPathPattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPathPattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPathPattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPathPattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IPathPattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IPathPattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPathPattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void IPathPattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPathPattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPathPattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPathPattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPathPattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL IPathPattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void IPathPattern::SetCurves(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPathPattern::GetCurves()
{
	VARIANT result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPathPattern::GetCount()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetStartingPoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPathPattern::GetStartingPoint()
{
	LPDISPATCH result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetByStep(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPathPattern::GetByStep()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetStep(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPathPattern::GetStep()
{
	double result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetBoundaryInstancesStepFactor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPathPattern::GetBoundaryInstancesStepFactor()
{
	BOOL result;
	InvokeHelper(0x6a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetSaveInitialOrientation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPathPattern::GetSaveInitialOrientation()
{
	BOOL result;
	InvokeHelper(0x6b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPathPattern::SetReverseDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPathPattern::GetReverseDirection()
{
	BOOL result;
	InvokeHelper(0x6c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDerivedPattern properties

/////////////////////////////////////////////////////////////////////////////
// IDerivedPattern operations

LPDISPATCH IDerivedPattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDerivedPattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDerivedPattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDerivedPattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IDerivedPattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IDerivedPattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDerivedPattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDerivedPattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDerivedPattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDerivedPattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDerivedPattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDerivedPattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IDerivedPattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IDerivedPattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IDerivedPattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDerivedPattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IDerivedPattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IDerivedPattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDerivedPattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void IDerivedPattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDerivedPattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDerivedPattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IDerivedPattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDerivedPattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL IDerivedPattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void IDerivedPattern::SetMasterPattern(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IDerivedPattern::GetMasterPattern()
{
	LPDISPATCH result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetOrientBySample(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDerivedPattern::GetOrientBySample()
{
	BOOL result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetSampleExemplar(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IDerivedPattern::GetSampleExemplar()
{
	LPDISPATCH result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetAllowNesting(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x68, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDerivedPattern::GetAllowNesting()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDerivedPattern::SetAllowDeleted(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x69, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDerivedPattern::GetAllowDeleted()
{
	BOOL result;
	InvokeHelper(0x69, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DBy2VertexesParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DBy2VertexesParameters operations

LPDISPATCH IVector3DBy2VertexesParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DBy2VertexesParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DBy2VertexesParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DBy2VertexesParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DBy2VertexesParameters::SetVertex1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DBy2VertexesParameters::GetVertex1()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DBy2VertexesParameters::SetVertex2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DBy2VertexesParameters::GetVertex2()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DBy2VertexesParameters::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DBy2VertexesParameters::GetDirection()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMirrorPattern properties

/////////////////////////////////////////////////////////////////////////////
// IMirrorPattern operations

LPDISPATCH IMirrorPattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMirrorPattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMirrorPattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMirrorPattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IMirrorPattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMirrorPattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IMirrorPattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMirrorPattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMirrorPattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMirrorPattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMirrorPattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMirrorPattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMirrorPattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IMirrorPattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IMirrorPattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IMirrorPattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IMirrorPattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IMirrorPattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMirrorPattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL IMirrorPattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL IMirrorPattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMirrorPattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void IMirrorPattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMirrorPattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMirrorPattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMirrorPattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMirrorPattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IMirrorPattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMirrorPattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL IMirrorPattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void IMirrorPattern::SetPlane(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IMirrorPattern::GetPlane()
{
	LPDISPATCH result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IMirrorPattern::SetSaveInitialObjects(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMirrorPattern::GetSaveInitialObjects()
{
	BOOL result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DByCoefficientsParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DByCoefficientsParameters operations

LPDISPATCH IVector3DByCoefficientsParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DByCoefficientsParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DByCoefficientsParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DByCoefficientsParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByCoefficientsParameters::SetLocalCS(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DByCoefficientsParameters::GetLocalCS()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DByCoefficientsParameters::SetCoefficientByX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DByCoefficientsParameters::GetCoefficientByX()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVector3DByCoefficientsParameters::SetCoefficientByY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DByCoefficientsParameters::GetCoefficientByY()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVector3DByCoefficientsParameters::SetCoefficientByZ(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DByCoefficientsParameters::GetCoefficientByZ()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DBy2AnglesParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DBy2AnglesParameters operations

LPDISPATCH IVector3DBy2AnglesParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DBy2AnglesParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DBy2AnglesParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DBy2AnglesParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DBy2AnglesParameters::SetLocalCS(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DBy2AnglesParameters::GetLocalCS()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DBy2AnglesParameters::SetAngleA(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DBy2AnglesParameters::GetAngleA()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVector3DBy2AnglesParameters::SetAngleB(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DBy2AnglesParameters::GetAngleB()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DByLocalCSParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DByLocalCSParameters operations

LPDISPATCH IVector3DByLocalCSParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DByLocalCSParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DByLocalCSParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DByLocalCSParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByLocalCSParameters::SetLocalCS(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DByLocalCSParameters::GetLocalCS()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DByLocalCSParameters::SetAxisType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IVector3DByLocalCSParameters::GetAxisType()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByLocalCSParameters::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DByLocalCSParameters::GetAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVector3DByLocalCSParameters::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DByLocalCSParameters::GetDirection()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DByObjectParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DByObjectParameters operations

LPDISPATCH IVector3DByObjectParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DByObjectParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DByObjectParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DByObjectParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByObjectParameters::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DByObjectParameters::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DByObjectParameters::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DByObjectParameters::GetDirection()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DAlongSurfaceNormalParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DAlongSurfaceNormalParameters operations

LPDISPATCH IVector3DAlongSurfaceNormalParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DAlongSurfaceNormalParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DAlongSurfaceNormalParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DAlongSurfaceNormalParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DAlongSurfaceNormalParameters::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DAlongSurfaceNormalParameters::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DAlongSurfaceNormalParameters::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DAlongSurfaceNormalParameters::GetDirection()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IVector3DAlongSurfaceNormalParameters::SetU(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DAlongSurfaceNormalParameters::GetU()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVector3DAlongSurfaceNormalParameters::SetV(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DAlongSurfaceNormalParameters::GetV()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DByCurveParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DByCurveParameters operations

LPDISPATCH IVector3DByCurveParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DByCurveParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DByCurveParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DByCurveParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByCurveParameters::SetCurve(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IVector3DByCurveParameters::GetCurve()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IVector3DByCurveParameters::SetOffset(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IVector3DByCurveParameters::GetOffset()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IVector3DByCurveParameters::SetVectorType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IVector3DByCurveParameters::GetVectorType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByCurveParameters::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DByCurveParameters::GetDirection()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IVector3DByScreenNormalParameters properties

/////////////////////////////////////////////////////////////////////////////
// IVector3DByScreenNormalParameters operations

LPDISPATCH IVector3DByScreenNormalParameters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IVector3DByScreenNormalParameters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IVector3DByScreenNormalParameters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IVector3DByScreenNormalParameters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IVector3DByScreenNormalParameters::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DByScreenNormalParameters::GetDirection()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IVector3DByScreenNormalParameters::SetFix(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IVector3DByScreenNormalParameters::GetFix()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICutRotated properties

/////////////////////////////////////////////////////////////////////////////
// ICutRotated operations

LPDISPATCH ICutRotated::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutRotated::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutRotated::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutRotated::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ICutRotated::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ICutRotated::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ICutRotated::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutRotated::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutRotated::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutRotated::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutRotated::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutRotated::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutRotated::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICutRotated::SetProfile(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICutRotated::GetProfile()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICutRotated::SetAxis(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICutRotated::GetAxis()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICutRotated::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICutRotated::GetDirection()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutRotated::SetToroidShapeType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutRotated::GetToroidShapeType()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICutRotated::SetRotatedType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long ICutRotated::GetRotatedType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void ICutRotated::SetAngle(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double ICutRotated::GetAngle(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void ICutRotated::SetAngleObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH ICutRotated::GetAngleObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

void ICutRotated::SetCutOffByPoint(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL ICutRotated::GetCutOffByPoint(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}

void ICutRotated::SetCut(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutRotated::GetCut()
{
	BOOL result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRotatedSurface properties

/////////////////////////////////////////////////////////////////////////////
// IRotatedSurface operations

LPDISPATCH IRotatedSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotatedSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRotatedSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRotatedSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IRotatedSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IRotatedSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IRotatedSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRotatedSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRotatedSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRotatedSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotatedSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRotatedSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRotatedSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRotatedSurface::SetProfile(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IRotatedSurface::GetProfile()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRotatedSurface::SetAxis(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IRotatedSurface::GetAxis()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRotatedSurface::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IRotatedSurface::GetDirection()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRotatedSurface::SetToroidShapeType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRotatedSurface::GetToroidShapeType()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRotatedSurface::SetRotatedType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long IRotatedSurface::GetRotatedType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void IRotatedSurface::SetAngle(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IRotatedSurface::GetAngle(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void IRotatedSurface::SetAngleObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH IRotatedSurface::GetAngleObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

void IRotatedSurface::SetCutOffByPoint(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL IRotatedSurface::GetCutOffByPoint(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}

void IRotatedSurface::SetClosedShell(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRotatedSurface::GetClosedShell()
{
	BOOL result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExtrusionSurface properties

/////////////////////////////////////////////////////////////////////////////
// IExtrusionSurface operations

LPDISPATCH IExtrusionSurface::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusionSurface::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtrusionSurface::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExtrusionSurface::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IExtrusionSurface::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IExtrusionSurface::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void IExtrusionSurface::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IExtrusionSurface::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExtrusionSurface::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExtrusionSurface::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusionSurface::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExtrusionSurface::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExtrusionSurface::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtrusionSurface::SetSketch(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IExtrusionSurface::GetSketch()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IExtrusionSurface::SetDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IExtrusionSurface::GetDirection()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IExtrusionSurface::SetExtrusionType(BOOL Normal, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, nNewValue);
}

long IExtrusionSurface::GetExtrusionType(BOOL Normal)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusionSurface::SetDepth(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IExtrusionSurface::GetDepth(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusionSurface::SetDraftValue(BOOL Normal, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

double IExtrusionSurface::GetDraftValue(BOOL Normal)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusionSurface::SetDraftOutward(BOOL Normal, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, bNewValue);
}

BOOL IExtrusionSurface::GetDraftOutward(BOOL Normal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Normal);
	return result;
}

void IExtrusionSurface::SetDepthObject(BOOL Normal, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Normal, newValue);
}

LPDISPATCH IExtrusionSurface::GetDepthObject(BOOL Normal)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Normal);
	return result;
}

BOOL IExtrusionSurface::GetSideParameters(BOOL Normal, long* ExtrusionType, double* Depth, double* DraftValue, BOOL* DraftOutward, LPDISPATCH* DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PI4 VTS_PR8 VTS_PR8 VTS_PBOOL VTS_PDISPATCH;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject);
	return result;
}

BOOL IExtrusionSurface::SetSideParameters(BOOL Normal, long ExtrusionType, double Depth, double DraftValue, BOOL DraftOutward, LPDISPATCH DepthObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4 VTS_R8 VTS_R8 VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Normal, ExtrusionType, Depth, DraftValue, DraftOutward, DepthObject);
	return result;
}

void IExtrusionSurface::SetClosedShell(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IExtrusionSurface::GetClosedShell()
{
	BOOL result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamBySphere properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamBySphere operations

LPDISPATCH IPoint3DParamBySphere::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamBySphere::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamBySphere::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamBySphere::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint3DParamBySphere::SetR(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamBySphere::GetR()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamBySphere::SetA(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamBySphere::GetA()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamBySphere::SetB(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamBySphere::GetB()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamBySphere::SetAssociationObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPoint3DParamBySphere::GetAssociationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3DParamBySphere::SetRadiusObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPoint3DParamBySphere::GetRadiusObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamByCylinder properties

/////////////////////////////////////////////////////////////////////////////
// IPoint3DParamByCylinder operations

LPDISPATCH IPoint3DParamByCylinder::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint3DParamByCylinder::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint3DParamByCylinder::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint3DParamByCylinder::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint3DParamByCylinder::SetR(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamByCylinder::GetR()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamByCylinder::SetA(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamByCylinder::GetA()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamByCylinder::SetZ(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint3DParamByCylinder::GetZ()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint3DParamByCylinder::SetAssociationObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPoint3DParamByCylinder::GetAssociationObject()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IPoint3DParamByCylinder::SetRadiusObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IPoint3DParamByCylinder::GetRadiusObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingText properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingText operations

LPDISPATCH IDrawingText::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingText::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingText::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingText::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingText::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingText::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDrawingText::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingText::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingText::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingText::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IDrawingText::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IDrawingText::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDrawingText::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IDrawingText::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDrawingText::GetAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IDrawingText::GetHeight()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDrawingText::GetWidth()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IDrawingText::GetHFormat()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetHFormat(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDrawingText::GetVFormat()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetVFormat(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IDrawingText::GetAllocation()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingText::SetAllocation(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingTexts properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingTexts operations

LPDISPATCH IDrawingTexts::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingTexts::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingTexts::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingTexts::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDrawingTexts::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDrawingTexts::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingTexts::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingTexts::GetDrawingText(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingTexts::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingContainer properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingContainer operations

VARIANT IDrawingContainer::GetObjects(const VARIANT& ObjType)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&ObjType);
	return result;
}

LPDISPATCH IDrawingContainer::GetDrawingTexts()
{
	LPDISPATCH result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetLineSegments()
{
	LPDISPATCH result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetArcs()
{
	LPDISPATCH result;
	InvokeHelper(0x138c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetMultilines()
{
	LPDISPATCH result;
	InvokeHelper(0x138d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetDrawingContours()
{
	LPDISPATCH result;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetCircles()
{
	LPDISPATCH result;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetPoints()
{
	LPDISPATCH result;
	InvokeHelper(0x1390, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetBeziers()
{
	LPDISPATCH result;
	InvokeHelper(0x1391, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetMacroObjects()
{
	LPDISPATCH result;
	InvokeHelper(0x1392, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetLines()
{
	LPDISPATCH result;
	InvokeHelper(0x1393, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetPolyLines2D()
{
	LPDISPATCH result;
	InvokeHelper(0x1394, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetNurbses()
{
	LPDISPATCH result;
	InvokeHelper(0x1395, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetRasters()
{
	LPDISPATCH result;
	InvokeHelper(0x1396, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetOleDrawingObjects()
{
	LPDISPATCH result;
	InvokeHelper(0x1397, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetEllipses()
{
	LPDISPATCH result;
	InvokeHelper(0x1398, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetEllipseArcs()
{
	LPDISPATCH result;
	InvokeHelper(0x1399, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetRectangles()
{
	LPDISPATCH result;
	InvokeHelper(0x139a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetRegularPolygons()
{
	LPDISPATCH result;
	InvokeHelper(0x139b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetEquidistants()
{
	LPDISPATCH result;
	InvokeHelper(0x139c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetInsertionObjects()
{
	LPDISPATCH result;
	InvokeHelper(0x139d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetHatches()
{
	LPDISPATCH result;
	InvokeHelper(0x139e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContainer::GetColourings()
{
	LPDISPATCH result;
	InvokeHelper(0x139f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILineSegments properties

/////////////////////////////////////////////////////////////////////////////
// ILineSegments operations

LPDISPATCH ILineSegments::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineSegments::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineSegments::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineSegments::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILineSegments::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILineSegments::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineSegments::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILineSegments::GetLineSegment(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILineSegments::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILineSegment properties

/////////////////////////////////////////////////////////////////////////////
// ILineSegment operations

LPDISPATCH ILineSegment::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineSegment::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineSegment::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineSegment::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineSegment::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineSegment::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ILineSegment::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineSegment::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineSegment::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineSegment::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ILineSegment::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void ILineSegment::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineSegment::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineSegment::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineSegment::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineSegment::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineSegment::GetLength()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineSegment::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long ILineSegment::GetStyle()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILineSegment::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IArcs properties

/////////////////////////////////////////////////////////////////////////////
// IArcs operations

LPDISPATCH IArcs::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcs::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArcs::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcs::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IArcs::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IArcs::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcs::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IArcs::GetArc(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IArcs::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IArc properties

/////////////////////////////////////////////////////////////////////////////
// IArc operations

LPDISPATCH IArc::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArc::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArc::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArc::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArc::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArc::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArc::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IArc::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArc::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArc::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArc::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IArc::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArc::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IArc::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetRadius()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArc::GetDirection()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IArc::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetXc()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetYc()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetX1()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetY1()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetX2()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetY2()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetX3()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetY3()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetAngle1()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArc::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArc::GetAngle2()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IArc::GetStyle()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArc::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IMultilines properties

/////////////////////////////////////////////////////////////////////////////
// IMultilines operations

LPDISPATCH IMultilines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultilines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMultilines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultilines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IMultilines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IMultilines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultilines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMultilines::GetMultiline(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMultilines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMultiline properties

/////////////////////////////////////////////////////////////////////////////
// IMultiline operations

LPDISPATCH IMultiline::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultiline::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMultiline::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiline::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiline::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiline::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiline::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMultiline::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMultiline::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMultiline::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMultiline::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMultiline::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiline::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IMultiline::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMultiline::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultiline::GetBaseContour()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMultiline::GetTrackingType(long VertexIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		VertexIndex);
	return result;
}

void IMultiline::SetTrackingType(long VertexIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VertexIndex, nNewValue);
}

long IMultiline::GetVertexLimiter(long VertexIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		VertexIndex);
	return result;
}

void IMultiline::SetVertexLimiter(long VertexIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VertexIndex, nNewValue);
}

BOOL IMultiline::GetVertexDirection(long VertexIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		VertexIndex);
	return result;
}

void IMultiline::SetVertexDirection(long VertexIndex, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VertexIndex, bNewValue);
}

void IMultiline::SetVertexRadius(long VertexIndex, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VertexIndex, newValue);
}

double IMultiline::GetVertexRadius(long VertexIndex)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		VertexIndex);
	return result;
}

long IMultiline::GetVertexStyle(long VertexIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		VertexIndex);
	return result;
}

void IMultiline::SetVertexStyle(long VertexIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 VertexIndex, nNewValue);
}

long IMultiline::GetVertexCount()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiline::GetEndLimiter(BOOL First)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		First);
	return result;
}

void IMultiline::SetEndLimiter(BOOL First, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 First, nNewValue);
}

void IMultiline::SetEndParameter(BOOL First, double newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 First, newValue);
}

double IMultiline::GetEndParameter(BOOL First)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		First);
	return result;
}

long IMultiline::GetEndStyle(BOOL First)
{
	long result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		First);
	return result;
}

void IMultiline::SetEndStyle(BOOL First, long nNewValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 First, nNewValue);
}

BOOL IMultiline::AddLine(double Offset, long Style)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Offset, Style);
	return result;
}

BOOL IMultiline::DeleteLine(long LineIndex)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		LineIndex);
	return result;
}

long IMultiline::GetLineCount()
{
	long result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiline::SetLineOffset(long LineIndex, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 LineIndex, newValue);
}

double IMultiline::GetLineOffset(long LineIndex)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		LineIndex);
	return result;
}

long IMultiline::GetLineStyle(long LineIndex)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		LineIndex);
	return result;
}

void IMultiline::SetLineStyle(long LineIndex, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 LineIndex, nNewValue);
}

long IMultiline::FindLine(double Offset)
{
	long result;
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Offset);
	return result;
}

VARIANT IMultiline::GetLineOffsets()
{
	VARIANT result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IContour properties

/////////////////////////////////////////////////////////////////////////////
// IContour operations

LPDISPATCH IContour::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContour::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IContour::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContour::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IContour::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IContour::GetClosed()
{
	BOOL result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContour::AddSegment(long Type)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type);
	return result;
}

LPDISPATCH IContour::GetSegment(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

BOOL IContour::CopyCurve(LPDISPATCH Curve, BOOL DeleteSource)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x7d4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Curve, DeleteSource);
	return result;
}

long IContour::GetCount()
{
	long result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

VARIANT IContour::GetTmpObjects()
{
	VARIANT result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IContour::CopySegments(const VARIANT& Val, BOOL DeleteSource)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x7d7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Val, DeleteSource);
	return result;
}

BOOL IContour::Clear()
{
	BOOL result;
	InvokeHelper(0x7d8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingContours properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingContours operations

LPDISPATCH IDrawingContours::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContours::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingContours::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingContours::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDrawingContours::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDrawingContours::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContours::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingContours::GetDrawingContour(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingContours::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingContour properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingContour operations

LPDISPATCH IDrawingContour::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingContour::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingContour::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingContour::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingContour::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingContour::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingContour::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDrawingContour::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingContour::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingContour::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingContour::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IDrawingContour::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingContour::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IDrawingContour::GetStyle()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingContour::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ICircles properties

/////////////////////////////////////////////////////////////////////////////
// ICircles operations

LPDISPATCH ICircles::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircles::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircles::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircles::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ICircles::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ICircles::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircles::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICircles::GetCircle(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICircles::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICircle properties

/////////////////////////////////////////////////////////////////////////////
// ICircle operations

LPDISPATCH ICircle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircle::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircle::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircle::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICircle::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircle::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircle::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircle::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ICircle::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircle::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void ICircle::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircle::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircle::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircle::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircle::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircle::GetX()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircle::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircle::GetY()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircle::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircle::GetRadius()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long ICircle::GetStyle()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircle::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IPoints properties

/////////////////////////////////////////////////////////////////////////////
// IPoints operations

LPDISPATCH IPoints::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoints::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoints::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoints::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IPoints::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IPoints::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoints::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPoints::GetPoint(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPoints::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPoint properties

/////////////////////////////////////////////////////////////////////////////
// IPoint operations

LPDISPATCH IPoint::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPoint::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPoint::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPoint::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IPoint::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPoint::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPoint::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPoint::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPoint::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IPoint::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IPoint::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IPoint::GetAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IPoint::GetStyle()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPoint::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IBeziers properties

/////////////////////////////////////////////////////////////////////////////
// IBeziers operations

LPDISPATCH IBeziers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBeziers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBeziers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBeziers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBeziers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBeziers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBeziers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBeziers::GetBezier(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBeziers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBezier properties

/////////////////////////////////////////////////////////////////////////////
// IBezier operations

LPDISPATCH IBezier::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBezier::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBezier::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBezier::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBezier::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBezier::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBezier::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBezier::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBezier::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBezier::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBezier::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBezier::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBezier::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IBezier::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBezier::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBezier::GetPointsCount()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBezier::SetPoints(BOOL AllPoints, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_BOOL VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 AllPoints, &newValue);
}

VARIANT IBezier::GetPoints(BOOL AllPoints)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		AllPoints);
	return result;
}

BOOL IBezier::AddPoint(long Index, double XBase, double YBase, double* XLeft, double* YLeft, double* XRight, double* YRight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, XBase, YBase, XLeft, YLeft, XRight, YRight);
	return result;
}

BOOL IBezier::GetPoint(long Index, double* XBase, double* YBase, double* XLeft, double* YLeft, double* XRight, double* YRight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, XBase, YBase, XLeft, YLeft, XRight, YRight);
	return result;
}

BOOL IBezier::DeletePoint(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL IBezier::Clear()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBezier::GetStyle()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBezier::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IMacroObjects properties

/////////////////////////////////////////////////////////////////////////////
// IMacroObjects operations

LPDISPATCH IMacroObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMacroObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMacroObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMacroObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IMacroObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IMacroObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMacroObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMacroObjects::GetMacroObject(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMacroObjects::Add(BOOL MultyLayer)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		MultyLayer);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILines properties

/////////////////////////////////////////////////////////////////////////////
// ILines operations

LPDISPATCH ILines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILines::GetLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILine properties

/////////////////////////////////////////////////////////////////////////////
// ILine operations

LPDISPATCH ILine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILine::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILine::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILine::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ILine::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILine::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILine::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILine::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ILine::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILine::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void ILine::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILine::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILine::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILine::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILine::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILine::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILine::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILine::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILine::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILine::GetAngle()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPolyLines2D properties

/////////////////////////////////////////////////////////////////////////////
// IPolyLines2D operations

LPDISPATCH IPolyLines2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLines2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPolyLines2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPolyLines2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IPolyLines2D::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IPolyLines2D::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLines2D::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPolyLines2D::GetPolyLine2D(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IPolyLines2D::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPolyLine2D properties

/////////////////////////////////////////////////////////////////////////////
// IPolyLine2D operations

LPDISPATCH IPolyLine2D::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPolyLine2D::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPolyLine2D::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IPolyLine2D::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine2D::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine2D::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine2D::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPolyLine2D::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IPolyLine2D::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPolyLine2D::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetPointsCount()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPolyLine2D::SetPoints(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPolyLine2D::GetPoints()
{
	VARIANT result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IPolyLine2D::AddPoint(long Index, double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y);
	return result;
}

BOOL IPolyLine2D::GetPoint(long Index, double* X, double* Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y);
	return result;
}

BOOL IPolyLine2D::DeletePoint(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL IPolyLine2D::Clear()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IPolyLine2D::GetStyle()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPolyLine2D::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// INurbses properties

/////////////////////////////////////////////////////////////////////////////
// INurbses operations

LPDISPATCH INurbses::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbses::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long INurbses::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long INurbses::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN INurbses::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long INurbses::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbses::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH INurbses::GetNurbs(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH INurbses::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbses::Convert(LPDISPATCH Curve)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Curve);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// INurbs properties

/////////////////////////////////////////////////////////////////////////////
// INurbs operations

LPDISPATCH INurbs::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH INurbs::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long INurbs::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long INurbs::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long INurbs::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long INurbs::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void INurbs::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL INurbs::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL INurbs::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL INurbs::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL INurbs::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long INurbs::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void INurbs::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void INurbs::SetClosed(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL INurbs::GetClosed()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void INurbs::SetDegree(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long INurbs::GetDegree()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL INurbs::GetPeriodic()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long INurbs::GetPointsCount()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL INurbs::SetNurbsParams(const VARIANT& Points, const VARIANT& Weight, const VARIANT& Knots, long Degree, BOOL Closed)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_I4 VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Points, &Weight, &Knots, Degree, Closed);
	return result;
}

BOOL INurbs::GetNurbsParams(VARIANT* Points, VARIANT* Weight, VARIANT* Knots)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Points, Weight, Knots);
	return result;
}

BOOL INurbs::AddPoint(long Index, double X, double Y, double Weight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Weight);
	return result;
}

BOOL INurbs::GetPoint(long Index, double* X, double* Y, double* Weight)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y, Weight);
	return result;
}

BOOL INurbs::DeletePoint(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL INurbs::Clear()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long INurbs::GetStyle()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void INurbs::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IRasters properties

/////////////////////////////////////////////////////////////////////////////
// IRasters operations

LPDISPATCH IRasters::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRasters::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRasters::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRasters::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRasters::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRasters::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRasters::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRasters::GetRaster(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRasters::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRaster properties

/////////////////////////////////////////////////////////////////////////////
// IRaster operations

LPDISPATCH IRaster::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRaster::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRaster::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRaster::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRaster::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRaster::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRaster::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRaster::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRaster::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRaster::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRaster::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRaster::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRaster::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRaster::GetPlacement(double* X, double* Y, double* Angle, BOOL* MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

BOOL IRaster::SetPlacement(double X, double Y, double Angle, BOOL MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

void IRaster::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRaster::GetScale()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRaster::SetFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IRaster::GetFileName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IRaster::SetInsertionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRaster::GetInsertionType()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRaster::SetResolution(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRaster::GetResolution()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRaster::SetDisplayModePartial(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRaster::GetDisplayModePartial()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

double IRaster::GetHeight()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRaster::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRaster::GetWidth()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRaster::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRaster::GetSourceHeight()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IRaster::GetSourceWidth()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IRaster::GetPalette()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IRaster::GetIsEnableChangeResolution()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRaster::GetIsCutBoundarySet()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IOleDrawingObjects properties

/////////////////////////////////////////////////////////////////////////////
// IOleDrawingObjects operations

LPDISPATCH IOleDrawingObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IOleDrawingObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IOleDrawingObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IOleDrawingObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IOleDrawingObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IOleDrawingObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IOleDrawingObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IOleDrawingObjects::GetOleDrawingObject(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IOleDrawingObjects::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IOleDrawingObject properties

/////////////////////////////////////////////////////////////////////////////
// IOleDrawingObject operations

LPDISPATCH IOleDrawingObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IOleDrawingObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IOleDrawingObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IOleDrawingObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IOleDrawingObject::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IOleDrawingObject::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IOleDrawingObject::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IOleDrawingObject::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IOleDrawingObject::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IOleDrawingObject::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IOleDrawingObject::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IOleDrawingObject::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IOleDrawingObject::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IOleDrawingObject::GetPlacement(double* X, double* Y, double* Angle, BOOL* MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

BOOL IOleDrawingObject::SetPlacement(double X, double Y, double Angle, BOOL MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

void IOleDrawingObject::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IOleDrawingObject::GetScale()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IOleDrawingObject::SetClassId(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IOleDrawingObject::GetClassId()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IOleDrawingObject::SetFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IOleDrawingObject::GetFileName()
{
	CString result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IOleDrawingObject::SetLink(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IOleDrawingObject::GetLink()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IOleDrawingObject::SetInsertionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IOleDrawingObject::GetInsertionType()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IOleDrawingObject::DoVerb(long iVerb)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		iVerb);
	return result;
}

BOOL IOleDrawingObject::Close(BOOL Save)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Save);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEllipses properties

/////////////////////////////////////////////////////////////////////////////
// IEllipses operations

LPDISPATCH IEllipses::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEllipses::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEllipses::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipses::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IEllipses::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IEllipses::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEllipses::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEllipses::GetEllipse(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEllipses::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEllipse properties

/////////////////////////////////////////////////////////////////////////////
// IEllipse operations

LPDISPATCH IEllipse::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEllipse::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEllipse::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipse::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipse::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipse::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEllipse::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IEllipse::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEllipse::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEllipse::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEllipse::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IEllipse::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEllipse::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IEllipse::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetX1()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetY1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetX2()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetY2()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetSemiAxisA(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetSemiAxisA()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetSemiAxisB(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetSemiAxisB()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipse::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipse::GetAngle()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IEllipse::GetStyle()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEllipse::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IEllipseArcs properties

/////////////////////////////////////////////////////////////////////////////
// IEllipseArcs operations

LPDISPATCH IEllipseArcs::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEllipseArcs::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEllipseArcs::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipseArcs::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IEllipseArcs::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IEllipseArcs::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEllipseArcs::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEllipseArcs::GetEllipseArc(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEllipseArcs::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEllipseArc properties

/////////////////////////////////////////////////////////////////////////////
// IEllipseArc operations

LPDISPATCH IEllipseArc::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEllipseArc::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEllipseArc::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipseArc::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipseArc::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEllipseArc::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IEllipseArc::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEllipseArc::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEllipseArc::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEllipseArc::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IEllipseArc::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IEllipseArc::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetT1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetT1()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetT2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetT2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetAngle1()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetAngle2()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetSemiAxisA(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetSemiAxisA()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetSemiAxisB(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetSemiAxisB()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEllipseArc::GetAngle()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IEllipseArc::GetDirection()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IEllipseArc::GetStyle()
{
	long result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEllipseArc::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IRectangles properties

/////////////////////////////////////////////////////////////////////////////
// IRectangles operations

LPDISPATCH IRectangles::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRectangles::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRectangles::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRectangles::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRectangles::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRectangles::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRectangles::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRectangles::GetRectangle(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRectangles::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRectangle properties

/////////////////////////////////////////////////////////////////////////////
// IRectangle operations

LPDISPATCH IRectangle::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRectangle::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRectangle::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRectangle::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRectangle::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRectangle::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRectangle::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRectangle::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRectangle::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRectangle::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRectangle::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRectangle::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRectangle::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IRectangle::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRectangle::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRectangle::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRectangle::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRectangle::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRectangle::GetAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRectangle::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRectangle::GetHeight()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRectangle::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRectangle::GetWidth()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IRectangle::GetStyle()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRectangle::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRectangle::GetCorner(long Index, long* Type, double* L1, double* L2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Type, L1, L2);
	return result;
}

BOOL IRectangle::SetCorner(long Index, long Type, double L1, double L2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Type, L1, L2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRegularPolygons properties

/////////////////////////////////////////////////////////////////////////////
// IRegularPolygons operations

LPDISPATCH IRegularPolygons::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRegularPolygons::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRegularPolygons::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRegularPolygons::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRegularPolygons::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRegularPolygons::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRegularPolygons::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRegularPolygons::GetRegularPolygon(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRegularPolygons::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRegularPolygon properties

/////////////////////////////////////////////////////////////////////////////
// IRegularPolygon operations

LPDISPATCH IRegularPolygon::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRegularPolygon::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRegularPolygon::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRegularPolygon::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRegularPolygon::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRegularPolygon::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRegularPolygon::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRegularPolygon::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRegularPolygon::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRegularPolygon::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRegularPolygon::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IRegularPolygon::SetCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IRegularPolygon::GetCount()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRegularPolygon::GetXc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRegularPolygon::GetYc()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRegularPolygon::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRegularPolygon::GetRadius()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetDescribe(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRegularPolygon::GetDescribe()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRegularPolygon::GetStyle()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRegularPolygon::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRegularPolygon::GetCorner(long Index, long* Type, double* L1, double* L2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PR8 VTS_PR8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Type, L1, L2);
	return result;
}

BOOL IRegularPolygon::SetCorner(long Index, long Type, double L1, double L2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Type, L1, L2);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEquidistants properties

/////////////////////////////////////////////////////////////////////////////
// IEquidistants operations

LPDISPATCH IEquidistants::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistants::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistants::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistants::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IEquidistants::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IEquidistants::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistants::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEquidistants::GetEquidistant(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IEquidistants::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IEquidistant properties

/////////////////////////////////////////////////////////////////////////////
// IEquidistant operations

LPDISPATCH IEquidistant::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IEquidistant::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IEquidistant::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistant::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistant::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IEquidistant::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IEquidistant::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistant::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistant::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IEquidistant::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IEquidistant::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IEquidistant::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IEquidistant::SetSide(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IEquidistant::GetSide()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetCutMode(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistant::GetCutMode()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetDegenerateSegment(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IEquidistant::GetDegenerateSegment()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetLeftRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEquidistant::GetLeftRadius()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetRightRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IEquidistant::GetRightRadius()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IEquidistant::GetStyle()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IEquidistant::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionObjects properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionObjects operations

LPDISPATCH IInsertionObjects::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionObjects::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertionObjects::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionObjects::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IInsertionObjects::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IInsertionObjects::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionObjects::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IInsertionObjects::GetInsertionObject(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IInsertionObjects::Add(LPDISPATCH Definition)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Definition);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionObject properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionObject operations

LPDISPATCH IInsertionObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertionObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionObject::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionObject::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionObject::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IInsertionObject::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionObject::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionObject::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionObject::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IInsertionObject::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionObject::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IInsertionObject::GetPlacement(double* X, double* Y, double* Angle, BOOL* MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

BOOL IInsertionObject::SetPlacement(double X, double Y, double Angle, BOOL MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

void IInsertionObject::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IInsertionObject::GetName()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IInsertionObject::GetFileName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IInsertionObject::GetInsertionType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionObject::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IInsertionObject::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionObject::GetInsertionDefinition()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IInsertionObject::SetInsertionDefinition(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IHatches properties

/////////////////////////////////////////////////////////////////////////////
// IHatches operations

LPDISPATCH IHatches::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IHatches::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IHatches::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHatches::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IHatches::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IHatches::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IHatches::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IHatches::GetHatch(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IHatches::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IHatch properties

/////////////////////////////////////////////////////////////////////////////
// IHatch operations

LPDISPATCH IHatch::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IHatch::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IHatch::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHatch::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHatch::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHatch::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHatch::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IHatch::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IHatch::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IHatch::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IHatch::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IHatch::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHatch::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IHatch::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHatch::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHatch::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHatch::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IHatch::GetSide()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IHatch::SetSide(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IColourings properties

/////////////////////////////////////////////////////////////////////////////
// IColourings operations

LPDISPATCH IColourings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IColourings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IColourings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IColourings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IColourings::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IColourings::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IColourings::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IColourings::GetColouring(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IColourings::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IColouring properties

/////////////////////////////////////////////////////////////////////////////
// IColouring operations

LPDISPATCH IColouring::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IColouring::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IColouring::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IColouring::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IColouring::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IColouring::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IColouring::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IColouring::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IColouring::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IColouring::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IColouring::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColouring::GetColouringType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetColouringType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColouring::GetColor1()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetColor1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColouring::GetColor2()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetColor2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColouring::GetTransparency1()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetTransparency1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IColouring::GetTransparency2()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetTransparency2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IColouring::GetGradientType()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IColouring::SetGradientType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IColouring::GetGradientCount()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IColouring::SetGradientCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IColouring::GetGradientAngle()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColouring::SetGradientAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColouring::GetXc()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColouring::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IColouring::GetYc()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IColouring::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IColouring::GetGradations(VARIANT* Positions, VARIANT* Colors, VARIANT* Transparences, VARIANT* Interpolations)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Positions, Colors, Transparences, Interpolations);
	return result;
}

BOOL IColouring::SetGradations(const VARIANT& Positions, const VARIANT& Colors, const VARIANT& Transparences, const VARIANT& Interpolations)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Positions, &Colors, &Transparences, &Interpolations);
	return result;
}

long IColouring::AddGradation(long Position, long Color, long Transparency, BOOL Interpolation)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Position, Color, Transparency, Interpolation);
	return result;
}

BOOL IColouring::ClearGradations()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IColouring::GetGradationsCount()
{
	long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IColouring::GetGradation(long Index, long* Position, long* Color, long* Transparency, BOOL* Interpolation)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PBOOL;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Position, Color, Transparency, Interpolation);
	return result;
}

long IColouring::SetGradation(long Index, long Position, long Color, long Transparency, BOOL Interpolation)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Index, Position, Color, Transparency, Interpolation);
	return result;
}

BOOL IColouring::DeleteGradation(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

long IColouring::FindPosition(long Position)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Position);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMark properties

/////////////////////////////////////////////////////////////////////////////
// IMark operations

LPDISPATCH IMark::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMark::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMark::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMark::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMark::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMark::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMark::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMark::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMark::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMark::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMark::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMark::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMark::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IMark::GetX()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMark::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMark::GetY()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMark::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IMark::GetAutoNumber()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMark::SetAutoNumber(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IMark::GetName()
{
	LPDISPATCH result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMark::GetNumber()
{
	LPDISPATCH result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMark::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMark::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMark::GetTextUnder()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IMark::GetComment()
{
	CString result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMark::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IMarks properties

/////////////////////////////////////////////////////////////////////////////
// IMarks operations

LPDISPATCH IMarks::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarks::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMarks::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarks::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IMarks::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IMarks::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarks::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMarks::GetMark(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMarks::Add(long MarkType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		MarkType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMarkInsideForm properties

/////////////////////////////////////////////////////////////////////////////
// IMarkInsideForm operations

LPDISPATCH IMarkInsideForm::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkInsideForm::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMarkInsideForm::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkInsideForm::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkInsideForm::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkInsideForm::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMarkInsideForm::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkInsideForm::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkInsideForm::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkInsideForm::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMarkInsideForm::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IMarkInsideForm::GetX()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMarkInsideForm::GetY()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IMarkInsideForm::GetAutoNumber()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetAutoNumber(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IMarkInsideForm::GetName()
{
	LPDISPATCH result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkInsideForm::GetNumber()
{
	LPDISPATCH result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkInsideForm::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkInsideForm::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkInsideForm::GetTextUnder()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IMarkInsideForm::GetComment()
{
	CString result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

double IMarkInsideForm::GetAngle()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IMarkInsideForm::SetForm(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMarkInsideForm::GetForm()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetFormGabarit(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMarkInsideForm::GetFormGabarit()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetFormHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMarkInsideForm::GetFormHeight()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkInsideForm::SetFormStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMarkInsideForm::GetFormStyle()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMarkOnLine properties

/////////////////////////////////////////////////////////////////////////////
// IMarkOnLine operations

LPDISPATCH IMarkOnLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMarkOnLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkOnLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkOnLine::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkOnLine::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMarkOnLine::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkOnLine::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkOnLine::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkOnLine::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMarkOnLine::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IMarkOnLine::GetX()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMarkOnLine::GetY()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IMarkOnLine::GetAutoNumber()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetAutoNumber(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IMarkOnLine::GetName()
{
	LPDISPATCH result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLine::GetNumber()
{
	LPDISPATCH result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLine::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLine::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLine::GetTextUnder()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IMarkOnLine::GetComment()
{
	CString result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long IMarkOnLine::GetPosition()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetPosition(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IMarkOnLine::GetLine()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IMarkOnLine::SetLine(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IMarkOnLeader properties

/////////////////////////////////////////////////////////////////////////////
// IMarkOnLeader operations

LPDISPATCH IMarkOnLeader::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLeader::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMarkOnLeader::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkOnLeader::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkOnLeader::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkOnLeader::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMarkOnLeader::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkOnLeader::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkOnLeader::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkOnLeader::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMarkOnLeader::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IMarkOnLeader::GetX()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMarkOnLeader::GetY()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IMarkOnLeader::GetAutoNumber()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetAutoNumber(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IMarkOnLeader::GetName()
{
	LPDISPATCH result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLeader::GetNumber()
{
	LPDISPATCH result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLeader::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLeader::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkOnLeader::GetTextUnder()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

CString IMarkOnLeader::GetComment()
{
	CString result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetComment(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long IMarkOnLeader::GetArrowType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetArrowType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMarkOnLeader::GetShelfDirection()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMarkOnLeader::GetParallelBranch()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetParallelBranch(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IMarkOnLeader::GetBranchCount()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkOnLeader::SetBranchPoints(long Index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, &newValue);
}

VARIANT IMarkOnLeader::GetBranchPoints(long Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Index);
	return result;
}

void IMarkOnLeader::SetBranchBegin(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

BOOL IMarkOnLeader::GetBranchBegin(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void IMarkOnLeader::SetBranchX(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double IMarkOnLeader::GetBranchX(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void IMarkOnLeader::SetBranchY(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double IMarkOnLeader::GetBranchY(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

long IMarkOnLeader::GetBranchPointsCount(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

BOOL IMarkOnLeader::AddBranch(long Index, BOOL Begin, const VARIANT& Points)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Begin, &Points);
	return result;
}

BOOL IMarkOnLeader::AddBranchByPoint(long Index, BOOL Begin, double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BOOL VTS_R8 VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Begin, X, Y);
	return result;
}

BOOL IMarkOnLeader::DeleteBranch(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBuildingAxis properties

/////////////////////////////////////////////////////////////////////////////
// IBuildingAxis operations

LPDISPATCH IBuildingAxis::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingAxis::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBuildingAxis::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBuildingAxis::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBuildingAxis::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBuildingAxis::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBuildingAxis::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBuildingAxis::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBuildingAxis::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBuildingAxis::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBuildingAxis::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IBuildingAxis::SetDoubleMark(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBuildingAxis::GetDoubleMark()
{
	BOOL result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetMarkSize(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBuildingAxis::GetMarkSize()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetDottedLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBuildingAxis::GetDottedLength()
{
	double result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetInterval(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBuildingAxis::GetInterval()
{
	double result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetStroke(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBuildingAxis::GetStroke()
{
	double result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingAxis::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingAxis::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingAxis::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBuildingAxis::SetAutoStroke(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBuildingAxis::GetAutoStroke()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBuildingAxis::GetInsertionPoints(BOOL First, VARIANT* Points, VARIANT* Directions, VARIANT* Nodes)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x7da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		First, Points, Directions, Nodes);
	return result;
}

LPDISPATCH IBuildingAxis::GetNodeByPoint(double X, double Y, double Limit)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x7db, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Limit);
	return result;
}

LPDISPATCH IBuildingAxis::AddNodeByPoint(long Type, double X, double Y)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x7dc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, X, Y);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMarkNode properties

/////////////////////////////////////////////////////////////////////////////
// IMarkNode operations

LPDISPATCH IMarkNode::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkNode::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMarkNode::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkNode::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkNode::SetMarkType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMarkNode::GetMarkType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMarkNode::SetDoubleMark(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMarkNode::GetDoubleMark()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMarkNode::SetRefLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMarkNode::GetRefLength()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkNode::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkNode::GetMarkNodes(BOOL Left)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Left);
	return result;
}

BOOL IMarkNode::Delete()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMarkNode::GetInsertionPoints(BOOL LeftJut, VARIANT* Points, VARIANT* Directions)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		LeftJut, Points, Directions);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMarkNodes properties

/////////////////////////////////////////////////////////////////////////////
// IMarkNodes operations

LPDISPATCH IMarkNodes::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkNodes::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMarkNodes::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMarkNodes::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IMarkNodes::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IMarkNodes::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkNodes::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMarkNodes::Add(long Type, const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, &Index);
	return result;
}

BOOL IMarkNodes::Clear()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBuildingAxes properties

/////////////////////////////////////////////////////////////////////////////
// IBuildingAxes operations

LPDISPATCH IBuildingAxes::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingAxes::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBuildingAxes::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBuildingAxes::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBuildingAxes::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBuildingAxes::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingAxes::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBuildingAxes::GetBuildingAxis(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBuildingAxes::Add(long AxisType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		AxisType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IStraightAxis properties

/////////////////////////////////////////////////////////////////////////////
// IStraightAxis operations

LPDISPATCH IStraightAxis::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStraightAxis::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IStraightAxis::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IStraightAxis::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IStraightAxis::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IStraightAxis::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IStraightAxis::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IStraightAxis::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IStraightAxis::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IStraightAxis::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IStraightAxis::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IStraightAxis::SetDoubleMark(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IStraightAxis::GetDoubleMark()
{
	BOOL result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetMarkSize(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetMarkSize()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetDottedLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetDottedLength()
{
	double result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetInterval(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetInterval()
{
	double result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetStroke(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetStroke()
{
	double result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStraightAxis::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStraightAxis::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStraightAxis::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetAutoStroke(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IStraightAxis::GetAutoStroke()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IStraightAxis::GetInsertionPoints(BOOL First, VARIANT* Points, VARIANT* Directions, VARIANT* Nodes)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x7da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		First, Points, Directions, Nodes);
	return result;
}

LPDISPATCH IStraightAxis::GetNodeByPoint(double X, double Y, double Limit)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x7db, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Limit);
	return result;
}

LPDISPATCH IStraightAxis::AddNodeByPoint(long Type, double X, double Y)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x7dc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, X, Y);
	return result;
}

void IStraightAxis::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetLength()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IStraightAxis::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IStraightAxis::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IStraightAxis::GetJut(BOOL First)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		First);
	return result;
}

LPDISPATCH IStraightAxis::GetMarkNodes()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAxisJut properties

/////////////////////////////////////////////////////////////////////////////
// IAxisJut operations

LPDISPATCH IAxisJut::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAxisJut::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAxisJut::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAxisJut::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAxisJut::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisJut::GetLength()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisJut::SetMarkOffset(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisJut::GetMarkOffset()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisJut::SetBreakOffset(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisJut::GetBreakOffset()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisJut::SetBreakDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisJut::GetBreakDirection()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAxisJut::SetMarkOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisJut::GetMarkOn()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IArcAxis properties

/////////////////////////////////////////////////////////////////////////////
// IArcAxis operations

LPDISPATCH IArcAxis::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcAxis::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArcAxis::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcAxis::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcAxis::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcAxis::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IArcAxis::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcAxis::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcAxis::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcAxis::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IArcAxis::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IArcAxis::SetDoubleMark(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArcAxis::GetDoubleMark()
{
	BOOL result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetMarkSize(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetMarkSize()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetDottedLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetDottedLength()
{
	double result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetInterval(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetInterval()
{
	double result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetStroke(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetStroke()
{
	double result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcAxis::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcAxis::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcAxis::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetAutoStroke(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArcAxis::GetAutoStroke()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcAxis::GetInsertionPoints(BOOL First, VARIANT* Points, VARIANT* Directions, VARIANT* Nodes)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x7da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		First, Points, Directions, Nodes);
	return result;
}

LPDISPATCH IArcAxis::GetNodeByPoint(double X, double Y, double Limit)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x7db, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Limit);
	return result;
}

LPDISPATCH IArcAxis::AddNodeByPoint(long Type, double X, double Y)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x7dc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, X, Y);
	return result;
}

void IArcAxis::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetX1()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetY1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetX2()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetY2()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetAngle1()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetAngle2()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetRadius()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArcAxis::GetDirection()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcAxis::GetJut(BOOL First)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		First);
	return result;
}

LPDISPATCH IArcAxis::GetMarkNodes()
{
	LPDISPATCH result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetX3()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcAxis::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcAxis::GetY3()
{
	double result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICircleAxis properties

/////////////////////////////////////////////////////////////////////////////
// ICircleAxis operations

LPDISPATCH ICircleAxis::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircleAxis::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircleAxis::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircleAxis::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircleAxis::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircleAxis::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICircleAxis::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircleAxis::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircleAxis::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircleAxis::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ICircleAxis::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void ICircleAxis::SetDoubleMark(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleAxis::GetDoubleMark()
{
	BOOL result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetMarkSize(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetMarkSize()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetDottedLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetDottedLength()
{
	double result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetInterval(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetInterval()
{
	double result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetStroke(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetStroke()
{
	double result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircleAxis::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircleAxis::GetTextBefore()
{
	LPDISPATCH result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircleAxis::GetTextAfter()
{
	LPDISPATCH result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetAutoStroke(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleAxis::GetAutoStroke()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICircleAxis::GetInsertionPoints(BOOL First, VARIANT* Points, VARIANT* Directions, VARIANT* Nodes)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_PVARIANT VTS_PVARIANT VTS_PVARIANT;
	InvokeHelper(0x7da, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		First, Points, Directions, Nodes);
	return result;
}

LPDISPATCH ICircleAxis::GetNodeByPoint(double X, double Y, double Limit)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x7db, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		X, Y, Limit);
	return result;
}

LPDISPATCH ICircleAxis::AddNodeByPoint(long Type, double X, double Y)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x7dc, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, X, Y);
	return result;
}

void ICircleAxis::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetMarkAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetMarkAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleAxis::GetRadius()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleAxis::SetMarkOn(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleAxis::GetMarkOn()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircleAxis::GetBaseMarkNode()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICutUnitMarking properties

/////////////////////////////////////////////////////////////////////////////
// ICutUnitMarking operations

LPDISPATCH ICutUnitMarking::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutUnitMarking::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutUnitMarking::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutUnitMarking::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutUnitMarking::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutUnitMarking::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICutUnitMarking::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutUnitMarking::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutUnitMarking::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutUnitMarking::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ICutUnitMarking::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICutUnitMarking::GetStrokeCount()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetStrokeX(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double ICutUnitMarking::GetStrokeX(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void ICutUnitMarking::SetStrokeY(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double ICutUnitMarking::GetStrokeY(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void ICutUnitMarking::SetStroke(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double ICutUnitMarking::GetStroke(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

double ICutUnitMarking::GetAngle()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long ICutUnitMarking::GetShelfDirection()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double ICutUnitMarking::GetShelfX()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICutUnitMarking::GetShelfY()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutUnitMarking::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICutUnitMarking::GetTextUp()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutUnitMarking::GetTextDown()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ICutUnitMarking::AddStroke(double X, double Y, double Length)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Length);
	return result;
}

BOOL ICutUnitMarking::DeleteStroke(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICutUnitMarkings properties

/////////////////////////////////////////////////////////////////////////////
// ICutUnitMarkings operations

LPDISPATCH ICutUnitMarkings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutUnitMarkings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutUnitMarkings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutUnitMarkings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ICutUnitMarkings::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ICutUnitMarkings::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutUnitMarkings::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICutUnitMarkings::GetCutUnitMarking(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICutUnitMarkings::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IUnitMarking properties

/////////////////////////////////////////////////////////////////////////////
// IUnitMarking operations

LPDISPATCH IUnitMarking::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitMarking::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUnitMarking::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitMarking::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitMarking::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitMarking::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IUnitMarking::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IUnitMarking::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IUnitMarking::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IUnitMarking::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IUnitMarking::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IUnitMarking::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IUnitMarking::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IUnitMarking::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IUnitMarking::GetHeight()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IUnitMarking::GetWidth()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IUnitMarking::GetShelfDirection()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IUnitMarking::GetShelfX()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IUnitMarking::GetShelfY()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IUnitMarking::GetForm()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetForm(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IUnitMarking::GetTextUp()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitMarking::GetTextDown()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

double IUnitMarking::GetFilletRadius()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitMarking::SetFilletRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IUnitMarkings properties

/////////////////////////////////////////////////////////////////////////////
// IUnitMarkings operations

LPDISPATCH IUnitMarkings::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitMarkings::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUnitMarkings::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitMarkings::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IUnitMarkings::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IUnitMarkings::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitMarkings::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IUnitMarkings::GetUnitMarking(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IUnitMarkings::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBuildingContainer properties

/////////////////////////////////////////////////////////////////////////////
// IBuildingContainer operations

LPDISPATCH IBuildingContainer::GetBuildingAxes()
{
	LPDISPATCH result;
	InvokeHelper(0x157d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetMarks()
{
	LPDISPATCH result;
	InvokeHelper(0x157e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetCutUnitMarkings()
{
	LPDISPATCH result;
	InvokeHelper(0x157f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetUnitMarkings()
{
	LPDISPATCH result;
	InvokeHelper(0x1580, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetMultiTextLeaders()
{
	LPDISPATCH result;
	InvokeHelper(0x1581, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetUnitNumbers()
{
	LPDISPATCH result;
	InvokeHelper(0x1582, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetBraces()
{
	LPDISPATCH result;
	InvokeHelper(0x1583, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBuildingContainer::GetBuildingCutLines()
{
	LPDISPATCH result;
	InvokeHelper(0x1584, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMultiTextLeaders properties

/////////////////////////////////////////////////////////////////////////////
// IMultiTextLeaders operations

LPDISPATCH IMultiTextLeaders::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultiTextLeaders::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMultiTextLeaders::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiTextLeaders::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IMultiTextLeaders::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IMultiTextLeaders::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultiTextLeaders::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMultiTextLeaders::GetMultiTextLeader(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IMultiTextLeaders::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMultiTextLeader properties

/////////////////////////////////////////////////////////////////////////////
// IMultiTextLeader operations

LPDISPATCH IMultiTextLeader::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMultiTextLeader::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMultiTextLeader::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiTextLeader::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiTextLeader::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMultiTextLeader::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMultiTextLeader::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMultiTextLeader::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMultiTextLeader::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IMultiTextLeader::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IMultiTextLeader::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMultiTextLeader::GetArrowType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetArrowType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMultiTextLeader::GetBranchCount()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetBranchPoints(long Index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, &newValue);
}

VARIANT IMultiTextLeader::GetBranchPoints(long Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Index);
	return result;
}

long IMultiTextLeader::GetBranchPointsCount(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void IMultiTextLeader::SetBranchX(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double IMultiTextLeader::GetBranchX(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void IMultiTextLeader::SetBranchY(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double IMultiTextLeader::GetBranchY(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

BOOL IMultiTextLeader::AddBranch(long Index, const VARIANT& Points)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, &Points);
	return result;
}

BOOL IMultiTextLeader::AddBranchByPoint(long Index, double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y);
	return result;
}

BOOL IMultiTextLeader::DeleteBranch(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

double IMultiTextLeader::GetShelfX()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMultiTextLeader::GetShelfY()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IMultiTextLeader::GetShelfDirection()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IMultiTextLeader::GetTextDirection()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetTextDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMultiTextLeader::GetForm()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetForm(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMultiTextLeader::GetAlign()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMultiTextLeader::SetAlign(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IMultiTextLeader::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IUnitNumbers properties

/////////////////////////////////////////////////////////////////////////////
// IUnitNumbers operations

LPDISPATCH IUnitNumbers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitNumbers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUnitNumbers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitNumbers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IUnitNumbers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IUnitNumbers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitNumbers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IUnitNumbers::GetUnitNumber(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IUnitNumbers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IUnitNumber properties

/////////////////////////////////////////////////////////////////////////////
// IUnitNumber operations

LPDISPATCH IUnitNumber::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitNumber::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IUnitNumber::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitNumber::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitNumber::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IUnitNumber::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IUnitNumber::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IUnitNumber::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IUnitNumber::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IUnitNumber::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IUnitNumber::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IUnitNumber::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IUnitNumber::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IUnitNumber::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitNumber::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IUnitNumber::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IUnitNumber::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IUnitNumber::GetTextUp()
{
	LPDISPATCH result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IUnitNumber::GetTextDown()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBraces properties

/////////////////////////////////////////////////////////////////////////////
// IBraces operations

LPDISPATCH IBraces::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBraces::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBraces::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBraces::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBraces::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBraces::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBraces::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBraces::GetBrace(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBraces::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBrace properties

/////////////////////////////////////////////////////////////////////////////
// IBrace operations

LPDISPATCH IBrace::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBrace::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBrace::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrace::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrace::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrace::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrace::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBrace::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBrace::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBrace::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBrace::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBrace::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrace::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IBrace::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetLength()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

double IBrace::GetRadius()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IBrace::GetShelfDirection()
{
	long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrace::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IBrace::GetShelfX()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrace::GetShelfY()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrace::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IBrace::GetDirection()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBrace::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IBrace::GetAlignment()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrace::SetAlignment(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IBrace::GetStyle()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrace::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IBrace::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBrace::SetShelfPoints(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IBrace::GetShelfPoints()
{
	VARIANT result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICutLines properties

/////////////////////////////////////////////////////////////////////////////
// ICutLines operations

LPDISPATCH ICutLines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutLines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutLines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutLines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ICutLines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ICutLines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutLines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICutLines::GetCutLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICutLines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICutLine properties

/////////////////////////////////////////////////////////////////////////////
// ICutLine operations

LPDISPATCH ICutLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICutLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutLine::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICutLine::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutLine::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICutLine::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutLine::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutLine::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICutLine::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ICutLine::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICutLine::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICutLine::GetArrowPos()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICutLine::SetArrowPos(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

double ICutLine::GetX1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutLine::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICutLine::GetY1()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutLine::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICutLine::GetX2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutLine::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICutLine::GetY2()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICutLine::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void ICutLine::SetPoints(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ICutLine::GetPoints()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL ICutLine::GetAutoSorted()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICutLine::SetAutoSorted(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ICutLine::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICutLine::GetAdditionalText()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL ICutLine::GetAutoSheet()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICutLine::SetAutoSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutLine::GetAutoZone()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICutLine::SetAutoZone(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICutLine::GetAdditionalTextPos()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICutLine::SetAdditionalTextPos(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ISymbols2DContainer properties

/////////////////////////////////////////////////////////////////////////////
// ISymbols2DContainer operations

LPDISPATCH ISymbols2DContainer::GetLineDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2711, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetRadialDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2712, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetDiametralDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2713, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetAngleDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2714, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetBreakLineDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2715, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetHeightDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2716, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetArcDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2717, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetBreakRadialDimensions()
{
	LPDISPATCH result;
	InvokeHelper(0x2718, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetRoughs()
{
	LPDISPATCH result;
	InvokeHelper(0x2719, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetLeaders()
{
	LPDISPATCH result;
	InvokeHelper(0x271a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetBases()
{
	LPDISPATCH result;
	InvokeHelper(0x271b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetTolerances()
{
	LPDISPATCH result;
	InvokeHelper(0x271c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetDrawingTables()
{
	LPDISPATCH result;
	InvokeHelper(0x271d, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetCutLines()
{
	LPDISPATCH result;
	InvokeHelper(0x271e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetViewPointers()
{
	LPDISPATCH result;
	InvokeHelper(0x271f, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetCentreMarkers()
{
	LPDISPATCH result;
	InvokeHelper(0x2720, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetRemoteElements()
{
	LPDISPATCH result;
	InvokeHelper(0x2721, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetAxisLines()
{
	LPDISPATCH result;
	InvokeHelper(0x2722, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetWaveLines()
{
	LPDISPATCH result;
	InvokeHelper(0x2723, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ISymbols2DContainer::GetBrokenLines()
{
	LPDISPATCH result;
	InvokeHelper(0x2724, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILineDimensions properties

/////////////////////////////////////////////////////////////////////////////
// ILineDimensions operations

LPDISPATCH ILineDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ILineDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ILineDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILineDimensions::GetLineDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ILineDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILineDimension properties

/////////////////////////////////////////////////////////////////////////////
// ILineDimension operations

LPDISPATCH ILineDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILineDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ILineDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ILineDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ILineDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ILineDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ILineDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double ILineDimension::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetX3()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetY3()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetShelfX()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ILineDimension::GetShelfY()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long ILineDimension::GetOrientation()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetOrientation(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double ILineDimension::GetAngle()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ILineDimension::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IRadialDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IRadialDimensions operations

LPDISPATCH IRadialDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRadialDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRadialDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRadialDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRadialDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRadialDimensions::GetRadialDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRadialDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRadialDimension properties

/////////////////////////////////////////////////////////////////////////////
// IRadialDimension operations

LPDISPATCH IRadialDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRadialDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRadialDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRadialDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRadialDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRadialDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRadialDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRadialDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRadialDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRadialDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IRadialDimension::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRadialDimension::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRadialDimension::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IRadialDimension::GetDimensionType()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetDimensionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IRadialDimension::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRadialDimension::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IRadialDimension::AddBranch(BOOL BranchBegin, LPDISPATCH BranchObject)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		BranchBegin, BranchObject);
	return result;
}

BOOL IRadialDimension::AddBranchByArcParam(BOOL BranchBegin, double Xc, double Yc, double Radius, double Angle1, double Angle2, BOOL Direction)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		BranchBegin, Xc, Yc, Radius, Angle1, Angle2, Direction);
	return result;
}

long IRadialDimension::GetBranchsCount()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRadialDimension::GetBranchObject(long Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index);
	return result;
}

void IRadialDimension::SetBranchObject(long Index, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

BOOL IRadialDimension::DeleteBranch(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL IRadialDimension::GetBranchParam(long Index, double* Xc, double* Yc, double* Angle1, double* Angle2, BOOL* Direction)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Xc, Yc, Angle1, Angle2, Direction);
	return result;
}

BOOL IRadialDimension::SetBranchParam(long Index, double Xc, double Yc, double Angle1, double Angle2, BOOL Direction)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, Xc, Yc, Angle1, Angle2, Direction);
	return result;
}

BOOL IRadialDimension::GetBranchBegin(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void IRadialDimension::SetBranchBegin(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

double IRadialDimension::GetShelfX()
{
	double result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRadialDimension::GetShelfY()
{
	double result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRadialDimension::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IDiametralDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IDiametralDimensions operations

LPDISPATCH IDiametralDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDiametralDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDiametralDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDiametralDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDiametralDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDiametralDimensions::GetDiametralDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDiametralDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDiametralDimension properties

/////////////////////////////////////////////////////////////////////////////
// IDiametralDimension operations

LPDISPATCH IDiametralDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDiametralDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDiametralDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDiametralDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDiametralDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDiametralDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDiametralDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDiametralDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDiametralDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDiametralDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IDiametralDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IDiametralDimension::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDiametralDimension::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDiametralDimension::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IDiametralDimension::GetDimensionType()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetDimensionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IDiametralDimension::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDiametralDimension::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDiametralDimension::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IAngleDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IAngleDimensions operations

LPDISPATCH IAngleDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAngleDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAngleDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAngleDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAngleDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAngleDimensions::GetAngleDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAngleDimensions::Add(long DimType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		DimType);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAngleDimension properties

/////////////////////////////////////////////////////////////////////////////
// IAngleDimension operations

LPDISPATCH IAngleDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAngleDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAngleDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAngleDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAngleDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAngleDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAngleDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAngleDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAngleDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IAngleDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IAngleDimension::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IAngleDimension::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetAngle1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetAngle2()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetX1()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetY1()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetX2()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetY2()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAngleDimension::GetBaseObject1()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetBaseObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IAngleDimension::GetBaseObject2()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetBaseObject2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IAngleDimension::GetDimensionType()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetDimensionType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IAngleDimension::GetShelfX()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetShelfY()
{
	double result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IAngleDimension::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAngleDimension::GetDirection()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetX3()
{
	double result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAngleDimension::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAngleDimension::GetY3()
{
	double result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBreakLineDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IBreakLineDimensions operations

LPDISPATCH IBreakLineDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakLineDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBreakLineDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakLineDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBreakLineDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBreakLineDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakLineDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBreakLineDimensions::GetBreakLineDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBreakLineDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBreakLineDimension properties

/////////////////////////////////////////////////////////////////////////////
// IBreakLineDimension operations

LPDISPATCH IBreakLineDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakLineDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBreakLineDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakLineDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakLineDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakLineDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBreakLineDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakLineDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakLineDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakLineDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBreakLineDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IBreakLineDimension::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetX3()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetY3()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetShelfX()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakLineDimension::GetShelfY()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IBreakLineDimension::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBreakLineDimension::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IHeightDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IHeightDimensions operations

LPDISPATCH IHeightDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IHeightDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IHeightDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHeightDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IHeightDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IHeightDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IHeightDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IHeightDimensions::GetHeightDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IHeightDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IHeightDimension properties

/////////////////////////////////////////////////////////////////////////////
// IHeightDimension operations

LPDISPATCH IHeightDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IHeightDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IHeightDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHeightDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHeightDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IHeightDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IHeightDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IHeightDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IHeightDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IHeightDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IHeightDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IHeightDimension::GetDimensionType()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetDimensionType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IHeightDimension::GetX()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHeightDimension::GetY()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHeightDimension::GetX1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHeightDimension::GetY1()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHeightDimension::GetX2()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHeightDimension::GetY2()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IHeightDimension::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IArcDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IArcDimensions operations

LPDISPATCH IArcDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArcDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IArcDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IArcDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IArcDimensions::GetArcDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IArcDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IArcDimension properties

/////////////////////////////////////////////////////////////////////////////
// IArcDimension operations

LPDISPATCH IArcDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IArcDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IArcDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IArcDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IArcDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IArcDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IArcDimension::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetXc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetYc()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetX1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetY1()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetX2()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetY2()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetX3()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetY3()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetShelfX()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IArcDimension::GetShelfY()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IArcDimension::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArcDimension::GetDirection()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IArcDimension::GetDimensionType()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetDimensionType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IArcDimension::GetTextPointer()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IArcDimension::SetTextPointer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IBreakRadialDimensions properties

/////////////////////////////////////////////////////////////////////////////
// IBreakRadialDimensions operations

LPDISPATCH IBreakRadialDimensions::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakRadialDimensions::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimensions::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimensions::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBreakRadialDimensions::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimensions::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakRadialDimensions::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBreakRadialDimensions::GetBreakRadialDimension(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBreakRadialDimensions::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBreakRadialDimension properties

/////////////////////////////////////////////////////////////////////////////
// IBreakRadialDimension operations

LPDISPATCH IBreakRadialDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakRadialDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBreakRadialDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakRadialDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakRadialDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakRadialDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBreakRadialDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IBreakRadialDimension::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IBreakRadialDimension::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetAngle()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetBreakLength()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBreakLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IBreakRadialDimension::GetTextOnLine()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetTextOnLine(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IBreakRadialDimension::GetBreakAngle()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBreakAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetBreakX1()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBreakX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetBreakY1()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBreakY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetBreakX2()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBreakX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakRadialDimension::GetBreakY2()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakRadialDimension::SetBreakY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IRoughs properties

/////////////////////////////////////////////////////////////////////////////
// IRoughs operations

LPDISPATCH IRoughs::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughs::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRoughs::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRoughs::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRoughs::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRoughs::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRoughs::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRoughs::GetRough(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRoughs::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRough properties

/////////////////////////////////////////////////////////////////////////////
// IRough operations

LPDISPATCH IRough::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRough::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRough::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRough::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRough::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRough::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRough::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRough::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRough::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRough::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRough::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRough::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRough::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IRough::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IRough::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRough::GetX0()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRough::SetX0(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRough::GetY0()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRough::SetY0(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRough::GetShelfX()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRough::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRough::GetShelfY()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRough::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}


/////////////////////////////////////////////////////////////////////////////
// IBases properties

/////////////////////////////////////////////////////////////////////////////
// IBases operations

LPDISPATCH IBases::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBases::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBases::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBases::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBases::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBases::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBases::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBases::GetBase(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBases::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBase properties

/////////////////////////////////////////////////////////////////////////////
// IBase operations

LPDISPATCH IBase::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBase::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBase::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBase::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBase::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBase::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBase::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBase::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBase::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBase::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBase::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBase::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBase::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IBase::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBase::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBase::GetX0()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBase::SetX0(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBase::GetY0()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBase::SetY0(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBase::GetBranchX()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBase::SetBranchX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBase::GetBranchY()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBase::SetBranchY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IBase::GetDrawType()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBase::SetDrawType(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBase::GetAutoSorted()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBase::SetAutoSorted(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IBase::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITolerances properties

/////////////////////////////////////////////////////////////////////////////
// ITolerances operations

LPDISPATCH ITolerances::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerances::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITolerances::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITolerances::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ITolerances::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ITolerances::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerances::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITolerances::GetTolerance(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ITolerances::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ITolerance properties

/////////////////////////////////////////////////////////////////////////////
// ITolerance operations

LPDISPATCH ITolerance::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITolerance::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITolerance::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITolerance::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITolerance::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITolerance::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITolerance::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ITolerance::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITolerance::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITolerance::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITolerance::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ITolerance::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITolerance::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ITolerance::GetArrowType(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

void ITolerance::SetArrowType(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

long ITolerance::GetBranchPos(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void ITolerance::SetBranchPos(long Index, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingTables properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingTables operations

LPDISPATCH IDrawingTables::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingTables::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingTables::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingTables::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IDrawingTables::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IDrawingTables::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingTables::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingTables::GetDrawingTable(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IDrawingTables::Add(long RowsCount, long ColumnsCount, double RowHeigh, double ColumnsWidth, long TitlePos)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_R8 VTS_R8 VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		RowsCount, ColumnsCount, RowHeigh, ColumnsWidth, TitlePos);
	return result;
}

LPDISPATCH IDrawingTables::Load(LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		FileName);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IDrawingTable properties

/////////////////////////////////////////////////////////////////////////////
// IDrawingTable operations

LPDISPATCH IDrawingTable::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IDrawingTable::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IDrawingTable::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingTable::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingTable::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IDrawingTable::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IDrawingTable::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingTable::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingTable::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingTable::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IDrawingTable::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IDrawingTable::GetX()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDrawingTable::GetY()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IDrawingTable::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IDrawingTable::GetAngle()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetFixedCellsSize(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingTable::GetFixedCellsSize()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetFixedRowCount(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingTable::GetFixedRowCount()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IDrawingTable::SetFixedColumnCount(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IDrawingTable::GetFixedColumnCount()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IDrawingTable::Save(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IViewPointers properties

/////////////////////////////////////////////////////////////////////////////
// IViewPointers operations

LPDISPATCH IViewPointers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewPointers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IViewPointers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IViewPointers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IViewPointers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IViewPointers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewPointers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IViewPointers::GetViewPointer(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IViewPointers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IViewPointer properties

/////////////////////////////////////////////////////////////////////////////
// IViewPointer operations

LPDISPATCH IViewPointer::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewPointer::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IViewPointer::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IViewPointer::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IViewPointer::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IViewPointer::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IViewPointer::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IViewPointer::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IViewPointer::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IViewPointer::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IViewPointer::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IViewPointer::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IViewPointer::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IViewPointer::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IViewPointer::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IViewPointer::GetTextX()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetTextX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IViewPointer::GetTextY()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetTextY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IViewPointer::GetAutoSorted()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetAutoSorted(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewPointer::GetAutoSheet()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetAutoSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IViewPointer::GetAutoZone()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IViewPointer::SetAutoZone(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IViewPointer::GetText()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IViewPointer::GetAdditionalText()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICentreMarkers properties

/////////////////////////////////////////////////////////////////////////////
// ICentreMarkers operations

LPDISPATCH ICentreMarkers::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICentreMarkers::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICentreMarkers::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICentreMarkers::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN ICentreMarkers::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long ICentreMarkers::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICentreMarkers::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICentreMarkers::GetCentreMarker(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH ICentreMarkers::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICentreMarker properties

/////////////////////////////////////////////////////////////////////////////
// ICentreMarker operations

LPDISPATCH ICentreMarker::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICentreMarker::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICentreMarker::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICentreMarker::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICentreMarker::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICentreMarker::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ICentreMarker::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICentreMarker::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICentreMarker::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ICentreMarker::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long ICentreMarker::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH ICentreMarker::GetBaseObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetBaseObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void ICentreMarker::SetX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICentreMarker::GetX()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICentreMarker::GetY()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICentreMarker::GetAngle()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetSignType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICentreMarker::GetSignType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetSemiAxisAutoLength(long AxisType, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 AxisType, bNewValue);
}

BOOL ICentreMarker::GetSemiAxisAutoLength(long AxisType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		AxisType);
	return result;
}

void ICentreMarker::SetSemiAxisLength(long AxisType, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 AxisType, newValue);
}

double ICentreMarker::GetSemiAxisLength(long AxisType)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		AxisType);
	return result;
}

void ICentreMarker::SetCrosshairSize(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICentreMarker::GetCrosshairSize()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICentreMarker::SetCrosshairSizeModify(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICentreMarker::GetCrosshairSizeModify()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRemoteElements properties

/////////////////////////////////////////////////////////////////////////////
// IRemoteElements operations

LPDISPATCH IRemoteElements::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRemoteElements::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRemoteElements::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRemoteElements::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IRemoteElements::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IRemoteElements::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRemoteElements::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRemoteElements::GetRemoteElement(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IRemoteElements::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IRemoteElement properties

/////////////////////////////////////////////////////////////////////////////
// IRemoteElement operations

LPDISPATCH IRemoteElement::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRemoteElement::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IRemoteElement::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRemoteElement::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRemoteElement::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IRemoteElement::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IRemoteElement::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRemoteElement::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRemoteElement::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IRemoteElement::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IRemoteElement::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IRemoteElement::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRemoteElement::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRemoteElement::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRemoteElement::GetHeight()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRemoteElement::GetWidth()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetWidth(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IRemoteElement::GetShelfDirection()
{
	long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IRemoteElement::GetShelfX()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IRemoteElement::GetShelfY()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IRemoteElement::GetForm()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetForm(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IRemoteElement::GetTextUp()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IRemoteElement::GetTextDown()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

double IRemoteElement::GetFilletRadius()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetFilletRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IRemoteElement::GetAutoSorted()
{
	BOOL result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetAutoSorted(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRemoteElement::GetAutoSheet()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetAutoSheet(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IRemoteElement::GetAutoZone()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IRemoteElement::SetAutoZone(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IRemoteElement::GetAdditionalText()
{
	LPDISPATCH result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAxisLines properties

/////////////////////////////////////////////////////////////////////////////
// IAxisLines operations

LPDISPATCH IAxisLines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAxisLines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAxisLines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAxisLines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IAxisLines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IAxisLines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAxisLines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAxisLines::GetAxisLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IAxisLines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAxisLine properties

/////////////////////////////////////////////////////////////////////////////
// IAxisLine operations

LPDISPATCH IAxisLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAxisLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IAxisLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAxisLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAxisLine::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IAxisLine::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IAxisLine::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAxisLine::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAxisLine::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IAxisLine::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IAxisLine::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IAxisLine::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLine::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLine::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLine::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLine::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLine::GetAngle()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLine::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLine::GetLength()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IWaveLines properties

/////////////////////////////////////////////////////////////////////////////
// IWaveLines operations

LPDISPATCH IWaveLines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IWaveLines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IWaveLines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IWaveLines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IWaveLines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IWaveLines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IWaveLines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IWaveLines::GetWaveLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IWaveLines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IWaveLine properties

/////////////////////////////////////////////////////////////////////////////
// IWaveLine operations

LPDISPATCH IWaveLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IWaveLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IWaveLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IWaveLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IWaveLine::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IWaveLine::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IWaveLine::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IWaveLine::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IWaveLine::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IWaveLine::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IWaveLine::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IWaveLine::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetAngle()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetLength()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IWaveLine::GetStyle()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IWaveLine::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IWaveLine::GetDirection()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetHalfWavesCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IWaveLine::GetHalfWavesCount()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetWaveLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IWaveLine::GetWaveLength()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IWaveLine::SetWavesAmplitude(BOOL Representation, double NewVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Representation, NewVal);
	return result;
}

double IWaveLine::GetWavesAmplitude()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

BOOL IWaveLine::GetWavesAmplitudeRepresentation()
{
	BOOL result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IWaveLine::SetAutoWavesAmplitude(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IWaveLine::GetAutoWavesAmplitude()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBrokenLines properties

/////////////////////////////////////////////////////////////////////////////
// IBrokenLines operations

LPDISPATCH IBrokenLines::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBrokenLines::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBrokenLines::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrokenLines::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPUNKNOWN IBrokenLines::Get_NewEnum()
{
	LPUNKNOWN result;
	InvokeHelper(0xfffffffc, DISPATCH_PROPERTYGET, VT_UNKNOWN, (void*)&result, NULL);
	return result;
}

long IBrokenLines::GetCount()
{
	long result;
	InvokeHelper(0x7d0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBrokenLines::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBrokenLines::GetBrokenLine(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

LPDISPATCH IBrokenLines::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBrokenLine properties

/////////////////////////////////////////////////////////////////////////////
// IBrokenLine operations

LPDISPATCH IBrokenLine::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBrokenLine::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBrokenLine::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrokenLine::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrokenLine::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBrokenLine::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBrokenLine::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBrokenLine::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBrokenLine::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBrokenLine::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBrokenLine::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IBrokenLine::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetLength()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

long IBrokenLine::GetStyle()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

void IBrokenLine::SetJutValue(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetJutValue()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetAutoJutValue(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBrokenLine::GetAutoJutValue()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetBreaksCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IBrokenLine::GetBreaksCount()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetBreakAmplitude(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetBreakAmplitude()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetAutoBreakAmplitude(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBrokenLine::GetAutoBreakAmplitude()
{
	BOOL result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetBreakDisplacement(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBrokenLine::GetBreakDisplacement()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBrokenLine::SetType1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBrokenLine::GetType1()
{
	BOOL result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBreakAngleDimension properties

/////////////////////////////////////////////////////////////////////////////
// IBreakAngleDimension operations

LPDISPATCH IBreakAngleDimension::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakAngleDimension::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IBreakAngleDimension::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakAngleDimension::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakAngleDimension::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IBreakAngleDimension::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IBreakAngleDimension::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakAngleDimension::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakAngleDimension::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IBreakAngleDimension::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IBreakAngleDimension::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IBreakAngleDimension::GetXc()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetYc()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IBreakAngleDimension::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetRadius()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetAngle1()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetAngle2()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetX1()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetY1()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetX2()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetY2()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBreakAngleDimension::GetBaseObject1()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetBaseObject1(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IBreakAngleDimension::GetBaseObject2()
{
	LPDISPATCH result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetBaseObject2(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IBreakAngleDimension::GetDimensionType()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetDimensionType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IBreakAngleDimension::GetShelfX()
{
	double result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetShelfX(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetShelfY()
{
	double result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetShelfY(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IBreakAngleDimension::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IBreakAngleDimension::GetDirection()
{
	BOOL result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetX3()
{
	double result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBreakAngleDimension::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBreakAngleDimension::GetY3()
{
	double result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBranchs properties

/////////////////////////////////////////////////////////////////////////////
// IBranchs operations

double IBranchs::GetX0()
{
	double result;
	InvokeHelper(0x1389, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBranchs::SetX0(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1389, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IBranchs::GetY0()
{
	double result;
	InvokeHelper(0x138a, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IBranchs::SetY0(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x138a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long IBranchs::GetBranchCount()
{
	long result;
	InvokeHelper(0x138b, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IBranchs::SetBranchPoints(long Index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x138c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, &newValue);
}

VARIANT IBranchs::GetBranchPoints(long Index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Index);
	return result;
}

long IBranchs::GetBranchPointsCount(long Index)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Index);
	return result;
}

void IBranchs::SetBranchX(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x138e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double IBranchs::GetBranchX(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138e, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

void IBranchs::SetBranchY(long Index, double newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_R8;
	InvokeHelper(0x138f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, newValue);
}

double IBranchs::GetBranchY(long Index)
{
	double result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x138f, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms,
		Index);
	return result;
}

BOOL IBranchs::AddBranch(long Index, const VARIANT& Points)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x1390, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, &Points);
	return result;
}

BOOL IBranchs::AddBranchByPoint(long Index, double X, double Y)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8;
	InvokeHelper(0x1391, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index, X, Y);
	return result;
}

BOOL IBranchs::DeleteBranch(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1392, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ILeader properties

/////////////////////////////////////////////////////////////////////////////
// ILeader operations

long ILeader::GetShelfDirection()
{
	long result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILeader::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ILeader::GetSignType()
{
	long result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ILeader::SetSignType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL ILeader::GetArround()
{
	BOOL result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILeader::SetArround(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH ILeader::GetTextOnShelf()
{
	LPDISPATCH result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeader::GetTextUnderShelf()
{
	LPDISPATCH result;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeader::GetTextOnBranch()
{
	LPDISPATCH result;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeader::GetTextUnderBranch()
{
	LPDISPATCH result;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ILeader::GetTextAfterShelf()
{
	LPDISPATCH result;
	InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ILeader::SetBranchBegin(long Index, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Index, bNewValue);
}

BOOL ILeader::GetBranchBegin(long Index)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Index);
	return result;
}

BOOL ILeader::GetParallelBranch()
{
	BOOL result;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ILeader::SetParallelBranch(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IMarkLeader properties

/////////////////////////////////////////////////////////////////////////////
// IMarkLeader operations

LPDISPATCH IMarkLeader::GetTextOnBranch()
{
	LPDISPATCH result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkLeader::GetTextUnderBranch()
{
	LPDISPATCH result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMarkLeader::GetDesignation()
{
	LPDISPATCH result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPositionLeader properties

/////////////////////////////////////////////////////////////////////////////
// IPositionLeader operations

long IPositionLeader::GetShelfDirection()
{
	long result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPositionLeader::SetShelfDirection(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IPositionLeader::GetShelfVisible()
{
	BOOL result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPositionLeader::SetShelfVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPositionLeader::GetTextDirection()
{
	BOOL result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPositionLeader::SetTextDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IPositionLeader::GetForm()
{
	long result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPositionLeader::SetForm(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IPositionLeader::GetPositions()
{
	LPDISPATCH result;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPositionLeader::GetUnderPositionText()
{
	LPDISPATCH result;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPositionLeader::GetHorizontally()
{
	BOOL result;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPositionLeader::SetHorizontally(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IChangeLeader properties

/////////////////////////////////////////////////////////////////////////////
// IChangeLeader operations

long IChangeLeader::GetSignType()
{
	long result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IChangeLeader::SetSignType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

double IChangeLeader::GetSignHeight()
{
	double result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IChangeLeader::SetSignHeight(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IChangeLeader::GetLeaderLength()
{
	double result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IChangeLeader::SetLeaderLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL IChangeLeader::GetFullLeaderLength()
{
	BOOL result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IChangeLeader::SetFullLeaderLength(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IChangeLeader::GetDesignation()
{
	LPDISPATCH result;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBrandLeader properties

/////////////////////////////////////////////////////////////////////////////
// IBrandLeader operations

LPDISPATCH IBrandLeader::GetTextOnBranch()
{
	LPDISPATCH result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBrandLeader::GetTextUnderBranch()
{
	LPDISPATCH result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IBrandLeader::GetDesignation()
{
	LPDISPATCH result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IBrandLeader::GetDirection()
{
	BOOL result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IBrandLeader::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IToleranceParam properties

/////////////////////////////////////////////////////////////////////////////
// IToleranceParam operations

long IToleranceParam::GetBasePointPos()
{
	long result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetBasePointPos(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IToleranceParam::GetVertical()
{
	BOOL result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetVertical(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

LPDISPATCH IToleranceParam::GetTable()
{
	LPDISPATCH result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IToleranceParam::GetSign()
{
	long result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetSign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IToleranceParam::GetPrefixSign()
{
	long result;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetPrefixSign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CString IToleranceParam::GetValue()
{
	CString result;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetValue(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

long IToleranceParam::GetSuffixSign()
{
	long result;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetSuffixSign(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IToleranceParam::GetBaseValue1()
{
	LPDISPATCH result;
	InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IToleranceParam::GetBaseSign1()
{
	long result;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetBaseSign1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH IToleranceParam::GetBaseValue2()
{
	LPDISPATCH result;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IToleranceParam::GetBaseSign2()
{
	long result;
	InvokeHelper(0x5e7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IToleranceParam::SetBaseSign2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IContourSegment properties

/////////////////////////////////////////////////////////////////////////////
// IContourSegment operations

LPDISPATCH IContourSegment::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContourSegment::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IContourSegment::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContourSegment::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContourSegment::GetSegmentType()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContourSegment::GetCurve2D()
{
	LPDISPATCH result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IContourLineSegment properties

/////////////////////////////////////////////////////////////////////////////
// IContourLineSegment operations

LPDISPATCH IContourLineSegment::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContourLineSegment::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IContourLineSegment::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContourLineSegment::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContourLineSegment::GetSegmentType()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContourLineSegment::GetCurve2D()
{
	LPDISPATCH result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IContourLineSegment::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourLineSegment::GetX1()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourLineSegment::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourLineSegment::GetY1()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourLineSegment::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourLineSegment::GetX2()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourLineSegment::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourLineSegment::GetY2()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourLineSegment::SetLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourLineSegment::GetLength()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourLineSegment::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourLineSegment::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IContourArc properties

/////////////////////////////////////////////////////////////////////////////
// IContourArc operations

LPDISPATCH IContourArc::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContourArc::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IContourArc::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContourArc::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IContourArc::GetSegmentType()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IContourArc::GetCurve2D()
{
	LPDISPATCH result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IContourArc::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetRadius()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IContourArc::GetDirection()
{
	BOOL result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IContourArc::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetXc()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetYc()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetX1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetX1()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetY1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetY1()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetX2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetX2()
{
	double result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetY2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetY2()
{
	double result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetX3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetX3()
{
	double result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetY3(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetY3()
{
	double result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetAngle1()
{
	double result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IContourArc::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IContourArc::GetAngle2()
{
	double result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionFragment properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionFragment operations

LPDISPATCH IInsertionFragment::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionFragment::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertionFragment::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionFragment::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionFragment::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionFragment::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionFragment::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IInsertionFragment::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionFragment::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionFragment::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionFragment::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IInsertionFragment::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionFragment::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IInsertionFragment::GetPlacement(double* X, double* Y, double* Angle, BOOL* MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

BOOL IInsertionFragment::SetPlacement(double X, double Y, double Angle, BOOL MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

void IInsertionFragment::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IInsertionFragment::GetName()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IInsertionFragment::GetFileName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IInsertionFragment::GetInsertionType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionFragment::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IInsertionFragment::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionFragment::GetInsertionDefinition()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IInsertionFragment::SetInsertionDefinition(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IInsertionFragment::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IInsertionFragment::GetScale()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IInsertionFragment::SetMultiLayer(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IInsertionFragment::GetMultiLayer()
{
	BOOL result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT IInsertionFragment::GetVariables()
{
	VARIANT result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionFragment::GetVariable(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

long IInsertionFragment::GetVariablesCount()
{
	long result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionFragment::GetVariableTable()
{
	LPDISPATCH result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionView properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionView operations

LPDISPATCH IInsertionView::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionView::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IInsertionView::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionView::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionView::GetDrawingObjectType()
{
	long result;
	InvokeHelper(0xbb8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IInsertionView::GetLayerNumber()
{
	long result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionView::SetLayerNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IInsertionView::GetTemp()
{
	BOOL result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionView::GetValid()
{
	BOOL result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionView::Update()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IInsertionView::Delete()
{
	BOOL result;
	InvokeHelper(0xbbd, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long IInsertionView::GetDrawingObjectParamType()
{
	long result;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionView::SetDrawingObjectParamType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL IInsertionView::GetPlacement(double* X, double* Y, double* Angle, BOOL* MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PR8 VTS_PR8 VTS_PR8 VTS_PBOOL;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

BOOL IInsertionView::SetPlacement(double X, double Y, double Angle, BOOL MirrorSymmetry)
{
	BOOL result;
	static BYTE parms[] =
		VTS_R8 VTS_R8 VTS_R8 VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		X, Y, Angle, MirrorSymmetry);
	return result;
}

void IInsertionView::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IInsertionView::GetName()
{
	CString result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString IInsertionView::GetFileName()
{
	CString result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IInsertionView::GetInsertionType()
{
	long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IInsertionView::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IInsertionView::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IInsertionView::GetInsertionDefinition()
{
	LPDISPATCH result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IInsertionView::SetInsertionDefinition(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void IInsertionView::SetViewNumber(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IInsertionView::GetViewNumber()
{
	long result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString IInsertionView::GetViewName()
{
	CString result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IInsertionView::SetThinLines(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IInsertionView::GetThinLines()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IInsertionView::SetOwnerDocumentParams(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IInsertionView::GetOwnerDocumentParams()
{
	BOOL result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IInsertionsManager properties

/////////////////////////////////////////////////////////////////////////////
// IInsertionsManager operations

VARIANT IInsertionsManager::GetInsertionDefinitions(long Type)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Type);
	return result;
}

LPDISPATCH IInsertionsManager::GetInsertionDefinition(long Type, const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Type, &Index);
	return result;
}

LPDISPATCH IInsertionsManager::AddDefinition(long Type, LPCTSTR Name, LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type, Name, FileName);
	return result;
}

long IInsertionsManager::GetDefinitionsCount(long Type)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Type);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAxisLineParam properties

/////////////////////////////////////////////////////////////////////////////
// IAxisLineParam operations

void IAxisLineParam::SetJutLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLineParam::GetJutLength()
{
	double result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetDottedLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLineParam::GetDottedLength()
{
	double result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetInterval(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLineParam::GetInterval()
{
	double result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetAutoDetectedDash(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisLineParam::GetAutoDetectedDash()
{
	BOOL result;
	InvokeHelper(0x5e0, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetDashMaxLength(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IAxisLineParam::GetDashMaxLength()
{
	double result;
	InvokeHelper(0x5e1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetJutLengthModify(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisLineParam::GetJutLengthModify()
{
	BOOL result;
	InvokeHelper(0x5e2, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetDottedLengthModify(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisLineParam::GetDottedLengthModify()
{
	BOOL result;
	InvokeHelper(0x5e3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetIntervalModify(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisLineParam::GetIntervalModify()
{
	BOOL result;
	InvokeHelper(0x5e4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetAutoDetectedDashModify(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisLineParam::GetAutoDetectedDashModify()
{
	BOOL result;
	InvokeHelper(0x5e5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IAxisLineParam::SetDashMaxLengthModify(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IAxisLineParam::GetDashMaxLengthModify()
{
	BOOL result;
	InvokeHelper(0x5e6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IBoundariesObject properties

/////////////////////////////////////////////////////////////////////////////
// IBoundariesObject operations

VARIANT IBoundariesObject::GetBoundaries()
{
	VARIANT result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL IBoundariesObject::AddBoundaries(const VARIANT& Objects, BOOL DeleteSource)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x7d2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects, DeleteSource);
	return result;
}

BOOL IBoundariesObject::Clear()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IAnnotativeObject properties

/////////////////////////////////////////////////////////////////////////////
// IAnnotativeObject operations

long IAnnotativeObject::GetSign1()
{
	long result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAnnotativeObject::SetSign1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IAnnotativeObject::GetSign2()
{
	long result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IAnnotativeObject::SetSign2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// IAnnotativeContainer properties

/////////////////////////////////////////////////////////////////////////////
// IAnnotativeContainer operations

LPDISPATCH IAnnotativeContainer::GetItem(const VARIANT& Index)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		&Index);
	return result;
}

long IAnnotativeContainer::GetCount()
{
	long result;
	InvokeHelper(0x1b59, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH IAnnotativeContainer::Add(long Type)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1b5a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Type);
	return result;
}

LPDISPATCH IAnnotativeContainer::CreateByGeomObject(LPDISPATCH Obj)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1b5b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Obj);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICurveCopyObjectParam properties

/////////////////////////////////////////////////////////////////////////////
// ICurveCopyObjectParam operations

LPDISPATCH ICurveCopyObjectParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICurveCopyObjectParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICurveCopyObjectParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICurveCopyObjectParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetXOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetXOld()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetYOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetYOld()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetXNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetXNew()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetYNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetYNew()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetScale()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetAttributeCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICurveCopyObjectParam::GetAttributeCopy()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICurveCopyObjectParam::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetSpecificationObjectCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICurveCopyObjectParam::GetSpecificationObjectCopy()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetBaseCurve(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ICurveCopyObjectParam::GetBaseCurve()
{
	LPDISPATCH result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetStep(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICurveCopyObjectParam::GetStep()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICurveCopyObjectParam::GetCount()
{
	long result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetTurnToNormal(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICurveCopyObjectParam::GetTurnToNormal()
{
	BOOL result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetPositiveDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICurveCopyObjectParam::GetPositiveDirection()
{
	BOOL result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICurveCopyObjectParam::SetStepFactor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICurveCopyObjectParam::GetStepFactor()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICircleCopyObjectParam properties

/////////////////////////////////////////////////////////////////////////////
// ICircleCopyObjectParam operations

LPDISPATCH ICircleCopyObjectParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircleCopyObjectParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircleCopyObjectParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircleCopyObjectParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetXOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetXOld()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetYOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetYOld()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetXNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetXNew()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetYNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetYNew()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetScale()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetAttributeCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleCopyObjectParam::GetAttributeCopy()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleCopyObjectParam::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetSpecificationObjectCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleCopyObjectParam::GetSpecificationObjectCopy()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetXc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetXc()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetYc(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetYc()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetStep(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircleCopyObjectParam::GetStep()
{
	double result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetCount(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICircleCopyObjectParam::GetCount()
{
	long result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetByStep(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleCopyObjectParam::GetByStep()
{
	BOOL result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircleCopyObjectParam::SetPositiveDirection(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircleCopyObjectParam::GetPositiveDirection()
{
	BOOL result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExternalTessellationObject properties

/////////////////////////////////////////////////////////////////////////////
// IExternalTessellationObject operations

LPDISPATCH IExternalTessellationObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExternalTessellationObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExternalTessellationObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExternalTessellationObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExternalTessellationObject::GetObjectID()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IExternalTessellationObject::SetTessellation(const VARIANT& Points, const VARIANT& Indexes, const VARIANT& Normals, const VARIANT& Colors)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Points, &Indexes, &Normals, &Colors);
	return result;
}

void IExternalTessellationObject::SetVisible(LPDISPATCH Frame, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Frame, bNewValue);
}

BOOL IExternalTessellationObject::Delete()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL IExternalTessellationObject::SetAdvancedColor(long Color, double Ambient, double Diffuse, double Specularity, double Shininess, double Transparency, double Emission)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8 VTS_R8;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Color, Ambient, Diffuse, Specularity, Shininess, Transparency, Emission);
	return result;
}

BOOL IExternalTessellationObject::SetEdges(const VARIANT& Points, const VARIANT& Edges, const VARIANT& Colors)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Points, &Edges, &Colors);
	return result;
}

BOOL IExternalTessellationObject::SetPlaces(const VARIANT& Places)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Places);
	return result;
}

BOOL IExternalTessellationObject::SetEdgeStyles(const VARIANT& Styles)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Styles);
	return result;
}

BOOL IExternalTessellationObject::SetEdgeWidths(const VARIANT& Widths)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Widths);
	return result;
}

BOOL IExternalTessellationObject::SetTextureImage(long Width, long Heigh, BOOL RGBA, BOOL WrapMode, BOOL FiltMode, const VARIANT& ImageData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BOOL VTS_BOOL VTS_BOOL VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Width, Heigh, RGBA, WrapMode, FiltMode, &ImageData);
	return result;
}

BOOL IExternalTessellationObject::SetTexturePoints(BOOL Image2D, const VARIANT& ImagePoints)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_VARIANT;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Image2D, &ImagePoints);
	return result;
}

BOOL IExternalTessellationObject::SetFacetMode(BOOL SideMode, long CullingMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		SideMode, CullingMode);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExternalTessellationManager properties

/////////////////////////////////////////////////////////////////////////////
// IExternalTessellationManager operations

LPDISPATCH IExternalTessellationManager::Add()
{
	LPDISPATCH result;
	InvokeHelper(0x1d4d, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExternalTessellationManager::GetTessellationObject(long Id)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d4e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Id);
	return result;
}

void IExternalTessellationManager::SetObjectsVisible(const VARIANT& Ids, LPDISPATCH Frame, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x1d4f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &Ids, Frame, bNewValue);
}

BOOL IExternalTessellationManager::DeleteObjects(const VARIANT& Id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1d50, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Id);
	return result;
}

BOOL IExternalTessellationManager::Clear()
{
	BOOL result;
	InvokeHelper(0x1d51, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExternalTessellationManager::AddGDIObject()
{
	LPDISPATCH result;
	InvokeHelper(0x1d52, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExternalTessellationManager::GetGDIObject(long Id)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1d53, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Id);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IExternalGDIObject properties

/////////////////////////////////////////////////////////////////////////////
// IExternalGDIObject operations

LPDISPATCH IExternalGDIObject::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IExternalGDIObject::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IExternalGDIObject::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExternalGDIObject::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IExternalGDIObject::GetObjectID()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IExternalGDIObject::SetTexts(const VARIANT& Points, const VARIANT& Texts, const VARIANT& Colors, const VARIANT& Fonts, BOOL Is3DPoints)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_BOOL;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Points, &Texts, &Colors, &Fonts, Is3DPoints);
	return result;
}

void IExternalGDIObject::SetVisible(LPDISPATCH Frame, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_DISPATCH VTS_BOOL;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Frame, bNewValue);
}

BOOL IExternalGDIObject::Delete()
{
	BOOL result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IModelCurve3D properties

/////////////////////////////////////////////////////////////////////////////
// IModelCurve3D operations

BOOL IModelCurve3D::GetVertexVisible()
{
	BOOL result;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IModelCurve3D::SetVertexVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5dd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long IModelCurve3D::GetVertexStyle()
{
	long result;
	InvokeHelper(0x5de, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IModelCurve3D::SetVertexStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5de, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IModelCurve3D::GetEdgesStyle()
{
	long result;
	InvokeHelper(0x5df, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IModelCurve3D::SetEdgesStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5df, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}


/////////////////////////////////////////////////////////////////////////////
// ICircularCopyObjectParam properties

/////////////////////////////////////////////////////////////////////////////
// ICircularCopyObjectParam operations

LPDISPATCH ICircularCopyObjectParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ICircularCopyObjectParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ICircularCopyObjectParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ICircularCopyObjectParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetXOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetXOld()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetYOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetYOld()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetXNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetXNew()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetYNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetYNew()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetScale()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetAttributeCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetAttributeCopy()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetSpecificationObjectCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetSpecificationObjectCopy()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetRadius(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetRadius()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetStep1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetStep1()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetStepFactor1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetStepFactor1()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetCount1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICircularCopyObjectParam::GetCount1()
{
	long result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetAngle2()
{
	double result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetStep2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double ICircularCopyObjectParam::GetStep2()
{
	double result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetStepFactor2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetStepFactor2()
{
	BOOL result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetCount2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ICircularCopyObjectParam::GetCount2()
{
	long result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetSaveCentreCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetSaveCentreCopy()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICircularCopyObjectParam::SetTurnObject(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICircularCopyObjectParam::GetTurnObject()
{
	BOOL result;
	InvokeHelper(0x7da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IMeshCopyObjectParam properties

/////////////////////////////////////////////////////////////////////////////
// IMeshCopyObjectParam operations

LPDISPATCH IMeshCopyObjectParam::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IMeshCopyObjectParam::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IMeshCopyObjectParam::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IMeshCopyObjectParam::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetXOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetXOld()
{
	double result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetYOld(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetYOld()
{
	double result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetXNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetXNew()
{
	double result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetYNew(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetYNew()
{
	double result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetScale(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetScale()
{
	double result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetAngle(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetAngle()
{
	double result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetAttributeCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetAttributeCopy()
{
	BOOL result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetDimensionLineScale(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetDimensionLineScale()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetSpecificationObjectCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetSpecificationObjectCopy()
{
	BOOL result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetAngle1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetAngle1()
{
	double result;
	InvokeHelper(0x7d1, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetStep1(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetStep1()
{
	double result;
	InvokeHelper(0x7d2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetStepFactor1(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetStepFactor1()
{
	BOOL result;
	InvokeHelper(0x7d3, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetCount1(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMeshCopyObjectParam::GetCount1()
{
	long result;
	InvokeHelper(0x7d4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetAngle2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetAngle2()
{
	double result;
	InvokeHelper(0x7d5, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetStep2(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IMeshCopyObjectParam::GetStep2()
{
	double result;
	InvokeHelper(0x7d6, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetStepFactor2(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetStepFactor2()
{
	BOOL result;
	InvokeHelper(0x7d7, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetCount2(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IMeshCopyObjectParam::GetCount2()
{
	long result;
	InvokeHelper(0x7d8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetSaveCornersCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetSaveCornersCopy()
{
	BOOL result;
	InvokeHelper(0x7d9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IMeshCopyObjectParam::SetSaveCentreCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x7da, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IMeshCopyObjectParam::GetSaveCentreCopy()
{
	BOOL result;
	InvokeHelper(0x7da, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IHypertextReferenceParam properties

/////////////////////////////////////////////////////////////////////////////
// IHypertextReferenceParam operations

void IHypertextReferenceParam::SetLinkObject(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH IHypertextReferenceParam::GetLinkObject()
{
	LPDISPATCH result;
	InvokeHelper(0xbb9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void IHypertextReferenceParam::SetHypertextType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbba, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IHypertextReferenceParam::GetHypertextType()
{
	long result;
	InvokeHelper(0xbba, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHypertextReferenceParam::SetTextLineIndex(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IHypertextReferenceParam::GetTextLineIndex()
{
	long result;
	InvokeHelper(0xbbb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IHypertextReferenceParam::SetBrackets(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xbbc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IHypertextReferenceParam::GetBrackets()
{
	BOOL result;
	InvokeHelper(0xbbc, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IHypertextReferenceParam::SetPrecission(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IHypertextReferenceParam::GetPrecission()
{
	long result;
	InvokeHelper(0xbbd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

BOOL IHypertextReferenceParam::Destroy()
{
	BOOL result;
	InvokeHelper(0xbbe, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IHypertextReferenceParam::SetPropertyId(double newValue)
{
	static BYTE parms[] =
		VTS_R8;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

double IHypertextReferenceParam::GetPropertyId()
{
	double result;
	InvokeHelper(0xbbf, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyOpticalProps properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyOpticalProps operations

LPDISPATCH IPropertyOpticalProps::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyOpticalProps::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long IPropertyOpticalProps::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long IPropertyOpticalProps::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetVisible(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyOpticalProps::GetVisible()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyOpticalProps::GetName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

long IPropertyOpticalProps::GetControlType()
{
	long result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetId(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyOpticalProps::GetId()
{
	long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetEnable(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyOpticalProps::GetEnable()
{
	BOOL result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT IPropertyOpticalProps::GetValue()
{
	VARIANT result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetNameVisibility(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long IPropertyOpticalProps::GetNameVisibility()
{
	long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetHint(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyOpticalProps::GetHint()
{
	CString result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void IPropertyOpticalProps::SetTips(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString IPropertyOpticalProps::GetTips()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

LPDISPATCH IPropertyOpticalProps::GetColorParam()
{
	LPDISPATCH result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL IPropertyOpticalProps::Init(LPDISPATCH PVal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PVal);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// IPropertyEditCheckBox properties

/////////////////////////////////////////////////////////////////////////////
// IPropertyEditCheckBox operations

BOOL IPropertyEditCheckBox::GetCheckButton()
{
	BOOL result;
	InvokeHelper(0xc9, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEditCheckBox::SetCheckButton(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xc9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL IPropertyEditCheckBox::GetEnableCheckButton()
{
	BOOL result;
	InvokeHelper(0xca, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void IPropertyEditCheckBox::SetEnableCheckButton(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xca, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void IPropertyEditCheckBox::SetCustomBitmaps(const VARIANT& IdUnchecked, const VARIANT& IdChecked, const VARIANT& IdIndeterminate, const VARIANT& HInstance)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &IdUnchecked, &IdChecked, &IdIndeterminate, &HInstance);
}


/////////////////////////////////////////////////////////////////////////////
// ITablePattern properties

/////////////////////////////////////////////////////////////////////////////
// ITablePattern operations

LPDISPATCH ITablePattern::GetParent()
{
	LPDISPATCH result;
	InvokeHelper(0x3e8, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITablePattern::GetApplication()
{
	LPDISPATCH result;
	InvokeHelper(0x3e9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITablePattern::GetType()
{
	long result;
	InvokeHelper(0x3ea, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long ITablePattern::GetReference()
{
	long result;
	InvokeHelper(0x3eb, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString ITablePattern::GetName()
{
	CString result;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void ITablePattern::SetHidden(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITablePattern::GetHidden()
{
	BOOL result;
	InvokeHelper(0x1f6, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITablePattern::Update()
{
	BOOL result;
	InvokeHelper(0x1f7, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITablePattern::GetValid()
{
	BOOL result;
	InvokeHelper(0x1f8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITablePattern::GetPart()
{
	LPDISPATCH result;
	InvokeHelper(0x1f9, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

long ITablePattern::GetModelObjectType()
{
	long result;
	InvokeHelper(0x1fa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITablePattern::GetOwner()
{
	LPDISPATCH result;
	InvokeHelper(0x1fb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetInitialObjects(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ITablePattern::GetInitialObjects()
{
	VARIANT result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetInstanceDeletedIndexes(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

VARIANT ITablePattern::GetInstanceDeletedIndexes()
{
	VARIANT result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

BOOL ITablePattern::Destroy()
{
	BOOL result;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITablePattern::IsInitialObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

BOOL ITablePattern::AddInitialObjects(const VARIANT& Objects)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&Objects);
	return result;
}

BOOL ITablePattern::Clear()
{
	BOOL result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL ITablePattern::IsSuitableObject(LPDISPATCH Object)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Object);
	return result;
}

void ITablePattern::SetGeometryPattern(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITablePattern::GetGeometryPattern()
{
	BOOL result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetBasePointType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ITablePattern::GetBasePointType()
{
	long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetBasePoint(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH ITablePattern::GetBasePoint()
{
	LPDISPATCH result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH ITablePattern::GetExemplar(long Index1, long Index2)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, parms,
		Index1, Index2);
	return result;
}

BOOL ITablePattern::GetExemplarsCounts(long* Count1, long* Count2)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Count1, Count2);
	return result;
}

void ITablePattern::SetFileName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x65, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

CString ITablePattern::GetFileName()
{
	CString result;
	InvokeHelper(0x65, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetPointsType(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long ITablePattern::GetPointsType()
{
	long result;
	InvokeHelper(0x66, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void ITablePattern::SetSaveInitialOrientation(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ITablePattern::GetSaveInitialOrientation()
{
	BOOL result;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}


/////////////////////////////////////////////////////////////////////////////
// ICopyObjectParam1 properties

/////////////////////////////////////////////////////////////////////////////
// ICopyObjectParam1 operations

void ICopyObjectParam1::SetStoragesCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICopyObjectParam1::GetStoragesCopy()
{
	BOOL result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void ICopyObjectParam1::SetHyperLinksCopy(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL ICopyObjectParam1::GetHyperLinksCopy()
{
	BOOL result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}
